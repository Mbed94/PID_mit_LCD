
PID_mit_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061c8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08006284  08006284  00016284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063b8  080063b8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080063b8  080063b8  000163b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063c0  080063c0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063c0  080063c0  000163c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063c4  080063c4  000163c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080063c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000078  08006440  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08006440  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d37d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f18  00000000  00000000  0002d41d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d78  00000000  00000000  0002f338  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c70  00000000  00000000  000300b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000183a5  00000000  00000000  00030d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b141  00000000  00000000  000490c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009ad92  00000000  00000000  00054206  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eef98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003468  00000000  00000000  000ef014  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000078 	.word	0x20000078
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800626c 	.word	0x0800626c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000007c 	.word	0x2000007c
 8000100:	0800626c 	.word	0x0800626c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	464f      	mov	r7, r9
 8000434:	4646      	mov	r6, r8
 8000436:	46d6      	mov	lr, sl
 8000438:	b5c0      	push	{r6, r7, lr}
 800043a:	0004      	movs	r4, r0
 800043c:	b082      	sub	sp, #8
 800043e:	000d      	movs	r5, r1
 8000440:	4691      	mov	r9, r2
 8000442:	4698      	mov	r8, r3
 8000444:	428b      	cmp	r3, r1
 8000446:	d82f      	bhi.n	80004a8 <__udivmoddi4+0x78>
 8000448:	d02c      	beq.n	80004a4 <__udivmoddi4+0x74>
 800044a:	4641      	mov	r1, r8
 800044c:	4648      	mov	r0, r9
 800044e:	f001 fd0f 	bl	8001e70 <__clzdi2>
 8000452:	0029      	movs	r1, r5
 8000454:	0006      	movs	r6, r0
 8000456:	0020      	movs	r0, r4
 8000458:	f001 fd0a 	bl	8001e70 <__clzdi2>
 800045c:	1a33      	subs	r3, r6, r0
 800045e:	469c      	mov	ip, r3
 8000460:	3b20      	subs	r3, #32
 8000462:	469a      	mov	sl, r3
 8000464:	d500      	bpl.n	8000468 <__udivmoddi4+0x38>
 8000466:	e076      	b.n	8000556 <__udivmoddi4+0x126>
 8000468:	464b      	mov	r3, r9
 800046a:	4652      	mov	r2, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	001f      	movs	r7, r3
 8000470:	464b      	mov	r3, r9
 8000472:	4662      	mov	r2, ip
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d828      	bhi.n	80004ce <__udivmoddi4+0x9e>
 800047c:	d025      	beq.n	80004ca <__udivmoddi4+0x9a>
 800047e:	4653      	mov	r3, sl
 8000480:	1ba4      	subs	r4, r4, r6
 8000482:	41bd      	sbcs	r5, r7
 8000484:	2b00      	cmp	r3, #0
 8000486:	da00      	bge.n	800048a <__udivmoddi4+0x5a>
 8000488:	e07b      	b.n	8000582 <__udivmoddi4+0x152>
 800048a:	2200      	movs	r2, #0
 800048c:	2300      	movs	r3, #0
 800048e:	9200      	str	r2, [sp, #0]
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2301      	movs	r3, #1
 8000494:	4652      	mov	r2, sl
 8000496:	4093      	lsls	r3, r2
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	4662      	mov	r2, ip
 800049e:	4093      	lsls	r3, r2
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	e018      	b.n	80004d6 <__udivmoddi4+0xa6>
 80004a4:	4282      	cmp	r2, r0
 80004a6:	d9d0      	bls.n	800044a <__udivmoddi4+0x1a>
 80004a8:	2200      	movs	r2, #0
 80004aa:	2300      	movs	r3, #0
 80004ac:	9200      	str	r2, [sp, #0]
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <__udivmoddi4+0x8a>
 80004b6:	601c      	str	r4, [r3, #0]
 80004b8:	605d      	str	r5, [r3, #4]
 80004ba:	9800      	ldr	r0, [sp, #0]
 80004bc:	9901      	ldr	r1, [sp, #4]
 80004be:	b002      	add	sp, #8
 80004c0:	bc1c      	pop	{r2, r3, r4}
 80004c2:	4690      	mov	r8, r2
 80004c4:	4699      	mov	r9, r3
 80004c6:	46a2      	mov	sl, r4
 80004c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ca:	42a3      	cmp	r3, r4
 80004cc:	d9d7      	bls.n	800047e <__udivmoddi4+0x4e>
 80004ce:	2200      	movs	r2, #0
 80004d0:	2300      	movs	r3, #0
 80004d2:	9200      	str	r2, [sp, #0]
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	4663      	mov	r3, ip
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0e9      	beq.n	80004b0 <__udivmoddi4+0x80>
 80004dc:	07fb      	lsls	r3, r7, #31
 80004de:	4698      	mov	r8, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0872      	lsrs	r2, r6, #1
 80004e4:	430a      	orrs	r2, r1
 80004e6:	087b      	lsrs	r3, r7, #1
 80004e8:	4666      	mov	r6, ip
 80004ea:	e00e      	b.n	800050a <__udivmoddi4+0xda>
 80004ec:	42ab      	cmp	r3, r5
 80004ee:	d101      	bne.n	80004f4 <__udivmoddi4+0xc4>
 80004f0:	42a2      	cmp	r2, r4
 80004f2:	d80c      	bhi.n	800050e <__udivmoddi4+0xde>
 80004f4:	1aa4      	subs	r4, r4, r2
 80004f6:	419d      	sbcs	r5, r3
 80004f8:	2001      	movs	r0, #1
 80004fa:	1924      	adds	r4, r4, r4
 80004fc:	416d      	adcs	r5, r5
 80004fe:	2100      	movs	r1, #0
 8000500:	3e01      	subs	r6, #1
 8000502:	1824      	adds	r4, r4, r0
 8000504:	414d      	adcs	r5, r1
 8000506:	2e00      	cmp	r6, #0
 8000508:	d006      	beq.n	8000518 <__udivmoddi4+0xe8>
 800050a:	42ab      	cmp	r3, r5
 800050c:	d9ee      	bls.n	80004ec <__udivmoddi4+0xbc>
 800050e:	3e01      	subs	r6, #1
 8000510:	1924      	adds	r4, r4, r4
 8000512:	416d      	adcs	r5, r5
 8000514:	2e00      	cmp	r6, #0
 8000516:	d1f8      	bne.n	800050a <__udivmoddi4+0xda>
 8000518:	9800      	ldr	r0, [sp, #0]
 800051a:	9901      	ldr	r1, [sp, #4]
 800051c:	4653      	mov	r3, sl
 800051e:	1900      	adds	r0, r0, r4
 8000520:	4169      	adcs	r1, r5
 8000522:	2b00      	cmp	r3, #0
 8000524:	db23      	blt.n	800056e <__udivmoddi4+0x13e>
 8000526:	002b      	movs	r3, r5
 8000528:	4652      	mov	r2, sl
 800052a:	40d3      	lsrs	r3, r2
 800052c:	002a      	movs	r2, r5
 800052e:	4664      	mov	r4, ip
 8000530:	40e2      	lsrs	r2, r4
 8000532:	001c      	movs	r4, r3
 8000534:	4653      	mov	r3, sl
 8000536:	0015      	movs	r5, r2
 8000538:	2b00      	cmp	r3, #0
 800053a:	db2d      	blt.n	8000598 <__udivmoddi4+0x168>
 800053c:	0026      	movs	r6, r4
 800053e:	4657      	mov	r7, sl
 8000540:	40be      	lsls	r6, r7
 8000542:	0033      	movs	r3, r6
 8000544:	0026      	movs	r6, r4
 8000546:	4667      	mov	r7, ip
 8000548:	40be      	lsls	r6, r7
 800054a:	0032      	movs	r2, r6
 800054c:	1a80      	subs	r0, r0, r2
 800054e:	4199      	sbcs	r1, r3
 8000550:	9000      	str	r0, [sp, #0]
 8000552:	9101      	str	r1, [sp, #4]
 8000554:	e7ac      	b.n	80004b0 <__udivmoddi4+0x80>
 8000556:	4662      	mov	r2, ip
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	464a      	mov	r2, r9
 800055e:	40da      	lsrs	r2, r3
 8000560:	4661      	mov	r1, ip
 8000562:	0013      	movs	r3, r2
 8000564:	4642      	mov	r2, r8
 8000566:	408a      	lsls	r2, r1
 8000568:	0017      	movs	r7, r2
 800056a:	431f      	orrs	r7, r3
 800056c:	e780      	b.n	8000470 <__udivmoddi4+0x40>
 800056e:	4662      	mov	r2, ip
 8000570:	2320      	movs	r3, #32
 8000572:	1a9b      	subs	r3, r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	4666      	mov	r6, ip
 8000578:	409a      	lsls	r2, r3
 800057a:	0023      	movs	r3, r4
 800057c:	40f3      	lsrs	r3, r6
 800057e:	4313      	orrs	r3, r2
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0xfc>
 8000582:	4662      	mov	r2, ip
 8000584:	2320      	movs	r3, #32
 8000586:	2100      	movs	r1, #0
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	2200      	movs	r2, #0
 800058c:	9100      	str	r1, [sp, #0]
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	2201      	movs	r2, #1
 8000592:	40da      	lsrs	r2, r3
 8000594:	9201      	str	r2, [sp, #4]
 8000596:	e780      	b.n	800049a <__udivmoddi4+0x6a>
 8000598:	2320      	movs	r3, #32
 800059a:	4662      	mov	r2, ip
 800059c:	0026      	movs	r6, r4
 800059e:	1a9b      	subs	r3, r3, r2
 80005a0:	40de      	lsrs	r6, r3
 80005a2:	002f      	movs	r7, r5
 80005a4:	46b0      	mov	r8, r6
 80005a6:	4666      	mov	r6, ip
 80005a8:	40b7      	lsls	r7, r6
 80005aa:	4646      	mov	r6, r8
 80005ac:	003b      	movs	r3, r7
 80005ae:	4333      	orrs	r3, r6
 80005b0:	e7c8      	b.n	8000544 <__udivmoddi4+0x114>
 80005b2:	46c0      	nop			; (mov r8, r8)

080005b4 <__aeabi_dadd>:
 80005b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b6:	464f      	mov	r7, r9
 80005b8:	4646      	mov	r6, r8
 80005ba:	46d6      	mov	lr, sl
 80005bc:	000c      	movs	r4, r1
 80005be:	0309      	lsls	r1, r1, #12
 80005c0:	b5c0      	push	{r6, r7, lr}
 80005c2:	0a49      	lsrs	r1, r1, #9
 80005c4:	0f47      	lsrs	r7, r0, #29
 80005c6:	005e      	lsls	r6, r3, #1
 80005c8:	4339      	orrs	r1, r7
 80005ca:	031f      	lsls	r7, r3, #12
 80005cc:	0fdb      	lsrs	r3, r3, #31
 80005ce:	469c      	mov	ip, r3
 80005d0:	0065      	lsls	r5, r4, #1
 80005d2:	0a7b      	lsrs	r3, r7, #9
 80005d4:	0f57      	lsrs	r7, r2, #29
 80005d6:	431f      	orrs	r7, r3
 80005d8:	0d6d      	lsrs	r5, r5, #21
 80005da:	0fe4      	lsrs	r4, r4, #31
 80005dc:	0d76      	lsrs	r6, r6, #21
 80005de:	46a1      	mov	r9, r4
 80005e0:	00c0      	lsls	r0, r0, #3
 80005e2:	46b8      	mov	r8, r7
 80005e4:	00d2      	lsls	r2, r2, #3
 80005e6:	1bab      	subs	r3, r5, r6
 80005e8:	4564      	cmp	r4, ip
 80005ea:	d07b      	beq.n	80006e4 <__aeabi_dadd+0x130>
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	dd5f      	ble.n	80006b0 <__aeabi_dadd+0xfc>
 80005f0:	2e00      	cmp	r6, #0
 80005f2:	d000      	beq.n	80005f6 <__aeabi_dadd+0x42>
 80005f4:	e0a4      	b.n	8000740 <__aeabi_dadd+0x18c>
 80005f6:	003e      	movs	r6, r7
 80005f8:	4316      	orrs	r6, r2
 80005fa:	d100      	bne.n	80005fe <__aeabi_dadd+0x4a>
 80005fc:	e112      	b.n	8000824 <__aeabi_dadd+0x270>
 80005fe:	1e5e      	subs	r6, r3, #1
 8000600:	2e00      	cmp	r6, #0
 8000602:	d000      	beq.n	8000606 <__aeabi_dadd+0x52>
 8000604:	e19e      	b.n	8000944 <__aeabi_dadd+0x390>
 8000606:	1a87      	subs	r7, r0, r2
 8000608:	4643      	mov	r3, r8
 800060a:	42b8      	cmp	r0, r7
 800060c:	4180      	sbcs	r0, r0
 800060e:	2501      	movs	r5, #1
 8000610:	1ac9      	subs	r1, r1, r3
 8000612:	4240      	negs	r0, r0
 8000614:	1a09      	subs	r1, r1, r0
 8000616:	020b      	lsls	r3, r1, #8
 8000618:	d400      	bmi.n	800061c <__aeabi_dadd+0x68>
 800061a:	e131      	b.n	8000880 <__aeabi_dadd+0x2cc>
 800061c:	0249      	lsls	r1, r1, #9
 800061e:	0a4e      	lsrs	r6, r1, #9
 8000620:	2e00      	cmp	r6, #0
 8000622:	d100      	bne.n	8000626 <__aeabi_dadd+0x72>
 8000624:	e16e      	b.n	8000904 <__aeabi_dadd+0x350>
 8000626:	0030      	movs	r0, r6
 8000628:	f001 fc04 	bl	8001e34 <__clzsi2>
 800062c:	0003      	movs	r3, r0
 800062e:	3b08      	subs	r3, #8
 8000630:	2b1f      	cmp	r3, #31
 8000632:	dd00      	ble.n	8000636 <__aeabi_dadd+0x82>
 8000634:	e161      	b.n	80008fa <__aeabi_dadd+0x346>
 8000636:	2220      	movs	r2, #32
 8000638:	0039      	movs	r1, r7
 800063a:	1ad2      	subs	r2, r2, r3
 800063c:	409e      	lsls	r6, r3
 800063e:	40d1      	lsrs	r1, r2
 8000640:	409f      	lsls	r7, r3
 8000642:	430e      	orrs	r6, r1
 8000644:	429d      	cmp	r5, r3
 8000646:	dd00      	ble.n	800064a <__aeabi_dadd+0x96>
 8000648:	e151      	b.n	80008ee <__aeabi_dadd+0x33a>
 800064a:	1b5d      	subs	r5, r3, r5
 800064c:	1c6b      	adds	r3, r5, #1
 800064e:	2b1f      	cmp	r3, #31
 8000650:	dd00      	ble.n	8000654 <__aeabi_dadd+0xa0>
 8000652:	e17c      	b.n	800094e <__aeabi_dadd+0x39a>
 8000654:	2120      	movs	r1, #32
 8000656:	1ac9      	subs	r1, r1, r3
 8000658:	003d      	movs	r5, r7
 800065a:	0030      	movs	r0, r6
 800065c:	408f      	lsls	r7, r1
 800065e:	4088      	lsls	r0, r1
 8000660:	40dd      	lsrs	r5, r3
 8000662:	1e79      	subs	r1, r7, #1
 8000664:	418f      	sbcs	r7, r1
 8000666:	0031      	movs	r1, r6
 8000668:	2207      	movs	r2, #7
 800066a:	4328      	orrs	r0, r5
 800066c:	40d9      	lsrs	r1, r3
 800066e:	2500      	movs	r5, #0
 8000670:	4307      	orrs	r7, r0
 8000672:	403a      	ands	r2, r7
 8000674:	2a00      	cmp	r2, #0
 8000676:	d009      	beq.n	800068c <__aeabi_dadd+0xd8>
 8000678:	230f      	movs	r3, #15
 800067a:	403b      	ands	r3, r7
 800067c:	2b04      	cmp	r3, #4
 800067e:	d005      	beq.n	800068c <__aeabi_dadd+0xd8>
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	42bb      	cmp	r3, r7
 8000684:	41bf      	sbcs	r7, r7
 8000686:	427f      	negs	r7, r7
 8000688:	19c9      	adds	r1, r1, r7
 800068a:	001f      	movs	r7, r3
 800068c:	020b      	lsls	r3, r1, #8
 800068e:	d400      	bmi.n	8000692 <__aeabi_dadd+0xde>
 8000690:	e226      	b.n	8000ae0 <__aeabi_dadd+0x52c>
 8000692:	1c6a      	adds	r2, r5, #1
 8000694:	4bc6      	ldr	r3, [pc, #792]	; (80009b0 <__aeabi_dadd+0x3fc>)
 8000696:	0555      	lsls	r5, r2, #21
 8000698:	0d6d      	lsrs	r5, r5, #21
 800069a:	429a      	cmp	r2, r3
 800069c:	d100      	bne.n	80006a0 <__aeabi_dadd+0xec>
 800069e:	e106      	b.n	80008ae <__aeabi_dadd+0x2fa>
 80006a0:	4ac4      	ldr	r2, [pc, #784]	; (80009b4 <__aeabi_dadd+0x400>)
 80006a2:	08ff      	lsrs	r7, r7, #3
 80006a4:	400a      	ands	r2, r1
 80006a6:	0753      	lsls	r3, r2, #29
 80006a8:	0252      	lsls	r2, r2, #9
 80006aa:	433b      	orrs	r3, r7
 80006ac:	0b12      	lsrs	r2, r2, #12
 80006ae:	e08e      	b.n	80007ce <__aeabi_dadd+0x21a>
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d000      	beq.n	80006b6 <__aeabi_dadd+0x102>
 80006b4:	e0b8      	b.n	8000828 <__aeabi_dadd+0x274>
 80006b6:	1c6b      	adds	r3, r5, #1
 80006b8:	055b      	lsls	r3, r3, #21
 80006ba:	0d5b      	lsrs	r3, r3, #21
 80006bc:	2b01      	cmp	r3, #1
 80006be:	dc00      	bgt.n	80006c2 <__aeabi_dadd+0x10e>
 80006c0:	e130      	b.n	8000924 <__aeabi_dadd+0x370>
 80006c2:	1a87      	subs	r7, r0, r2
 80006c4:	4643      	mov	r3, r8
 80006c6:	42b8      	cmp	r0, r7
 80006c8:	41b6      	sbcs	r6, r6
 80006ca:	1acb      	subs	r3, r1, r3
 80006cc:	4276      	negs	r6, r6
 80006ce:	1b9e      	subs	r6, r3, r6
 80006d0:	0233      	lsls	r3, r6, #8
 80006d2:	d500      	bpl.n	80006d6 <__aeabi_dadd+0x122>
 80006d4:	e14c      	b.n	8000970 <__aeabi_dadd+0x3bc>
 80006d6:	003b      	movs	r3, r7
 80006d8:	4333      	orrs	r3, r6
 80006da:	d1a1      	bne.n	8000620 <__aeabi_dadd+0x6c>
 80006dc:	2200      	movs	r2, #0
 80006de:	2400      	movs	r4, #0
 80006e0:	2500      	movs	r5, #0
 80006e2:	e070      	b.n	80007c6 <__aeabi_dadd+0x212>
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	dc00      	bgt.n	80006ea <__aeabi_dadd+0x136>
 80006e8:	e0e5      	b.n	80008b6 <__aeabi_dadd+0x302>
 80006ea:	2e00      	cmp	r6, #0
 80006ec:	d100      	bne.n	80006f0 <__aeabi_dadd+0x13c>
 80006ee:	e083      	b.n	80007f8 <__aeabi_dadd+0x244>
 80006f0:	4eaf      	ldr	r6, [pc, #700]	; (80009b0 <__aeabi_dadd+0x3fc>)
 80006f2:	42b5      	cmp	r5, r6
 80006f4:	d060      	beq.n	80007b8 <__aeabi_dadd+0x204>
 80006f6:	2680      	movs	r6, #128	; 0x80
 80006f8:	0436      	lsls	r6, r6, #16
 80006fa:	4337      	orrs	r7, r6
 80006fc:	46b8      	mov	r8, r7
 80006fe:	2b38      	cmp	r3, #56	; 0x38
 8000700:	dc00      	bgt.n	8000704 <__aeabi_dadd+0x150>
 8000702:	e13e      	b.n	8000982 <__aeabi_dadd+0x3ce>
 8000704:	4643      	mov	r3, r8
 8000706:	4313      	orrs	r3, r2
 8000708:	001f      	movs	r7, r3
 800070a:	1e7a      	subs	r2, r7, #1
 800070c:	4197      	sbcs	r7, r2
 800070e:	183f      	adds	r7, r7, r0
 8000710:	4287      	cmp	r7, r0
 8000712:	4180      	sbcs	r0, r0
 8000714:	4240      	negs	r0, r0
 8000716:	1809      	adds	r1, r1, r0
 8000718:	020b      	lsls	r3, r1, #8
 800071a:	d400      	bmi.n	800071e <__aeabi_dadd+0x16a>
 800071c:	e0b0      	b.n	8000880 <__aeabi_dadd+0x2cc>
 800071e:	4ba4      	ldr	r3, [pc, #656]	; (80009b0 <__aeabi_dadd+0x3fc>)
 8000720:	3501      	adds	r5, #1
 8000722:	429d      	cmp	r5, r3
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x174>
 8000726:	e0c3      	b.n	80008b0 <__aeabi_dadd+0x2fc>
 8000728:	4aa2      	ldr	r2, [pc, #648]	; (80009b4 <__aeabi_dadd+0x400>)
 800072a:	087b      	lsrs	r3, r7, #1
 800072c:	400a      	ands	r2, r1
 800072e:	2101      	movs	r1, #1
 8000730:	400f      	ands	r7, r1
 8000732:	431f      	orrs	r7, r3
 8000734:	0851      	lsrs	r1, r2, #1
 8000736:	07d3      	lsls	r3, r2, #31
 8000738:	2207      	movs	r2, #7
 800073a:	431f      	orrs	r7, r3
 800073c:	403a      	ands	r2, r7
 800073e:	e799      	b.n	8000674 <__aeabi_dadd+0xc0>
 8000740:	4e9b      	ldr	r6, [pc, #620]	; (80009b0 <__aeabi_dadd+0x3fc>)
 8000742:	42b5      	cmp	r5, r6
 8000744:	d038      	beq.n	80007b8 <__aeabi_dadd+0x204>
 8000746:	2680      	movs	r6, #128	; 0x80
 8000748:	0436      	lsls	r6, r6, #16
 800074a:	4337      	orrs	r7, r6
 800074c:	46b8      	mov	r8, r7
 800074e:	2b38      	cmp	r3, #56	; 0x38
 8000750:	dd00      	ble.n	8000754 <__aeabi_dadd+0x1a0>
 8000752:	e0dc      	b.n	800090e <__aeabi_dadd+0x35a>
 8000754:	2b1f      	cmp	r3, #31
 8000756:	dc00      	bgt.n	800075a <__aeabi_dadd+0x1a6>
 8000758:	e130      	b.n	80009bc <__aeabi_dadd+0x408>
 800075a:	001e      	movs	r6, r3
 800075c:	4647      	mov	r7, r8
 800075e:	3e20      	subs	r6, #32
 8000760:	40f7      	lsrs	r7, r6
 8000762:	46bc      	mov	ip, r7
 8000764:	2b20      	cmp	r3, #32
 8000766:	d004      	beq.n	8000772 <__aeabi_dadd+0x1be>
 8000768:	2640      	movs	r6, #64	; 0x40
 800076a:	1af3      	subs	r3, r6, r3
 800076c:	4646      	mov	r6, r8
 800076e:	409e      	lsls	r6, r3
 8000770:	4332      	orrs	r2, r6
 8000772:	0017      	movs	r7, r2
 8000774:	4663      	mov	r3, ip
 8000776:	1e7a      	subs	r2, r7, #1
 8000778:	4197      	sbcs	r7, r2
 800077a:	431f      	orrs	r7, r3
 800077c:	e0cc      	b.n	8000918 <__aeabi_dadd+0x364>
 800077e:	2b00      	cmp	r3, #0
 8000780:	d100      	bne.n	8000784 <__aeabi_dadd+0x1d0>
 8000782:	e204      	b.n	8000b8e <__aeabi_dadd+0x5da>
 8000784:	4643      	mov	r3, r8
 8000786:	4313      	orrs	r3, r2
 8000788:	d100      	bne.n	800078c <__aeabi_dadd+0x1d8>
 800078a:	e159      	b.n	8000a40 <__aeabi_dadd+0x48c>
 800078c:	074b      	lsls	r3, r1, #29
 800078e:	08c0      	lsrs	r0, r0, #3
 8000790:	4318      	orrs	r0, r3
 8000792:	2380      	movs	r3, #128	; 0x80
 8000794:	08c9      	lsrs	r1, r1, #3
 8000796:	031b      	lsls	r3, r3, #12
 8000798:	4219      	tst	r1, r3
 800079a:	d008      	beq.n	80007ae <__aeabi_dadd+0x1fa>
 800079c:	4645      	mov	r5, r8
 800079e:	08ed      	lsrs	r5, r5, #3
 80007a0:	421d      	tst	r5, r3
 80007a2:	d104      	bne.n	80007ae <__aeabi_dadd+0x1fa>
 80007a4:	4643      	mov	r3, r8
 80007a6:	08d0      	lsrs	r0, r2, #3
 80007a8:	0759      	lsls	r1, r3, #29
 80007aa:	4308      	orrs	r0, r1
 80007ac:	0029      	movs	r1, r5
 80007ae:	0f42      	lsrs	r2, r0, #29
 80007b0:	00c9      	lsls	r1, r1, #3
 80007b2:	4d7f      	ldr	r5, [pc, #508]	; (80009b0 <__aeabi_dadd+0x3fc>)
 80007b4:	4311      	orrs	r1, r2
 80007b6:	00c0      	lsls	r0, r0, #3
 80007b8:	074b      	lsls	r3, r1, #29
 80007ba:	08ca      	lsrs	r2, r1, #3
 80007bc:	497c      	ldr	r1, [pc, #496]	; (80009b0 <__aeabi_dadd+0x3fc>)
 80007be:	08c0      	lsrs	r0, r0, #3
 80007c0:	4303      	orrs	r3, r0
 80007c2:	428d      	cmp	r5, r1
 80007c4:	d068      	beq.n	8000898 <__aeabi_dadd+0x2e4>
 80007c6:	0312      	lsls	r2, r2, #12
 80007c8:	056d      	lsls	r5, r5, #21
 80007ca:	0b12      	lsrs	r2, r2, #12
 80007cc:	0d6d      	lsrs	r5, r5, #21
 80007ce:	2100      	movs	r1, #0
 80007d0:	0312      	lsls	r2, r2, #12
 80007d2:	0018      	movs	r0, r3
 80007d4:	0b13      	lsrs	r3, r2, #12
 80007d6:	0d0a      	lsrs	r2, r1, #20
 80007d8:	0512      	lsls	r2, r2, #20
 80007da:	431a      	orrs	r2, r3
 80007dc:	4b76      	ldr	r3, [pc, #472]	; (80009b8 <__aeabi_dadd+0x404>)
 80007de:	052d      	lsls	r5, r5, #20
 80007e0:	4013      	ands	r3, r2
 80007e2:	432b      	orrs	r3, r5
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	07e4      	lsls	r4, r4, #31
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	4323      	orrs	r3, r4
 80007ec:	0019      	movs	r1, r3
 80007ee:	bc1c      	pop	{r2, r3, r4}
 80007f0:	4690      	mov	r8, r2
 80007f2:	4699      	mov	r9, r3
 80007f4:	46a2      	mov	sl, r4
 80007f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007f8:	003e      	movs	r6, r7
 80007fa:	4316      	orrs	r6, r2
 80007fc:	d012      	beq.n	8000824 <__aeabi_dadd+0x270>
 80007fe:	1e5e      	subs	r6, r3, #1
 8000800:	2e00      	cmp	r6, #0
 8000802:	d000      	beq.n	8000806 <__aeabi_dadd+0x252>
 8000804:	e100      	b.n	8000a08 <__aeabi_dadd+0x454>
 8000806:	1887      	adds	r7, r0, r2
 8000808:	4287      	cmp	r7, r0
 800080a:	4180      	sbcs	r0, r0
 800080c:	4441      	add	r1, r8
 800080e:	4240      	negs	r0, r0
 8000810:	1809      	adds	r1, r1, r0
 8000812:	2501      	movs	r5, #1
 8000814:	020b      	lsls	r3, r1, #8
 8000816:	d533      	bpl.n	8000880 <__aeabi_dadd+0x2cc>
 8000818:	2502      	movs	r5, #2
 800081a:	e785      	b.n	8000728 <__aeabi_dadd+0x174>
 800081c:	4664      	mov	r4, ip
 800081e:	0033      	movs	r3, r6
 8000820:	4641      	mov	r1, r8
 8000822:	0010      	movs	r0, r2
 8000824:	001d      	movs	r5, r3
 8000826:	e7c7      	b.n	80007b8 <__aeabi_dadd+0x204>
 8000828:	2d00      	cmp	r5, #0
 800082a:	d000      	beq.n	800082e <__aeabi_dadd+0x27a>
 800082c:	e0da      	b.n	80009e4 <__aeabi_dadd+0x430>
 800082e:	000c      	movs	r4, r1
 8000830:	4304      	orrs	r4, r0
 8000832:	d0f3      	beq.n	800081c <__aeabi_dadd+0x268>
 8000834:	1c5c      	adds	r4, r3, #1
 8000836:	d100      	bne.n	800083a <__aeabi_dadd+0x286>
 8000838:	e19f      	b.n	8000b7a <__aeabi_dadd+0x5c6>
 800083a:	4c5d      	ldr	r4, [pc, #372]	; (80009b0 <__aeabi_dadd+0x3fc>)
 800083c:	42a6      	cmp	r6, r4
 800083e:	d100      	bne.n	8000842 <__aeabi_dadd+0x28e>
 8000840:	e12f      	b.n	8000aa2 <__aeabi_dadd+0x4ee>
 8000842:	43db      	mvns	r3, r3
 8000844:	2b38      	cmp	r3, #56	; 0x38
 8000846:	dd00      	ble.n	800084a <__aeabi_dadd+0x296>
 8000848:	e166      	b.n	8000b18 <__aeabi_dadd+0x564>
 800084a:	2b1f      	cmp	r3, #31
 800084c:	dd00      	ble.n	8000850 <__aeabi_dadd+0x29c>
 800084e:	e183      	b.n	8000b58 <__aeabi_dadd+0x5a4>
 8000850:	2420      	movs	r4, #32
 8000852:	0005      	movs	r5, r0
 8000854:	1ae4      	subs	r4, r4, r3
 8000856:	000f      	movs	r7, r1
 8000858:	40dd      	lsrs	r5, r3
 800085a:	40d9      	lsrs	r1, r3
 800085c:	40a0      	lsls	r0, r4
 800085e:	4643      	mov	r3, r8
 8000860:	40a7      	lsls	r7, r4
 8000862:	1a5b      	subs	r3, r3, r1
 8000864:	1e44      	subs	r4, r0, #1
 8000866:	41a0      	sbcs	r0, r4
 8000868:	4698      	mov	r8, r3
 800086a:	432f      	orrs	r7, r5
 800086c:	4338      	orrs	r0, r7
 800086e:	1a17      	subs	r7, r2, r0
 8000870:	42ba      	cmp	r2, r7
 8000872:	4192      	sbcs	r2, r2
 8000874:	4643      	mov	r3, r8
 8000876:	4252      	negs	r2, r2
 8000878:	1a99      	subs	r1, r3, r2
 800087a:	4664      	mov	r4, ip
 800087c:	0035      	movs	r5, r6
 800087e:	e6ca      	b.n	8000616 <__aeabi_dadd+0x62>
 8000880:	2207      	movs	r2, #7
 8000882:	403a      	ands	r2, r7
 8000884:	2a00      	cmp	r2, #0
 8000886:	d000      	beq.n	800088a <__aeabi_dadd+0x2d6>
 8000888:	e6f6      	b.n	8000678 <__aeabi_dadd+0xc4>
 800088a:	074b      	lsls	r3, r1, #29
 800088c:	08ca      	lsrs	r2, r1, #3
 800088e:	4948      	ldr	r1, [pc, #288]	; (80009b0 <__aeabi_dadd+0x3fc>)
 8000890:	08ff      	lsrs	r7, r7, #3
 8000892:	433b      	orrs	r3, r7
 8000894:	428d      	cmp	r5, r1
 8000896:	d196      	bne.n	80007c6 <__aeabi_dadd+0x212>
 8000898:	0019      	movs	r1, r3
 800089a:	4311      	orrs	r1, r2
 800089c:	d100      	bne.n	80008a0 <__aeabi_dadd+0x2ec>
 800089e:	e19e      	b.n	8000bde <__aeabi_dadd+0x62a>
 80008a0:	2180      	movs	r1, #128	; 0x80
 80008a2:	0309      	lsls	r1, r1, #12
 80008a4:	430a      	orrs	r2, r1
 80008a6:	0312      	lsls	r2, r2, #12
 80008a8:	0b12      	lsrs	r2, r2, #12
 80008aa:	4d41      	ldr	r5, [pc, #260]	; (80009b0 <__aeabi_dadd+0x3fc>)
 80008ac:	e78f      	b.n	80007ce <__aeabi_dadd+0x21a>
 80008ae:	0015      	movs	r5, r2
 80008b0:	2200      	movs	r2, #0
 80008b2:	2300      	movs	r3, #0
 80008b4:	e78b      	b.n	80007ce <__aeabi_dadd+0x21a>
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d000      	beq.n	80008bc <__aeabi_dadd+0x308>
 80008ba:	e0c7      	b.n	8000a4c <__aeabi_dadd+0x498>
 80008bc:	1c6b      	adds	r3, r5, #1
 80008be:	055f      	lsls	r7, r3, #21
 80008c0:	0d7f      	lsrs	r7, r7, #21
 80008c2:	2f01      	cmp	r7, #1
 80008c4:	dc00      	bgt.n	80008c8 <__aeabi_dadd+0x314>
 80008c6:	e0f1      	b.n	8000aac <__aeabi_dadd+0x4f8>
 80008c8:	4d39      	ldr	r5, [pc, #228]	; (80009b0 <__aeabi_dadd+0x3fc>)
 80008ca:	42ab      	cmp	r3, r5
 80008cc:	d100      	bne.n	80008d0 <__aeabi_dadd+0x31c>
 80008ce:	e0b9      	b.n	8000a44 <__aeabi_dadd+0x490>
 80008d0:	1885      	adds	r5, r0, r2
 80008d2:	000a      	movs	r2, r1
 80008d4:	4285      	cmp	r5, r0
 80008d6:	4189      	sbcs	r1, r1
 80008d8:	4442      	add	r2, r8
 80008da:	4249      	negs	r1, r1
 80008dc:	1851      	adds	r1, r2, r1
 80008de:	2207      	movs	r2, #7
 80008e0:	07cf      	lsls	r7, r1, #31
 80008e2:	086d      	lsrs	r5, r5, #1
 80008e4:	432f      	orrs	r7, r5
 80008e6:	0849      	lsrs	r1, r1, #1
 80008e8:	403a      	ands	r2, r7
 80008ea:	001d      	movs	r5, r3
 80008ec:	e6c2      	b.n	8000674 <__aeabi_dadd+0xc0>
 80008ee:	2207      	movs	r2, #7
 80008f0:	4930      	ldr	r1, [pc, #192]	; (80009b4 <__aeabi_dadd+0x400>)
 80008f2:	1aed      	subs	r5, r5, r3
 80008f4:	4031      	ands	r1, r6
 80008f6:	403a      	ands	r2, r7
 80008f8:	e6bc      	b.n	8000674 <__aeabi_dadd+0xc0>
 80008fa:	003e      	movs	r6, r7
 80008fc:	3828      	subs	r0, #40	; 0x28
 80008fe:	4086      	lsls	r6, r0
 8000900:	2700      	movs	r7, #0
 8000902:	e69f      	b.n	8000644 <__aeabi_dadd+0x90>
 8000904:	0038      	movs	r0, r7
 8000906:	f001 fa95 	bl	8001e34 <__clzsi2>
 800090a:	3020      	adds	r0, #32
 800090c:	e68e      	b.n	800062c <__aeabi_dadd+0x78>
 800090e:	4643      	mov	r3, r8
 8000910:	4313      	orrs	r3, r2
 8000912:	001f      	movs	r7, r3
 8000914:	1e7a      	subs	r2, r7, #1
 8000916:	4197      	sbcs	r7, r2
 8000918:	1bc7      	subs	r7, r0, r7
 800091a:	42b8      	cmp	r0, r7
 800091c:	4180      	sbcs	r0, r0
 800091e:	4240      	negs	r0, r0
 8000920:	1a09      	subs	r1, r1, r0
 8000922:	e678      	b.n	8000616 <__aeabi_dadd+0x62>
 8000924:	000e      	movs	r6, r1
 8000926:	003b      	movs	r3, r7
 8000928:	4306      	orrs	r6, r0
 800092a:	4313      	orrs	r3, r2
 800092c:	2d00      	cmp	r5, #0
 800092e:	d161      	bne.n	80009f4 <__aeabi_dadd+0x440>
 8000930:	2e00      	cmp	r6, #0
 8000932:	d000      	beq.n	8000936 <__aeabi_dadd+0x382>
 8000934:	e0f4      	b.n	8000b20 <__aeabi_dadd+0x56c>
 8000936:	2b00      	cmp	r3, #0
 8000938:	d100      	bne.n	800093c <__aeabi_dadd+0x388>
 800093a:	e11b      	b.n	8000b74 <__aeabi_dadd+0x5c0>
 800093c:	4664      	mov	r4, ip
 800093e:	0039      	movs	r1, r7
 8000940:	0010      	movs	r0, r2
 8000942:	e739      	b.n	80007b8 <__aeabi_dadd+0x204>
 8000944:	4f1a      	ldr	r7, [pc, #104]	; (80009b0 <__aeabi_dadd+0x3fc>)
 8000946:	42bb      	cmp	r3, r7
 8000948:	d07a      	beq.n	8000a40 <__aeabi_dadd+0x48c>
 800094a:	0033      	movs	r3, r6
 800094c:	e6ff      	b.n	800074e <__aeabi_dadd+0x19a>
 800094e:	0030      	movs	r0, r6
 8000950:	3d1f      	subs	r5, #31
 8000952:	40e8      	lsrs	r0, r5
 8000954:	2b20      	cmp	r3, #32
 8000956:	d003      	beq.n	8000960 <__aeabi_dadd+0x3ac>
 8000958:	2140      	movs	r1, #64	; 0x40
 800095a:	1acb      	subs	r3, r1, r3
 800095c:	409e      	lsls	r6, r3
 800095e:	4337      	orrs	r7, r6
 8000960:	1e7b      	subs	r3, r7, #1
 8000962:	419f      	sbcs	r7, r3
 8000964:	2207      	movs	r2, #7
 8000966:	4307      	orrs	r7, r0
 8000968:	403a      	ands	r2, r7
 800096a:	2100      	movs	r1, #0
 800096c:	2500      	movs	r5, #0
 800096e:	e789      	b.n	8000884 <__aeabi_dadd+0x2d0>
 8000970:	1a17      	subs	r7, r2, r0
 8000972:	4643      	mov	r3, r8
 8000974:	42ba      	cmp	r2, r7
 8000976:	41b6      	sbcs	r6, r6
 8000978:	1a59      	subs	r1, r3, r1
 800097a:	4276      	negs	r6, r6
 800097c:	1b8e      	subs	r6, r1, r6
 800097e:	4664      	mov	r4, ip
 8000980:	e64e      	b.n	8000620 <__aeabi_dadd+0x6c>
 8000982:	2b1f      	cmp	r3, #31
 8000984:	dd00      	ble.n	8000988 <__aeabi_dadd+0x3d4>
 8000986:	e0ad      	b.n	8000ae4 <__aeabi_dadd+0x530>
 8000988:	2620      	movs	r6, #32
 800098a:	4647      	mov	r7, r8
 800098c:	1af6      	subs	r6, r6, r3
 800098e:	40b7      	lsls	r7, r6
 8000990:	46b9      	mov	r9, r7
 8000992:	0017      	movs	r7, r2
 8000994:	46b2      	mov	sl, r6
 8000996:	40df      	lsrs	r7, r3
 8000998:	464e      	mov	r6, r9
 800099a:	433e      	orrs	r6, r7
 800099c:	0037      	movs	r7, r6
 800099e:	4656      	mov	r6, sl
 80009a0:	40b2      	lsls	r2, r6
 80009a2:	1e56      	subs	r6, r2, #1
 80009a4:	41b2      	sbcs	r2, r6
 80009a6:	4317      	orrs	r7, r2
 80009a8:	4642      	mov	r2, r8
 80009aa:	40da      	lsrs	r2, r3
 80009ac:	1889      	adds	r1, r1, r2
 80009ae:	e6ae      	b.n	800070e <__aeabi_dadd+0x15a>
 80009b0:	000007ff 	.word	0x000007ff
 80009b4:	ff7fffff 	.word	0xff7fffff
 80009b8:	800fffff 	.word	0x800fffff
 80009bc:	2620      	movs	r6, #32
 80009be:	4647      	mov	r7, r8
 80009c0:	1af6      	subs	r6, r6, r3
 80009c2:	40b7      	lsls	r7, r6
 80009c4:	46b9      	mov	r9, r7
 80009c6:	0017      	movs	r7, r2
 80009c8:	46b2      	mov	sl, r6
 80009ca:	40df      	lsrs	r7, r3
 80009cc:	464e      	mov	r6, r9
 80009ce:	433e      	orrs	r6, r7
 80009d0:	0037      	movs	r7, r6
 80009d2:	4656      	mov	r6, sl
 80009d4:	40b2      	lsls	r2, r6
 80009d6:	1e56      	subs	r6, r2, #1
 80009d8:	41b2      	sbcs	r2, r6
 80009da:	4317      	orrs	r7, r2
 80009dc:	4642      	mov	r2, r8
 80009de:	40da      	lsrs	r2, r3
 80009e0:	1a89      	subs	r1, r1, r2
 80009e2:	e799      	b.n	8000918 <__aeabi_dadd+0x364>
 80009e4:	4c7f      	ldr	r4, [pc, #508]	; (8000be4 <__aeabi_dadd+0x630>)
 80009e6:	42a6      	cmp	r6, r4
 80009e8:	d05b      	beq.n	8000aa2 <__aeabi_dadd+0x4ee>
 80009ea:	2480      	movs	r4, #128	; 0x80
 80009ec:	0424      	lsls	r4, r4, #16
 80009ee:	425b      	negs	r3, r3
 80009f0:	4321      	orrs	r1, r4
 80009f2:	e727      	b.n	8000844 <__aeabi_dadd+0x290>
 80009f4:	2e00      	cmp	r6, #0
 80009f6:	d10c      	bne.n	8000a12 <__aeabi_dadd+0x45e>
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d100      	bne.n	80009fe <__aeabi_dadd+0x44a>
 80009fc:	e0cb      	b.n	8000b96 <__aeabi_dadd+0x5e2>
 80009fe:	4664      	mov	r4, ip
 8000a00:	0039      	movs	r1, r7
 8000a02:	0010      	movs	r0, r2
 8000a04:	4d77      	ldr	r5, [pc, #476]	; (8000be4 <__aeabi_dadd+0x630>)
 8000a06:	e6d7      	b.n	80007b8 <__aeabi_dadd+0x204>
 8000a08:	4f76      	ldr	r7, [pc, #472]	; (8000be4 <__aeabi_dadd+0x630>)
 8000a0a:	42bb      	cmp	r3, r7
 8000a0c:	d018      	beq.n	8000a40 <__aeabi_dadd+0x48c>
 8000a0e:	0033      	movs	r3, r6
 8000a10:	e675      	b.n	80006fe <__aeabi_dadd+0x14a>
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d014      	beq.n	8000a40 <__aeabi_dadd+0x48c>
 8000a16:	074b      	lsls	r3, r1, #29
 8000a18:	08c0      	lsrs	r0, r0, #3
 8000a1a:	4318      	orrs	r0, r3
 8000a1c:	2380      	movs	r3, #128	; 0x80
 8000a1e:	08c9      	lsrs	r1, r1, #3
 8000a20:	031b      	lsls	r3, r3, #12
 8000a22:	4219      	tst	r1, r3
 8000a24:	d007      	beq.n	8000a36 <__aeabi_dadd+0x482>
 8000a26:	08fc      	lsrs	r4, r7, #3
 8000a28:	421c      	tst	r4, r3
 8000a2a:	d104      	bne.n	8000a36 <__aeabi_dadd+0x482>
 8000a2c:	0779      	lsls	r1, r7, #29
 8000a2e:	08d0      	lsrs	r0, r2, #3
 8000a30:	4308      	orrs	r0, r1
 8000a32:	46e1      	mov	r9, ip
 8000a34:	0021      	movs	r1, r4
 8000a36:	464c      	mov	r4, r9
 8000a38:	0f42      	lsrs	r2, r0, #29
 8000a3a:	00c9      	lsls	r1, r1, #3
 8000a3c:	4311      	orrs	r1, r2
 8000a3e:	00c0      	lsls	r0, r0, #3
 8000a40:	4d68      	ldr	r5, [pc, #416]	; (8000be4 <__aeabi_dadd+0x630>)
 8000a42:	e6b9      	b.n	80007b8 <__aeabi_dadd+0x204>
 8000a44:	001d      	movs	r5, r3
 8000a46:	2200      	movs	r2, #0
 8000a48:	2300      	movs	r3, #0
 8000a4a:	e6c0      	b.n	80007ce <__aeabi_dadd+0x21a>
 8000a4c:	2d00      	cmp	r5, #0
 8000a4e:	d15b      	bne.n	8000b08 <__aeabi_dadd+0x554>
 8000a50:	000d      	movs	r5, r1
 8000a52:	4305      	orrs	r5, r0
 8000a54:	d100      	bne.n	8000a58 <__aeabi_dadd+0x4a4>
 8000a56:	e6e2      	b.n	800081e <__aeabi_dadd+0x26a>
 8000a58:	1c5d      	adds	r5, r3, #1
 8000a5a:	d100      	bne.n	8000a5e <__aeabi_dadd+0x4aa>
 8000a5c:	e0b0      	b.n	8000bc0 <__aeabi_dadd+0x60c>
 8000a5e:	4d61      	ldr	r5, [pc, #388]	; (8000be4 <__aeabi_dadd+0x630>)
 8000a60:	42ae      	cmp	r6, r5
 8000a62:	d01f      	beq.n	8000aa4 <__aeabi_dadd+0x4f0>
 8000a64:	43db      	mvns	r3, r3
 8000a66:	2b38      	cmp	r3, #56	; 0x38
 8000a68:	dc71      	bgt.n	8000b4e <__aeabi_dadd+0x59a>
 8000a6a:	2b1f      	cmp	r3, #31
 8000a6c:	dd00      	ble.n	8000a70 <__aeabi_dadd+0x4bc>
 8000a6e:	e096      	b.n	8000b9e <__aeabi_dadd+0x5ea>
 8000a70:	2520      	movs	r5, #32
 8000a72:	000f      	movs	r7, r1
 8000a74:	1aed      	subs	r5, r5, r3
 8000a76:	40af      	lsls	r7, r5
 8000a78:	46b9      	mov	r9, r7
 8000a7a:	0007      	movs	r7, r0
 8000a7c:	46aa      	mov	sl, r5
 8000a7e:	40df      	lsrs	r7, r3
 8000a80:	464d      	mov	r5, r9
 8000a82:	433d      	orrs	r5, r7
 8000a84:	002f      	movs	r7, r5
 8000a86:	4655      	mov	r5, sl
 8000a88:	40a8      	lsls	r0, r5
 8000a8a:	40d9      	lsrs	r1, r3
 8000a8c:	1e45      	subs	r5, r0, #1
 8000a8e:	41a8      	sbcs	r0, r5
 8000a90:	4488      	add	r8, r1
 8000a92:	4307      	orrs	r7, r0
 8000a94:	18bf      	adds	r7, r7, r2
 8000a96:	4297      	cmp	r7, r2
 8000a98:	4192      	sbcs	r2, r2
 8000a9a:	4251      	negs	r1, r2
 8000a9c:	4441      	add	r1, r8
 8000a9e:	0035      	movs	r5, r6
 8000aa0:	e63a      	b.n	8000718 <__aeabi_dadd+0x164>
 8000aa2:	4664      	mov	r4, ip
 8000aa4:	0035      	movs	r5, r6
 8000aa6:	4641      	mov	r1, r8
 8000aa8:	0010      	movs	r0, r2
 8000aaa:	e685      	b.n	80007b8 <__aeabi_dadd+0x204>
 8000aac:	000b      	movs	r3, r1
 8000aae:	4303      	orrs	r3, r0
 8000ab0:	2d00      	cmp	r5, #0
 8000ab2:	d000      	beq.n	8000ab6 <__aeabi_dadd+0x502>
 8000ab4:	e663      	b.n	800077e <__aeabi_dadd+0x1ca>
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d0f5      	beq.n	8000aa6 <__aeabi_dadd+0x4f2>
 8000aba:	4643      	mov	r3, r8
 8000abc:	4313      	orrs	r3, r2
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_dadd+0x50e>
 8000ac0:	e67a      	b.n	80007b8 <__aeabi_dadd+0x204>
 8000ac2:	1887      	adds	r7, r0, r2
 8000ac4:	4287      	cmp	r7, r0
 8000ac6:	4180      	sbcs	r0, r0
 8000ac8:	2207      	movs	r2, #7
 8000aca:	4441      	add	r1, r8
 8000acc:	4240      	negs	r0, r0
 8000ace:	1809      	adds	r1, r1, r0
 8000ad0:	403a      	ands	r2, r7
 8000ad2:	020b      	lsls	r3, r1, #8
 8000ad4:	d400      	bmi.n	8000ad8 <__aeabi_dadd+0x524>
 8000ad6:	e6d5      	b.n	8000884 <__aeabi_dadd+0x2d0>
 8000ad8:	4b43      	ldr	r3, [pc, #268]	; (8000be8 <__aeabi_dadd+0x634>)
 8000ada:	3501      	adds	r5, #1
 8000adc:	4019      	ands	r1, r3
 8000ade:	e5c9      	b.n	8000674 <__aeabi_dadd+0xc0>
 8000ae0:	0038      	movs	r0, r7
 8000ae2:	e669      	b.n	80007b8 <__aeabi_dadd+0x204>
 8000ae4:	001e      	movs	r6, r3
 8000ae6:	4647      	mov	r7, r8
 8000ae8:	3e20      	subs	r6, #32
 8000aea:	40f7      	lsrs	r7, r6
 8000aec:	46bc      	mov	ip, r7
 8000aee:	2b20      	cmp	r3, #32
 8000af0:	d004      	beq.n	8000afc <__aeabi_dadd+0x548>
 8000af2:	2640      	movs	r6, #64	; 0x40
 8000af4:	1af3      	subs	r3, r6, r3
 8000af6:	4646      	mov	r6, r8
 8000af8:	409e      	lsls	r6, r3
 8000afa:	4332      	orrs	r2, r6
 8000afc:	0017      	movs	r7, r2
 8000afe:	4663      	mov	r3, ip
 8000b00:	1e7a      	subs	r2, r7, #1
 8000b02:	4197      	sbcs	r7, r2
 8000b04:	431f      	orrs	r7, r3
 8000b06:	e602      	b.n	800070e <__aeabi_dadd+0x15a>
 8000b08:	4d36      	ldr	r5, [pc, #216]	; (8000be4 <__aeabi_dadd+0x630>)
 8000b0a:	42ae      	cmp	r6, r5
 8000b0c:	d0ca      	beq.n	8000aa4 <__aeabi_dadd+0x4f0>
 8000b0e:	2580      	movs	r5, #128	; 0x80
 8000b10:	042d      	lsls	r5, r5, #16
 8000b12:	425b      	negs	r3, r3
 8000b14:	4329      	orrs	r1, r5
 8000b16:	e7a6      	b.n	8000a66 <__aeabi_dadd+0x4b2>
 8000b18:	4308      	orrs	r0, r1
 8000b1a:	1e41      	subs	r1, r0, #1
 8000b1c:	4188      	sbcs	r0, r1
 8000b1e:	e6a6      	b.n	800086e <__aeabi_dadd+0x2ba>
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d100      	bne.n	8000b26 <__aeabi_dadd+0x572>
 8000b24:	e648      	b.n	80007b8 <__aeabi_dadd+0x204>
 8000b26:	1a87      	subs	r7, r0, r2
 8000b28:	4643      	mov	r3, r8
 8000b2a:	42b8      	cmp	r0, r7
 8000b2c:	41b6      	sbcs	r6, r6
 8000b2e:	1acb      	subs	r3, r1, r3
 8000b30:	4276      	negs	r6, r6
 8000b32:	1b9e      	subs	r6, r3, r6
 8000b34:	0233      	lsls	r3, r6, #8
 8000b36:	d54b      	bpl.n	8000bd0 <__aeabi_dadd+0x61c>
 8000b38:	1a17      	subs	r7, r2, r0
 8000b3a:	4643      	mov	r3, r8
 8000b3c:	42ba      	cmp	r2, r7
 8000b3e:	4192      	sbcs	r2, r2
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	4252      	negs	r2, r2
 8000b44:	1a89      	subs	r1, r1, r2
 8000b46:	2207      	movs	r2, #7
 8000b48:	4664      	mov	r4, ip
 8000b4a:	403a      	ands	r2, r7
 8000b4c:	e592      	b.n	8000674 <__aeabi_dadd+0xc0>
 8000b4e:	4301      	orrs	r1, r0
 8000b50:	000f      	movs	r7, r1
 8000b52:	1e79      	subs	r1, r7, #1
 8000b54:	418f      	sbcs	r7, r1
 8000b56:	e79d      	b.n	8000a94 <__aeabi_dadd+0x4e0>
 8000b58:	001c      	movs	r4, r3
 8000b5a:	000f      	movs	r7, r1
 8000b5c:	3c20      	subs	r4, #32
 8000b5e:	40e7      	lsrs	r7, r4
 8000b60:	2b20      	cmp	r3, #32
 8000b62:	d003      	beq.n	8000b6c <__aeabi_dadd+0x5b8>
 8000b64:	2440      	movs	r4, #64	; 0x40
 8000b66:	1ae3      	subs	r3, r4, r3
 8000b68:	4099      	lsls	r1, r3
 8000b6a:	4308      	orrs	r0, r1
 8000b6c:	1e41      	subs	r1, r0, #1
 8000b6e:	4188      	sbcs	r0, r1
 8000b70:	4338      	orrs	r0, r7
 8000b72:	e67c      	b.n	800086e <__aeabi_dadd+0x2ba>
 8000b74:	2200      	movs	r2, #0
 8000b76:	2400      	movs	r4, #0
 8000b78:	e625      	b.n	80007c6 <__aeabi_dadd+0x212>
 8000b7a:	1a17      	subs	r7, r2, r0
 8000b7c:	4643      	mov	r3, r8
 8000b7e:	42ba      	cmp	r2, r7
 8000b80:	4192      	sbcs	r2, r2
 8000b82:	1a59      	subs	r1, r3, r1
 8000b84:	4252      	negs	r2, r2
 8000b86:	1a89      	subs	r1, r1, r2
 8000b88:	4664      	mov	r4, ip
 8000b8a:	0035      	movs	r5, r6
 8000b8c:	e543      	b.n	8000616 <__aeabi_dadd+0x62>
 8000b8e:	4641      	mov	r1, r8
 8000b90:	0010      	movs	r0, r2
 8000b92:	4d14      	ldr	r5, [pc, #80]	; (8000be4 <__aeabi_dadd+0x630>)
 8000b94:	e610      	b.n	80007b8 <__aeabi_dadd+0x204>
 8000b96:	2280      	movs	r2, #128	; 0x80
 8000b98:	2400      	movs	r4, #0
 8000b9a:	0312      	lsls	r2, r2, #12
 8000b9c:	e680      	b.n	80008a0 <__aeabi_dadd+0x2ec>
 8000b9e:	001d      	movs	r5, r3
 8000ba0:	000f      	movs	r7, r1
 8000ba2:	3d20      	subs	r5, #32
 8000ba4:	40ef      	lsrs	r7, r5
 8000ba6:	46bc      	mov	ip, r7
 8000ba8:	2b20      	cmp	r3, #32
 8000baa:	d003      	beq.n	8000bb4 <__aeabi_dadd+0x600>
 8000bac:	2540      	movs	r5, #64	; 0x40
 8000bae:	1aeb      	subs	r3, r5, r3
 8000bb0:	4099      	lsls	r1, r3
 8000bb2:	4308      	orrs	r0, r1
 8000bb4:	0007      	movs	r7, r0
 8000bb6:	4663      	mov	r3, ip
 8000bb8:	1e78      	subs	r0, r7, #1
 8000bba:	4187      	sbcs	r7, r0
 8000bbc:	431f      	orrs	r7, r3
 8000bbe:	e769      	b.n	8000a94 <__aeabi_dadd+0x4e0>
 8000bc0:	1887      	adds	r7, r0, r2
 8000bc2:	4297      	cmp	r7, r2
 8000bc4:	419b      	sbcs	r3, r3
 8000bc6:	4441      	add	r1, r8
 8000bc8:	425b      	negs	r3, r3
 8000bca:	18c9      	adds	r1, r1, r3
 8000bcc:	0035      	movs	r5, r6
 8000bce:	e5a3      	b.n	8000718 <__aeabi_dadd+0x164>
 8000bd0:	003b      	movs	r3, r7
 8000bd2:	4333      	orrs	r3, r6
 8000bd4:	d0ce      	beq.n	8000b74 <__aeabi_dadd+0x5c0>
 8000bd6:	2207      	movs	r2, #7
 8000bd8:	0031      	movs	r1, r6
 8000bda:	403a      	ands	r2, r7
 8000bdc:	e652      	b.n	8000884 <__aeabi_dadd+0x2d0>
 8000bde:	2300      	movs	r3, #0
 8000be0:	001a      	movs	r2, r3
 8000be2:	e5f4      	b.n	80007ce <__aeabi_dadd+0x21a>
 8000be4:	000007ff 	.word	0x000007ff
 8000be8:	ff7fffff 	.word	0xff7fffff

08000bec <__aeabi_ddiv>:
 8000bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bee:	4657      	mov	r7, sl
 8000bf0:	46de      	mov	lr, fp
 8000bf2:	464e      	mov	r6, r9
 8000bf4:	4645      	mov	r5, r8
 8000bf6:	b5e0      	push	{r5, r6, r7, lr}
 8000bf8:	4683      	mov	fp, r0
 8000bfa:	0007      	movs	r7, r0
 8000bfc:	030e      	lsls	r6, r1, #12
 8000bfe:	0048      	lsls	r0, r1, #1
 8000c00:	b085      	sub	sp, #20
 8000c02:	4692      	mov	sl, r2
 8000c04:	001c      	movs	r4, r3
 8000c06:	0b36      	lsrs	r6, r6, #12
 8000c08:	0d40      	lsrs	r0, r0, #21
 8000c0a:	0fcd      	lsrs	r5, r1, #31
 8000c0c:	2800      	cmp	r0, #0
 8000c0e:	d100      	bne.n	8000c12 <__aeabi_ddiv+0x26>
 8000c10:	e09d      	b.n	8000d4e <__aeabi_ddiv+0x162>
 8000c12:	4b95      	ldr	r3, [pc, #596]	; (8000e68 <__aeabi_ddiv+0x27c>)
 8000c14:	4298      	cmp	r0, r3
 8000c16:	d039      	beq.n	8000c8c <__aeabi_ddiv+0xa0>
 8000c18:	2380      	movs	r3, #128	; 0x80
 8000c1a:	00f6      	lsls	r6, r6, #3
 8000c1c:	041b      	lsls	r3, r3, #16
 8000c1e:	431e      	orrs	r6, r3
 8000c20:	4a92      	ldr	r2, [pc, #584]	; (8000e6c <__aeabi_ddiv+0x280>)
 8000c22:	0f7b      	lsrs	r3, r7, #29
 8000c24:	4333      	orrs	r3, r6
 8000c26:	4699      	mov	r9, r3
 8000c28:	4694      	mov	ip, r2
 8000c2a:	0003      	movs	r3, r0
 8000c2c:	4463      	add	r3, ip
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	2300      	movs	r3, #0
 8000c32:	2600      	movs	r6, #0
 8000c34:	00ff      	lsls	r7, r7, #3
 8000c36:	9302      	str	r3, [sp, #8]
 8000c38:	0323      	lsls	r3, r4, #12
 8000c3a:	0b1b      	lsrs	r3, r3, #12
 8000c3c:	4698      	mov	r8, r3
 8000c3e:	0063      	lsls	r3, r4, #1
 8000c40:	0fe4      	lsrs	r4, r4, #31
 8000c42:	4652      	mov	r2, sl
 8000c44:	0d5b      	lsrs	r3, r3, #21
 8000c46:	9401      	str	r4, [sp, #4]
 8000c48:	d100      	bne.n	8000c4c <__aeabi_ddiv+0x60>
 8000c4a:	e0b3      	b.n	8000db4 <__aeabi_ddiv+0x1c8>
 8000c4c:	4986      	ldr	r1, [pc, #536]	; (8000e68 <__aeabi_ddiv+0x27c>)
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d100      	bne.n	8000c54 <__aeabi_ddiv+0x68>
 8000c52:	e09e      	b.n	8000d92 <__aeabi_ddiv+0x1a6>
 8000c54:	4642      	mov	r2, r8
 8000c56:	00d1      	lsls	r1, r2, #3
 8000c58:	2280      	movs	r2, #128	; 0x80
 8000c5a:	0412      	lsls	r2, r2, #16
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	4651      	mov	r1, sl
 8000c60:	0f49      	lsrs	r1, r1, #29
 8000c62:	4311      	orrs	r1, r2
 8000c64:	468b      	mov	fp, r1
 8000c66:	4981      	ldr	r1, [pc, #516]	; (8000e6c <__aeabi_ddiv+0x280>)
 8000c68:	4652      	mov	r2, sl
 8000c6a:	468c      	mov	ip, r1
 8000c6c:	9900      	ldr	r1, [sp, #0]
 8000c6e:	4463      	add	r3, ip
 8000c70:	1acb      	subs	r3, r1, r3
 8000c72:	2100      	movs	r1, #0
 8000c74:	00d2      	lsls	r2, r2, #3
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	002b      	movs	r3, r5
 8000c7a:	4063      	eors	r3, r4
 8000c7c:	469a      	mov	sl, r3
 8000c7e:	2e0f      	cmp	r6, #15
 8000c80:	d900      	bls.n	8000c84 <__aeabi_ddiv+0x98>
 8000c82:	e105      	b.n	8000e90 <__aeabi_ddiv+0x2a4>
 8000c84:	4b7a      	ldr	r3, [pc, #488]	; (8000e70 <__aeabi_ddiv+0x284>)
 8000c86:	00b6      	lsls	r6, r6, #2
 8000c88:	599b      	ldr	r3, [r3, r6]
 8000c8a:	469f      	mov	pc, r3
 8000c8c:	465b      	mov	r3, fp
 8000c8e:	4333      	orrs	r3, r6
 8000c90:	4699      	mov	r9, r3
 8000c92:	d000      	beq.n	8000c96 <__aeabi_ddiv+0xaa>
 8000c94:	e0b8      	b.n	8000e08 <__aeabi_ddiv+0x21c>
 8000c96:	2302      	movs	r3, #2
 8000c98:	2608      	movs	r6, #8
 8000c9a:	2700      	movs	r7, #0
 8000c9c:	9000      	str	r0, [sp, #0]
 8000c9e:	9302      	str	r3, [sp, #8]
 8000ca0:	e7ca      	b.n	8000c38 <__aeabi_ddiv+0x4c>
 8000ca2:	46cb      	mov	fp, r9
 8000ca4:	003a      	movs	r2, r7
 8000ca6:	9902      	ldr	r1, [sp, #8]
 8000ca8:	9501      	str	r5, [sp, #4]
 8000caa:	9b01      	ldr	r3, [sp, #4]
 8000cac:	469a      	mov	sl, r3
 8000cae:	2902      	cmp	r1, #2
 8000cb0:	d027      	beq.n	8000d02 <__aeabi_ddiv+0x116>
 8000cb2:	2903      	cmp	r1, #3
 8000cb4:	d100      	bne.n	8000cb8 <__aeabi_ddiv+0xcc>
 8000cb6:	e280      	b.n	80011ba <__aeabi_ddiv+0x5ce>
 8000cb8:	2901      	cmp	r1, #1
 8000cba:	d044      	beq.n	8000d46 <__aeabi_ddiv+0x15a>
 8000cbc:	496d      	ldr	r1, [pc, #436]	; (8000e74 <__aeabi_ddiv+0x288>)
 8000cbe:	9b00      	ldr	r3, [sp, #0]
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	4463      	add	r3, ip
 8000cc4:	001c      	movs	r4, r3
 8000cc6:	2c00      	cmp	r4, #0
 8000cc8:	dd38      	ble.n	8000d3c <__aeabi_ddiv+0x150>
 8000cca:	0753      	lsls	r3, r2, #29
 8000ccc:	d000      	beq.n	8000cd0 <__aeabi_ddiv+0xe4>
 8000cce:	e213      	b.n	80010f8 <__aeabi_ddiv+0x50c>
 8000cd0:	08d2      	lsrs	r2, r2, #3
 8000cd2:	465b      	mov	r3, fp
 8000cd4:	01db      	lsls	r3, r3, #7
 8000cd6:	d509      	bpl.n	8000cec <__aeabi_ddiv+0x100>
 8000cd8:	4659      	mov	r1, fp
 8000cda:	4b67      	ldr	r3, [pc, #412]	; (8000e78 <__aeabi_ddiv+0x28c>)
 8000cdc:	4019      	ands	r1, r3
 8000cde:	468b      	mov	fp, r1
 8000ce0:	2180      	movs	r1, #128	; 0x80
 8000ce2:	00c9      	lsls	r1, r1, #3
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	9b00      	ldr	r3, [sp, #0]
 8000ce8:	4463      	add	r3, ip
 8000cea:	001c      	movs	r4, r3
 8000cec:	4b63      	ldr	r3, [pc, #396]	; (8000e7c <__aeabi_ddiv+0x290>)
 8000cee:	429c      	cmp	r4, r3
 8000cf0:	dc07      	bgt.n	8000d02 <__aeabi_ddiv+0x116>
 8000cf2:	465b      	mov	r3, fp
 8000cf4:	0564      	lsls	r4, r4, #21
 8000cf6:	075f      	lsls	r7, r3, #29
 8000cf8:	025b      	lsls	r3, r3, #9
 8000cfa:	4317      	orrs	r7, r2
 8000cfc:	0b1b      	lsrs	r3, r3, #12
 8000cfe:	0d62      	lsrs	r2, r4, #21
 8000d00:	e002      	b.n	8000d08 <__aeabi_ddiv+0x11c>
 8000d02:	2300      	movs	r3, #0
 8000d04:	2700      	movs	r7, #0
 8000d06:	4a58      	ldr	r2, [pc, #352]	; (8000e68 <__aeabi_ddiv+0x27c>)
 8000d08:	2100      	movs	r1, #0
 8000d0a:	031b      	lsls	r3, r3, #12
 8000d0c:	0b1c      	lsrs	r4, r3, #12
 8000d0e:	0d0b      	lsrs	r3, r1, #20
 8000d10:	051b      	lsls	r3, r3, #20
 8000d12:	4323      	orrs	r3, r4
 8000d14:	0514      	lsls	r4, r2, #20
 8000d16:	4a5a      	ldr	r2, [pc, #360]	; (8000e80 <__aeabi_ddiv+0x294>)
 8000d18:	0038      	movs	r0, r7
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	431c      	orrs	r4, r3
 8000d1e:	4653      	mov	r3, sl
 8000d20:	0064      	lsls	r4, r4, #1
 8000d22:	07db      	lsls	r3, r3, #31
 8000d24:	0864      	lsrs	r4, r4, #1
 8000d26:	431c      	orrs	r4, r3
 8000d28:	0021      	movs	r1, r4
 8000d2a:	b005      	add	sp, #20
 8000d2c:	bc3c      	pop	{r2, r3, r4, r5}
 8000d2e:	4690      	mov	r8, r2
 8000d30:	4699      	mov	r9, r3
 8000d32:	46a2      	mov	sl, r4
 8000d34:	46ab      	mov	fp, r5
 8000d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4252      	negs	r2, r2
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	1b1b      	subs	r3, r3, r4
 8000d40:	2b38      	cmp	r3, #56	; 0x38
 8000d42:	dc00      	bgt.n	8000d46 <__aeabi_ddiv+0x15a>
 8000d44:	e1ad      	b.n	80010a2 <__aeabi_ddiv+0x4b6>
 8000d46:	2200      	movs	r2, #0
 8000d48:	2300      	movs	r3, #0
 8000d4a:	2700      	movs	r7, #0
 8000d4c:	e7dc      	b.n	8000d08 <__aeabi_ddiv+0x11c>
 8000d4e:	465b      	mov	r3, fp
 8000d50:	4333      	orrs	r3, r6
 8000d52:	4699      	mov	r9, r3
 8000d54:	d05e      	beq.n	8000e14 <__aeabi_ddiv+0x228>
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d100      	bne.n	8000d5c <__aeabi_ddiv+0x170>
 8000d5a:	e18a      	b.n	8001072 <__aeabi_ddiv+0x486>
 8000d5c:	0030      	movs	r0, r6
 8000d5e:	f001 f869 	bl	8001e34 <__clzsi2>
 8000d62:	0003      	movs	r3, r0
 8000d64:	3b0b      	subs	r3, #11
 8000d66:	2b1c      	cmp	r3, #28
 8000d68:	dd00      	ble.n	8000d6c <__aeabi_ddiv+0x180>
 8000d6a:	e17b      	b.n	8001064 <__aeabi_ddiv+0x478>
 8000d6c:	221d      	movs	r2, #29
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	465a      	mov	r2, fp
 8000d72:	0001      	movs	r1, r0
 8000d74:	40da      	lsrs	r2, r3
 8000d76:	3908      	subs	r1, #8
 8000d78:	408e      	lsls	r6, r1
 8000d7a:	0013      	movs	r3, r2
 8000d7c:	465f      	mov	r7, fp
 8000d7e:	4333      	orrs	r3, r6
 8000d80:	4699      	mov	r9, r3
 8000d82:	408f      	lsls	r7, r1
 8000d84:	4b3f      	ldr	r3, [pc, #252]	; (8000e84 <__aeabi_ddiv+0x298>)
 8000d86:	2600      	movs	r6, #0
 8000d88:	1a1b      	subs	r3, r3, r0
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	9302      	str	r3, [sp, #8]
 8000d90:	e752      	b.n	8000c38 <__aeabi_ddiv+0x4c>
 8000d92:	4641      	mov	r1, r8
 8000d94:	4653      	mov	r3, sl
 8000d96:	430b      	orrs	r3, r1
 8000d98:	493b      	ldr	r1, [pc, #236]	; (8000e88 <__aeabi_ddiv+0x29c>)
 8000d9a:	469b      	mov	fp, r3
 8000d9c:	468c      	mov	ip, r1
 8000d9e:	9b00      	ldr	r3, [sp, #0]
 8000da0:	4463      	add	r3, ip
 8000da2:	9300      	str	r3, [sp, #0]
 8000da4:	465b      	mov	r3, fp
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d13b      	bne.n	8000e22 <__aeabi_ddiv+0x236>
 8000daa:	2302      	movs	r3, #2
 8000dac:	2200      	movs	r2, #0
 8000dae:	431e      	orrs	r6, r3
 8000db0:	2102      	movs	r1, #2
 8000db2:	e761      	b.n	8000c78 <__aeabi_ddiv+0x8c>
 8000db4:	4643      	mov	r3, r8
 8000db6:	4313      	orrs	r3, r2
 8000db8:	469b      	mov	fp, r3
 8000dba:	d037      	beq.n	8000e2c <__aeabi_ddiv+0x240>
 8000dbc:	4643      	mov	r3, r8
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d100      	bne.n	8000dc4 <__aeabi_ddiv+0x1d8>
 8000dc2:	e162      	b.n	800108a <__aeabi_ddiv+0x49e>
 8000dc4:	4640      	mov	r0, r8
 8000dc6:	f001 f835 	bl	8001e34 <__clzsi2>
 8000dca:	0003      	movs	r3, r0
 8000dcc:	3b0b      	subs	r3, #11
 8000dce:	2b1c      	cmp	r3, #28
 8000dd0:	dd00      	ble.n	8000dd4 <__aeabi_ddiv+0x1e8>
 8000dd2:	e153      	b.n	800107c <__aeabi_ddiv+0x490>
 8000dd4:	0002      	movs	r2, r0
 8000dd6:	4641      	mov	r1, r8
 8000dd8:	3a08      	subs	r2, #8
 8000dda:	4091      	lsls	r1, r2
 8000ddc:	4688      	mov	r8, r1
 8000dde:	211d      	movs	r1, #29
 8000de0:	1acb      	subs	r3, r1, r3
 8000de2:	4651      	mov	r1, sl
 8000de4:	40d9      	lsrs	r1, r3
 8000de6:	000b      	movs	r3, r1
 8000de8:	4641      	mov	r1, r8
 8000dea:	430b      	orrs	r3, r1
 8000dec:	469b      	mov	fp, r3
 8000dee:	4653      	mov	r3, sl
 8000df0:	4093      	lsls	r3, r2
 8000df2:	001a      	movs	r2, r3
 8000df4:	9b00      	ldr	r3, [sp, #0]
 8000df6:	4925      	ldr	r1, [pc, #148]	; (8000e8c <__aeabi_ddiv+0x2a0>)
 8000df8:	469c      	mov	ip, r3
 8000dfa:	4460      	add	r0, ip
 8000dfc:	0003      	movs	r3, r0
 8000dfe:	468c      	mov	ip, r1
 8000e00:	4463      	add	r3, ip
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2100      	movs	r1, #0
 8000e06:	e737      	b.n	8000c78 <__aeabi_ddiv+0x8c>
 8000e08:	2303      	movs	r3, #3
 8000e0a:	46b1      	mov	r9, r6
 8000e0c:	9000      	str	r0, [sp, #0]
 8000e0e:	260c      	movs	r6, #12
 8000e10:	9302      	str	r3, [sp, #8]
 8000e12:	e711      	b.n	8000c38 <__aeabi_ddiv+0x4c>
 8000e14:	2300      	movs	r3, #0
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	2604      	movs	r6, #4
 8000e1c:	2700      	movs	r7, #0
 8000e1e:	9302      	str	r3, [sp, #8]
 8000e20:	e70a      	b.n	8000c38 <__aeabi_ddiv+0x4c>
 8000e22:	2303      	movs	r3, #3
 8000e24:	46c3      	mov	fp, r8
 8000e26:	431e      	orrs	r6, r3
 8000e28:	2103      	movs	r1, #3
 8000e2a:	e725      	b.n	8000c78 <__aeabi_ddiv+0x8c>
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	431e      	orrs	r6, r3
 8000e30:	2200      	movs	r2, #0
 8000e32:	2101      	movs	r1, #1
 8000e34:	e720      	b.n	8000c78 <__aeabi_ddiv+0x8c>
 8000e36:	2300      	movs	r3, #0
 8000e38:	469a      	mov	sl, r3
 8000e3a:	2380      	movs	r3, #128	; 0x80
 8000e3c:	2700      	movs	r7, #0
 8000e3e:	031b      	lsls	r3, r3, #12
 8000e40:	4a09      	ldr	r2, [pc, #36]	; (8000e68 <__aeabi_ddiv+0x27c>)
 8000e42:	e761      	b.n	8000d08 <__aeabi_ddiv+0x11c>
 8000e44:	2380      	movs	r3, #128	; 0x80
 8000e46:	4649      	mov	r1, r9
 8000e48:	031b      	lsls	r3, r3, #12
 8000e4a:	4219      	tst	r1, r3
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_ddiv+0x264>
 8000e4e:	e0e2      	b.n	8001016 <__aeabi_ddiv+0x42a>
 8000e50:	4659      	mov	r1, fp
 8000e52:	4219      	tst	r1, r3
 8000e54:	d000      	beq.n	8000e58 <__aeabi_ddiv+0x26c>
 8000e56:	e0de      	b.n	8001016 <__aeabi_ddiv+0x42a>
 8000e58:	430b      	orrs	r3, r1
 8000e5a:	031b      	lsls	r3, r3, #12
 8000e5c:	0017      	movs	r7, r2
 8000e5e:	0b1b      	lsrs	r3, r3, #12
 8000e60:	46a2      	mov	sl, r4
 8000e62:	4a01      	ldr	r2, [pc, #4]	; (8000e68 <__aeabi_ddiv+0x27c>)
 8000e64:	e750      	b.n	8000d08 <__aeabi_ddiv+0x11c>
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	000007ff 	.word	0x000007ff
 8000e6c:	fffffc01 	.word	0xfffffc01
 8000e70:	080062a4 	.word	0x080062a4
 8000e74:	000003ff 	.word	0x000003ff
 8000e78:	feffffff 	.word	0xfeffffff
 8000e7c:	000007fe 	.word	0x000007fe
 8000e80:	800fffff 	.word	0x800fffff
 8000e84:	fffffc0d 	.word	0xfffffc0d
 8000e88:	fffff801 	.word	0xfffff801
 8000e8c:	000003f3 	.word	0x000003f3
 8000e90:	45d9      	cmp	r9, fp
 8000e92:	d900      	bls.n	8000e96 <__aeabi_ddiv+0x2aa>
 8000e94:	e0cb      	b.n	800102e <__aeabi_ddiv+0x442>
 8000e96:	d100      	bne.n	8000e9a <__aeabi_ddiv+0x2ae>
 8000e98:	e0c6      	b.n	8001028 <__aeabi_ddiv+0x43c>
 8000e9a:	003c      	movs	r4, r7
 8000e9c:	4648      	mov	r0, r9
 8000e9e:	2700      	movs	r7, #0
 8000ea0:	9b00      	ldr	r3, [sp, #0]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	465b      	mov	r3, fp
 8000ea8:	0e16      	lsrs	r6, r2, #24
 8000eaa:	021b      	lsls	r3, r3, #8
 8000eac:	431e      	orrs	r6, r3
 8000eae:	0213      	lsls	r3, r2, #8
 8000eb0:	4698      	mov	r8, r3
 8000eb2:	0433      	lsls	r3, r6, #16
 8000eb4:	0c1b      	lsrs	r3, r3, #16
 8000eb6:	4699      	mov	r9, r3
 8000eb8:	0c31      	lsrs	r1, r6, #16
 8000eba:	9101      	str	r1, [sp, #4]
 8000ebc:	f7ff f9a8 	bl	8000210 <__aeabi_uidivmod>
 8000ec0:	464a      	mov	r2, r9
 8000ec2:	4342      	muls	r2, r0
 8000ec4:	040b      	lsls	r3, r1, #16
 8000ec6:	0c21      	lsrs	r1, r4, #16
 8000ec8:	0005      	movs	r5, r0
 8000eca:	4319      	orrs	r1, r3
 8000ecc:	428a      	cmp	r2, r1
 8000ece:	d907      	bls.n	8000ee0 <__aeabi_ddiv+0x2f4>
 8000ed0:	1989      	adds	r1, r1, r6
 8000ed2:	3d01      	subs	r5, #1
 8000ed4:	428e      	cmp	r6, r1
 8000ed6:	d803      	bhi.n	8000ee0 <__aeabi_ddiv+0x2f4>
 8000ed8:	428a      	cmp	r2, r1
 8000eda:	d901      	bls.n	8000ee0 <__aeabi_ddiv+0x2f4>
 8000edc:	1e85      	subs	r5, r0, #2
 8000ede:	1989      	adds	r1, r1, r6
 8000ee0:	1a88      	subs	r0, r1, r2
 8000ee2:	9901      	ldr	r1, [sp, #4]
 8000ee4:	f7ff f994 	bl	8000210 <__aeabi_uidivmod>
 8000ee8:	0409      	lsls	r1, r1, #16
 8000eea:	468c      	mov	ip, r1
 8000eec:	464a      	mov	r2, r9
 8000eee:	0421      	lsls	r1, r4, #16
 8000ef0:	4664      	mov	r4, ip
 8000ef2:	4342      	muls	r2, r0
 8000ef4:	0c09      	lsrs	r1, r1, #16
 8000ef6:	0003      	movs	r3, r0
 8000ef8:	4321      	orrs	r1, r4
 8000efa:	428a      	cmp	r2, r1
 8000efc:	d904      	bls.n	8000f08 <__aeabi_ddiv+0x31c>
 8000efe:	1989      	adds	r1, r1, r6
 8000f00:	3b01      	subs	r3, #1
 8000f02:	428e      	cmp	r6, r1
 8000f04:	d800      	bhi.n	8000f08 <__aeabi_ddiv+0x31c>
 8000f06:	e0f1      	b.n	80010ec <__aeabi_ddiv+0x500>
 8000f08:	042d      	lsls	r5, r5, #16
 8000f0a:	431d      	orrs	r5, r3
 8000f0c:	46ab      	mov	fp, r5
 8000f0e:	4643      	mov	r3, r8
 8000f10:	1a89      	subs	r1, r1, r2
 8000f12:	4642      	mov	r2, r8
 8000f14:	0c28      	lsrs	r0, r5, #16
 8000f16:	0412      	lsls	r2, r2, #16
 8000f18:	0c1d      	lsrs	r5, r3, #16
 8000f1a:	465b      	mov	r3, fp
 8000f1c:	0c14      	lsrs	r4, r2, #16
 8000f1e:	0022      	movs	r2, r4
 8000f20:	041b      	lsls	r3, r3, #16
 8000f22:	0c1b      	lsrs	r3, r3, #16
 8000f24:	435a      	muls	r2, r3
 8000f26:	9403      	str	r4, [sp, #12]
 8000f28:	436b      	muls	r3, r5
 8000f2a:	4344      	muls	r4, r0
 8000f2c:	9502      	str	r5, [sp, #8]
 8000f2e:	4368      	muls	r0, r5
 8000f30:	191b      	adds	r3, r3, r4
 8000f32:	0c15      	lsrs	r5, r2, #16
 8000f34:	18eb      	adds	r3, r5, r3
 8000f36:	429c      	cmp	r4, r3
 8000f38:	d903      	bls.n	8000f42 <__aeabi_ddiv+0x356>
 8000f3a:	2480      	movs	r4, #128	; 0x80
 8000f3c:	0264      	lsls	r4, r4, #9
 8000f3e:	46a4      	mov	ip, r4
 8000f40:	4460      	add	r0, ip
 8000f42:	0c1c      	lsrs	r4, r3, #16
 8000f44:	0415      	lsls	r5, r2, #16
 8000f46:	041b      	lsls	r3, r3, #16
 8000f48:	0c2d      	lsrs	r5, r5, #16
 8000f4a:	1820      	adds	r0, r4, r0
 8000f4c:	195d      	adds	r5, r3, r5
 8000f4e:	4281      	cmp	r1, r0
 8000f50:	d377      	bcc.n	8001042 <__aeabi_ddiv+0x456>
 8000f52:	d073      	beq.n	800103c <__aeabi_ddiv+0x450>
 8000f54:	1a0c      	subs	r4, r1, r0
 8000f56:	4aa2      	ldr	r2, [pc, #648]	; (80011e0 <__aeabi_ddiv+0x5f4>)
 8000f58:	1b7d      	subs	r5, r7, r5
 8000f5a:	42af      	cmp	r7, r5
 8000f5c:	41bf      	sbcs	r7, r7
 8000f5e:	4694      	mov	ip, r2
 8000f60:	9b00      	ldr	r3, [sp, #0]
 8000f62:	427f      	negs	r7, r7
 8000f64:	4463      	add	r3, ip
 8000f66:	1be0      	subs	r0, r4, r7
 8000f68:	001c      	movs	r4, r3
 8000f6a:	4286      	cmp	r6, r0
 8000f6c:	d100      	bne.n	8000f70 <__aeabi_ddiv+0x384>
 8000f6e:	e0db      	b.n	8001128 <__aeabi_ddiv+0x53c>
 8000f70:	9901      	ldr	r1, [sp, #4]
 8000f72:	f7ff f94d 	bl	8000210 <__aeabi_uidivmod>
 8000f76:	464a      	mov	r2, r9
 8000f78:	4342      	muls	r2, r0
 8000f7a:	040b      	lsls	r3, r1, #16
 8000f7c:	0c29      	lsrs	r1, r5, #16
 8000f7e:	0007      	movs	r7, r0
 8000f80:	4319      	orrs	r1, r3
 8000f82:	428a      	cmp	r2, r1
 8000f84:	d907      	bls.n	8000f96 <__aeabi_ddiv+0x3aa>
 8000f86:	1989      	adds	r1, r1, r6
 8000f88:	3f01      	subs	r7, #1
 8000f8a:	428e      	cmp	r6, r1
 8000f8c:	d803      	bhi.n	8000f96 <__aeabi_ddiv+0x3aa>
 8000f8e:	428a      	cmp	r2, r1
 8000f90:	d901      	bls.n	8000f96 <__aeabi_ddiv+0x3aa>
 8000f92:	1e87      	subs	r7, r0, #2
 8000f94:	1989      	adds	r1, r1, r6
 8000f96:	1a88      	subs	r0, r1, r2
 8000f98:	9901      	ldr	r1, [sp, #4]
 8000f9a:	f7ff f939 	bl	8000210 <__aeabi_uidivmod>
 8000f9e:	0409      	lsls	r1, r1, #16
 8000fa0:	464a      	mov	r2, r9
 8000fa2:	4689      	mov	r9, r1
 8000fa4:	0429      	lsls	r1, r5, #16
 8000fa6:	464d      	mov	r5, r9
 8000fa8:	4342      	muls	r2, r0
 8000faa:	0c09      	lsrs	r1, r1, #16
 8000fac:	0003      	movs	r3, r0
 8000fae:	4329      	orrs	r1, r5
 8000fb0:	428a      	cmp	r2, r1
 8000fb2:	d907      	bls.n	8000fc4 <__aeabi_ddiv+0x3d8>
 8000fb4:	1989      	adds	r1, r1, r6
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	428e      	cmp	r6, r1
 8000fba:	d803      	bhi.n	8000fc4 <__aeabi_ddiv+0x3d8>
 8000fbc:	428a      	cmp	r2, r1
 8000fbe:	d901      	bls.n	8000fc4 <__aeabi_ddiv+0x3d8>
 8000fc0:	1e83      	subs	r3, r0, #2
 8000fc2:	1989      	adds	r1, r1, r6
 8000fc4:	043f      	lsls	r7, r7, #16
 8000fc6:	1a89      	subs	r1, r1, r2
 8000fc8:	003a      	movs	r2, r7
 8000fca:	9f03      	ldr	r7, [sp, #12]
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	0038      	movs	r0, r7
 8000fd0:	0413      	lsls	r3, r2, #16
 8000fd2:	0c1b      	lsrs	r3, r3, #16
 8000fd4:	4358      	muls	r0, r3
 8000fd6:	4681      	mov	r9, r0
 8000fd8:	9802      	ldr	r0, [sp, #8]
 8000fda:	0c15      	lsrs	r5, r2, #16
 8000fdc:	436f      	muls	r7, r5
 8000fde:	4343      	muls	r3, r0
 8000fe0:	4345      	muls	r5, r0
 8000fe2:	4648      	mov	r0, r9
 8000fe4:	0c00      	lsrs	r0, r0, #16
 8000fe6:	4684      	mov	ip, r0
 8000fe8:	19db      	adds	r3, r3, r7
 8000fea:	4463      	add	r3, ip
 8000fec:	429f      	cmp	r7, r3
 8000fee:	d903      	bls.n	8000ff8 <__aeabi_ddiv+0x40c>
 8000ff0:	2080      	movs	r0, #128	; 0x80
 8000ff2:	0240      	lsls	r0, r0, #9
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4465      	add	r5, ip
 8000ff8:	4648      	mov	r0, r9
 8000ffa:	0c1f      	lsrs	r7, r3, #16
 8000ffc:	0400      	lsls	r0, r0, #16
 8000ffe:	041b      	lsls	r3, r3, #16
 8001000:	0c00      	lsrs	r0, r0, #16
 8001002:	197d      	adds	r5, r7, r5
 8001004:	1818      	adds	r0, r3, r0
 8001006:	42a9      	cmp	r1, r5
 8001008:	d200      	bcs.n	800100c <__aeabi_ddiv+0x420>
 800100a:	e084      	b.n	8001116 <__aeabi_ddiv+0x52a>
 800100c:	d100      	bne.n	8001010 <__aeabi_ddiv+0x424>
 800100e:	e07f      	b.n	8001110 <__aeabi_ddiv+0x524>
 8001010:	2301      	movs	r3, #1
 8001012:	431a      	orrs	r2, r3
 8001014:	e657      	b.n	8000cc6 <__aeabi_ddiv+0xda>
 8001016:	2380      	movs	r3, #128	; 0x80
 8001018:	464a      	mov	r2, r9
 800101a:	031b      	lsls	r3, r3, #12
 800101c:	4313      	orrs	r3, r2
 800101e:	031b      	lsls	r3, r3, #12
 8001020:	0b1b      	lsrs	r3, r3, #12
 8001022:	46aa      	mov	sl, r5
 8001024:	4a6f      	ldr	r2, [pc, #444]	; (80011e4 <__aeabi_ddiv+0x5f8>)
 8001026:	e66f      	b.n	8000d08 <__aeabi_ddiv+0x11c>
 8001028:	42ba      	cmp	r2, r7
 800102a:	d900      	bls.n	800102e <__aeabi_ddiv+0x442>
 800102c:	e735      	b.n	8000e9a <__aeabi_ddiv+0x2ae>
 800102e:	464b      	mov	r3, r9
 8001030:	07dc      	lsls	r4, r3, #31
 8001032:	0858      	lsrs	r0, r3, #1
 8001034:	087b      	lsrs	r3, r7, #1
 8001036:	431c      	orrs	r4, r3
 8001038:	07ff      	lsls	r7, r7, #31
 800103a:	e734      	b.n	8000ea6 <__aeabi_ddiv+0x2ba>
 800103c:	2400      	movs	r4, #0
 800103e:	42af      	cmp	r7, r5
 8001040:	d289      	bcs.n	8000f56 <__aeabi_ddiv+0x36a>
 8001042:	4447      	add	r7, r8
 8001044:	4547      	cmp	r7, r8
 8001046:	41a4      	sbcs	r4, r4
 8001048:	465b      	mov	r3, fp
 800104a:	4264      	negs	r4, r4
 800104c:	19a4      	adds	r4, r4, r6
 800104e:	1864      	adds	r4, r4, r1
 8001050:	3b01      	subs	r3, #1
 8001052:	42a6      	cmp	r6, r4
 8001054:	d21e      	bcs.n	8001094 <__aeabi_ddiv+0x4a8>
 8001056:	42a0      	cmp	r0, r4
 8001058:	d86d      	bhi.n	8001136 <__aeabi_ddiv+0x54a>
 800105a:	d100      	bne.n	800105e <__aeabi_ddiv+0x472>
 800105c:	e0b6      	b.n	80011cc <__aeabi_ddiv+0x5e0>
 800105e:	1a24      	subs	r4, r4, r0
 8001060:	469b      	mov	fp, r3
 8001062:	e778      	b.n	8000f56 <__aeabi_ddiv+0x36a>
 8001064:	0003      	movs	r3, r0
 8001066:	465a      	mov	r2, fp
 8001068:	3b28      	subs	r3, #40	; 0x28
 800106a:	409a      	lsls	r2, r3
 800106c:	2700      	movs	r7, #0
 800106e:	4691      	mov	r9, r2
 8001070:	e688      	b.n	8000d84 <__aeabi_ddiv+0x198>
 8001072:	4658      	mov	r0, fp
 8001074:	f000 fede 	bl	8001e34 <__clzsi2>
 8001078:	3020      	adds	r0, #32
 800107a:	e672      	b.n	8000d62 <__aeabi_ddiv+0x176>
 800107c:	0003      	movs	r3, r0
 800107e:	4652      	mov	r2, sl
 8001080:	3b28      	subs	r3, #40	; 0x28
 8001082:	409a      	lsls	r2, r3
 8001084:	4693      	mov	fp, r2
 8001086:	2200      	movs	r2, #0
 8001088:	e6b4      	b.n	8000df4 <__aeabi_ddiv+0x208>
 800108a:	4650      	mov	r0, sl
 800108c:	f000 fed2 	bl	8001e34 <__clzsi2>
 8001090:	3020      	adds	r0, #32
 8001092:	e69a      	b.n	8000dca <__aeabi_ddiv+0x1de>
 8001094:	42a6      	cmp	r6, r4
 8001096:	d1e2      	bne.n	800105e <__aeabi_ddiv+0x472>
 8001098:	45b8      	cmp	r8, r7
 800109a:	d9dc      	bls.n	8001056 <__aeabi_ddiv+0x46a>
 800109c:	1a34      	subs	r4, r6, r0
 800109e:	469b      	mov	fp, r3
 80010a0:	e759      	b.n	8000f56 <__aeabi_ddiv+0x36a>
 80010a2:	2b1f      	cmp	r3, #31
 80010a4:	dc65      	bgt.n	8001172 <__aeabi_ddiv+0x586>
 80010a6:	4c50      	ldr	r4, [pc, #320]	; (80011e8 <__aeabi_ddiv+0x5fc>)
 80010a8:	9900      	ldr	r1, [sp, #0]
 80010aa:	46a4      	mov	ip, r4
 80010ac:	465c      	mov	r4, fp
 80010ae:	4461      	add	r1, ip
 80010b0:	0008      	movs	r0, r1
 80010b2:	408c      	lsls	r4, r1
 80010b4:	0011      	movs	r1, r2
 80010b6:	4082      	lsls	r2, r0
 80010b8:	40d9      	lsrs	r1, r3
 80010ba:	1e50      	subs	r0, r2, #1
 80010bc:	4182      	sbcs	r2, r0
 80010be:	430c      	orrs	r4, r1
 80010c0:	4314      	orrs	r4, r2
 80010c2:	465a      	mov	r2, fp
 80010c4:	40da      	lsrs	r2, r3
 80010c6:	0013      	movs	r3, r2
 80010c8:	0762      	lsls	r2, r4, #29
 80010ca:	d009      	beq.n	80010e0 <__aeabi_ddiv+0x4f4>
 80010cc:	220f      	movs	r2, #15
 80010ce:	4022      	ands	r2, r4
 80010d0:	2a04      	cmp	r2, #4
 80010d2:	d005      	beq.n	80010e0 <__aeabi_ddiv+0x4f4>
 80010d4:	0022      	movs	r2, r4
 80010d6:	1d14      	adds	r4, r2, #4
 80010d8:	4294      	cmp	r4, r2
 80010da:	4189      	sbcs	r1, r1
 80010dc:	4249      	negs	r1, r1
 80010de:	185b      	adds	r3, r3, r1
 80010e0:	021a      	lsls	r2, r3, #8
 80010e2:	d562      	bpl.n	80011aa <__aeabi_ddiv+0x5be>
 80010e4:	2201      	movs	r2, #1
 80010e6:	2300      	movs	r3, #0
 80010e8:	2700      	movs	r7, #0
 80010ea:	e60d      	b.n	8000d08 <__aeabi_ddiv+0x11c>
 80010ec:	428a      	cmp	r2, r1
 80010ee:	d800      	bhi.n	80010f2 <__aeabi_ddiv+0x506>
 80010f0:	e70a      	b.n	8000f08 <__aeabi_ddiv+0x31c>
 80010f2:	1e83      	subs	r3, r0, #2
 80010f4:	1989      	adds	r1, r1, r6
 80010f6:	e707      	b.n	8000f08 <__aeabi_ddiv+0x31c>
 80010f8:	230f      	movs	r3, #15
 80010fa:	4013      	ands	r3, r2
 80010fc:	2b04      	cmp	r3, #4
 80010fe:	d100      	bne.n	8001102 <__aeabi_ddiv+0x516>
 8001100:	e5e6      	b.n	8000cd0 <__aeabi_ddiv+0xe4>
 8001102:	1d17      	adds	r7, r2, #4
 8001104:	4297      	cmp	r7, r2
 8001106:	4192      	sbcs	r2, r2
 8001108:	4253      	negs	r3, r2
 800110a:	449b      	add	fp, r3
 800110c:	08fa      	lsrs	r2, r7, #3
 800110e:	e5e0      	b.n	8000cd2 <__aeabi_ddiv+0xe6>
 8001110:	2800      	cmp	r0, #0
 8001112:	d100      	bne.n	8001116 <__aeabi_ddiv+0x52a>
 8001114:	e5d7      	b.n	8000cc6 <__aeabi_ddiv+0xda>
 8001116:	1871      	adds	r1, r6, r1
 8001118:	1e53      	subs	r3, r2, #1
 800111a:	42b1      	cmp	r1, r6
 800111c:	d327      	bcc.n	800116e <__aeabi_ddiv+0x582>
 800111e:	42a9      	cmp	r1, r5
 8001120:	d315      	bcc.n	800114e <__aeabi_ddiv+0x562>
 8001122:	d058      	beq.n	80011d6 <__aeabi_ddiv+0x5ea>
 8001124:	001a      	movs	r2, r3
 8001126:	e773      	b.n	8001010 <__aeabi_ddiv+0x424>
 8001128:	2b00      	cmp	r3, #0
 800112a:	dc00      	bgt.n	800112e <__aeabi_ddiv+0x542>
 800112c:	e604      	b.n	8000d38 <__aeabi_ddiv+0x14c>
 800112e:	2301      	movs	r3, #1
 8001130:	2200      	movs	r2, #0
 8001132:	449b      	add	fp, r3
 8001134:	e5cd      	b.n	8000cd2 <__aeabi_ddiv+0xe6>
 8001136:	2302      	movs	r3, #2
 8001138:	4447      	add	r7, r8
 800113a:	4547      	cmp	r7, r8
 800113c:	4189      	sbcs	r1, r1
 800113e:	425b      	negs	r3, r3
 8001140:	469c      	mov	ip, r3
 8001142:	4249      	negs	r1, r1
 8001144:	1989      	adds	r1, r1, r6
 8001146:	190c      	adds	r4, r1, r4
 8001148:	44e3      	add	fp, ip
 800114a:	1a24      	subs	r4, r4, r0
 800114c:	e703      	b.n	8000f56 <__aeabi_ddiv+0x36a>
 800114e:	4643      	mov	r3, r8
 8001150:	005f      	lsls	r7, r3, #1
 8001152:	4547      	cmp	r7, r8
 8001154:	419b      	sbcs	r3, r3
 8001156:	46b8      	mov	r8, r7
 8001158:	425b      	negs	r3, r3
 800115a:	199e      	adds	r6, r3, r6
 800115c:	3a02      	subs	r2, #2
 800115e:	1989      	adds	r1, r1, r6
 8001160:	42a9      	cmp	r1, r5
 8001162:	d000      	beq.n	8001166 <__aeabi_ddiv+0x57a>
 8001164:	e754      	b.n	8001010 <__aeabi_ddiv+0x424>
 8001166:	4540      	cmp	r0, r8
 8001168:	d000      	beq.n	800116c <__aeabi_ddiv+0x580>
 800116a:	e751      	b.n	8001010 <__aeabi_ddiv+0x424>
 800116c:	e5ab      	b.n	8000cc6 <__aeabi_ddiv+0xda>
 800116e:	001a      	movs	r2, r3
 8001170:	e7f6      	b.n	8001160 <__aeabi_ddiv+0x574>
 8001172:	211f      	movs	r1, #31
 8001174:	465f      	mov	r7, fp
 8001176:	4249      	negs	r1, r1
 8001178:	1b0c      	subs	r4, r1, r4
 800117a:	40e7      	lsrs	r7, r4
 800117c:	2b20      	cmp	r3, #32
 800117e:	d007      	beq.n	8001190 <__aeabi_ddiv+0x5a4>
 8001180:	491a      	ldr	r1, [pc, #104]	; (80011ec <__aeabi_ddiv+0x600>)
 8001182:	9b00      	ldr	r3, [sp, #0]
 8001184:	468c      	mov	ip, r1
 8001186:	4463      	add	r3, ip
 8001188:	0018      	movs	r0, r3
 800118a:	465b      	mov	r3, fp
 800118c:	4083      	lsls	r3, r0
 800118e:	431a      	orrs	r2, r3
 8001190:	1e50      	subs	r0, r2, #1
 8001192:	4182      	sbcs	r2, r0
 8001194:	433a      	orrs	r2, r7
 8001196:	2707      	movs	r7, #7
 8001198:	2300      	movs	r3, #0
 800119a:	4017      	ands	r7, r2
 800119c:	d009      	beq.n	80011b2 <__aeabi_ddiv+0x5c6>
 800119e:	210f      	movs	r1, #15
 80011a0:	2300      	movs	r3, #0
 80011a2:	4011      	ands	r1, r2
 80011a4:	0014      	movs	r4, r2
 80011a6:	2904      	cmp	r1, #4
 80011a8:	d195      	bne.n	80010d6 <__aeabi_ddiv+0x4ea>
 80011aa:	0022      	movs	r2, r4
 80011ac:	075f      	lsls	r7, r3, #29
 80011ae:	025b      	lsls	r3, r3, #9
 80011b0:	0b1b      	lsrs	r3, r3, #12
 80011b2:	08d2      	lsrs	r2, r2, #3
 80011b4:	4317      	orrs	r7, r2
 80011b6:	2200      	movs	r2, #0
 80011b8:	e5a6      	b.n	8000d08 <__aeabi_ddiv+0x11c>
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	4659      	mov	r1, fp
 80011be:	031b      	lsls	r3, r3, #12
 80011c0:	430b      	orrs	r3, r1
 80011c2:	031b      	lsls	r3, r3, #12
 80011c4:	0017      	movs	r7, r2
 80011c6:	0b1b      	lsrs	r3, r3, #12
 80011c8:	4a06      	ldr	r2, [pc, #24]	; (80011e4 <__aeabi_ddiv+0x5f8>)
 80011ca:	e59d      	b.n	8000d08 <__aeabi_ddiv+0x11c>
 80011cc:	42bd      	cmp	r5, r7
 80011ce:	d8b2      	bhi.n	8001136 <__aeabi_ddiv+0x54a>
 80011d0:	469b      	mov	fp, r3
 80011d2:	2400      	movs	r4, #0
 80011d4:	e6bf      	b.n	8000f56 <__aeabi_ddiv+0x36a>
 80011d6:	4580      	cmp	r8, r0
 80011d8:	d3b9      	bcc.n	800114e <__aeabi_ddiv+0x562>
 80011da:	001a      	movs	r2, r3
 80011dc:	e7c3      	b.n	8001166 <__aeabi_ddiv+0x57a>
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	000003ff 	.word	0x000003ff
 80011e4:	000007ff 	.word	0x000007ff
 80011e8:	0000041e 	.word	0x0000041e
 80011ec:	0000043e 	.word	0x0000043e

080011f0 <__aeabi_dmul>:
 80011f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011f2:	4657      	mov	r7, sl
 80011f4:	46de      	mov	lr, fp
 80011f6:	464e      	mov	r6, r9
 80011f8:	4645      	mov	r5, r8
 80011fa:	b5e0      	push	{r5, r6, r7, lr}
 80011fc:	4683      	mov	fp, r0
 80011fe:	0006      	movs	r6, r0
 8001200:	030f      	lsls	r7, r1, #12
 8001202:	0048      	lsls	r0, r1, #1
 8001204:	b087      	sub	sp, #28
 8001206:	4692      	mov	sl, r2
 8001208:	001d      	movs	r5, r3
 800120a:	0b3f      	lsrs	r7, r7, #12
 800120c:	0d40      	lsrs	r0, r0, #21
 800120e:	0fcc      	lsrs	r4, r1, #31
 8001210:	2800      	cmp	r0, #0
 8001212:	d100      	bne.n	8001216 <__aeabi_dmul+0x26>
 8001214:	e06f      	b.n	80012f6 <__aeabi_dmul+0x106>
 8001216:	4bde      	ldr	r3, [pc, #888]	; (8001590 <__aeabi_dmul+0x3a0>)
 8001218:	4298      	cmp	r0, r3
 800121a:	d038      	beq.n	800128e <__aeabi_dmul+0x9e>
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	00ff      	lsls	r7, r7, #3
 8001220:	041b      	lsls	r3, r3, #16
 8001222:	431f      	orrs	r7, r3
 8001224:	0f73      	lsrs	r3, r6, #29
 8001226:	433b      	orrs	r3, r7
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	4bda      	ldr	r3, [pc, #872]	; (8001594 <__aeabi_dmul+0x3a4>)
 800122c:	2700      	movs	r7, #0
 800122e:	4699      	mov	r9, r3
 8001230:	2300      	movs	r3, #0
 8001232:	469b      	mov	fp, r3
 8001234:	00f6      	lsls	r6, r6, #3
 8001236:	4481      	add	r9, r0
 8001238:	032b      	lsls	r3, r5, #12
 800123a:	0069      	lsls	r1, r5, #1
 800123c:	0b1b      	lsrs	r3, r3, #12
 800123e:	4652      	mov	r2, sl
 8001240:	4698      	mov	r8, r3
 8001242:	0d49      	lsrs	r1, r1, #21
 8001244:	0fed      	lsrs	r5, r5, #31
 8001246:	2900      	cmp	r1, #0
 8001248:	d100      	bne.n	800124c <__aeabi_dmul+0x5c>
 800124a:	e085      	b.n	8001358 <__aeabi_dmul+0x168>
 800124c:	4bd0      	ldr	r3, [pc, #832]	; (8001590 <__aeabi_dmul+0x3a0>)
 800124e:	4299      	cmp	r1, r3
 8001250:	d100      	bne.n	8001254 <__aeabi_dmul+0x64>
 8001252:	e073      	b.n	800133c <__aeabi_dmul+0x14c>
 8001254:	4643      	mov	r3, r8
 8001256:	00da      	lsls	r2, r3, #3
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	041b      	lsls	r3, r3, #16
 800125c:	4313      	orrs	r3, r2
 800125e:	4652      	mov	r2, sl
 8001260:	48cc      	ldr	r0, [pc, #816]	; (8001594 <__aeabi_dmul+0x3a4>)
 8001262:	0f52      	lsrs	r2, r2, #29
 8001264:	4684      	mov	ip, r0
 8001266:	4313      	orrs	r3, r2
 8001268:	4652      	mov	r2, sl
 800126a:	2000      	movs	r0, #0
 800126c:	4461      	add	r1, ip
 800126e:	00d2      	lsls	r2, r2, #3
 8001270:	4489      	add	r9, r1
 8001272:	0021      	movs	r1, r4
 8001274:	4069      	eors	r1, r5
 8001276:	9100      	str	r1, [sp, #0]
 8001278:	468c      	mov	ip, r1
 800127a:	2101      	movs	r1, #1
 800127c:	4449      	add	r1, r9
 800127e:	468a      	mov	sl, r1
 8001280:	2f0f      	cmp	r7, #15
 8001282:	d900      	bls.n	8001286 <__aeabi_dmul+0x96>
 8001284:	e090      	b.n	80013a8 <__aeabi_dmul+0x1b8>
 8001286:	49c4      	ldr	r1, [pc, #784]	; (8001598 <__aeabi_dmul+0x3a8>)
 8001288:	00bf      	lsls	r7, r7, #2
 800128a:	59cf      	ldr	r7, [r1, r7]
 800128c:	46bf      	mov	pc, r7
 800128e:	465b      	mov	r3, fp
 8001290:	433b      	orrs	r3, r7
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	d000      	beq.n	8001298 <__aeabi_dmul+0xa8>
 8001296:	e16a      	b.n	800156e <__aeabi_dmul+0x37e>
 8001298:	2302      	movs	r3, #2
 800129a:	2708      	movs	r7, #8
 800129c:	2600      	movs	r6, #0
 800129e:	4681      	mov	r9, r0
 80012a0:	469b      	mov	fp, r3
 80012a2:	e7c9      	b.n	8001238 <__aeabi_dmul+0x48>
 80012a4:	0032      	movs	r2, r6
 80012a6:	4658      	mov	r0, fp
 80012a8:	9b01      	ldr	r3, [sp, #4]
 80012aa:	4661      	mov	r1, ip
 80012ac:	9100      	str	r1, [sp, #0]
 80012ae:	2802      	cmp	r0, #2
 80012b0:	d100      	bne.n	80012b4 <__aeabi_dmul+0xc4>
 80012b2:	e075      	b.n	80013a0 <__aeabi_dmul+0x1b0>
 80012b4:	2803      	cmp	r0, #3
 80012b6:	d100      	bne.n	80012ba <__aeabi_dmul+0xca>
 80012b8:	e1fe      	b.n	80016b8 <__aeabi_dmul+0x4c8>
 80012ba:	2801      	cmp	r0, #1
 80012bc:	d000      	beq.n	80012c0 <__aeabi_dmul+0xd0>
 80012be:	e12c      	b.n	800151a <__aeabi_dmul+0x32a>
 80012c0:	2300      	movs	r3, #0
 80012c2:	2700      	movs	r7, #0
 80012c4:	2600      	movs	r6, #0
 80012c6:	2500      	movs	r5, #0
 80012c8:	033f      	lsls	r7, r7, #12
 80012ca:	0d2a      	lsrs	r2, r5, #20
 80012cc:	0b3f      	lsrs	r7, r7, #12
 80012ce:	48b3      	ldr	r0, [pc, #716]	; (800159c <__aeabi_dmul+0x3ac>)
 80012d0:	0512      	lsls	r2, r2, #20
 80012d2:	433a      	orrs	r2, r7
 80012d4:	4002      	ands	r2, r0
 80012d6:	051b      	lsls	r3, r3, #20
 80012d8:	4313      	orrs	r3, r2
 80012da:	9a00      	ldr	r2, [sp, #0]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	07d1      	lsls	r1, r2, #31
 80012e0:	085b      	lsrs	r3, r3, #1
 80012e2:	430b      	orrs	r3, r1
 80012e4:	0030      	movs	r0, r6
 80012e6:	0019      	movs	r1, r3
 80012e8:	b007      	add	sp, #28
 80012ea:	bc3c      	pop	{r2, r3, r4, r5}
 80012ec:	4690      	mov	r8, r2
 80012ee:	4699      	mov	r9, r3
 80012f0:	46a2      	mov	sl, r4
 80012f2:	46ab      	mov	fp, r5
 80012f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012f6:	465b      	mov	r3, fp
 80012f8:	433b      	orrs	r3, r7
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	d100      	bne.n	8001300 <__aeabi_dmul+0x110>
 80012fe:	e12f      	b.n	8001560 <__aeabi_dmul+0x370>
 8001300:	2f00      	cmp	r7, #0
 8001302:	d100      	bne.n	8001306 <__aeabi_dmul+0x116>
 8001304:	e1a5      	b.n	8001652 <__aeabi_dmul+0x462>
 8001306:	0038      	movs	r0, r7
 8001308:	f000 fd94 	bl	8001e34 <__clzsi2>
 800130c:	0003      	movs	r3, r0
 800130e:	3b0b      	subs	r3, #11
 8001310:	2b1c      	cmp	r3, #28
 8001312:	dd00      	ble.n	8001316 <__aeabi_dmul+0x126>
 8001314:	e196      	b.n	8001644 <__aeabi_dmul+0x454>
 8001316:	221d      	movs	r2, #29
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	465a      	mov	r2, fp
 800131c:	0001      	movs	r1, r0
 800131e:	40da      	lsrs	r2, r3
 8001320:	465e      	mov	r6, fp
 8001322:	3908      	subs	r1, #8
 8001324:	408f      	lsls	r7, r1
 8001326:	0013      	movs	r3, r2
 8001328:	408e      	lsls	r6, r1
 800132a:	433b      	orrs	r3, r7
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	4b9c      	ldr	r3, [pc, #624]	; (80015a0 <__aeabi_dmul+0x3b0>)
 8001330:	2700      	movs	r7, #0
 8001332:	1a1b      	subs	r3, r3, r0
 8001334:	4699      	mov	r9, r3
 8001336:	2300      	movs	r3, #0
 8001338:	469b      	mov	fp, r3
 800133a:	e77d      	b.n	8001238 <__aeabi_dmul+0x48>
 800133c:	4641      	mov	r1, r8
 800133e:	4653      	mov	r3, sl
 8001340:	430b      	orrs	r3, r1
 8001342:	4993      	ldr	r1, [pc, #588]	; (8001590 <__aeabi_dmul+0x3a0>)
 8001344:	468c      	mov	ip, r1
 8001346:	44e1      	add	r9, ip
 8001348:	2b00      	cmp	r3, #0
 800134a:	d000      	beq.n	800134e <__aeabi_dmul+0x15e>
 800134c:	e11a      	b.n	8001584 <__aeabi_dmul+0x394>
 800134e:	2202      	movs	r2, #2
 8001350:	2002      	movs	r0, #2
 8001352:	4317      	orrs	r7, r2
 8001354:	2200      	movs	r2, #0
 8001356:	e78c      	b.n	8001272 <__aeabi_dmul+0x82>
 8001358:	4313      	orrs	r3, r2
 800135a:	d100      	bne.n	800135e <__aeabi_dmul+0x16e>
 800135c:	e10d      	b.n	800157a <__aeabi_dmul+0x38a>
 800135e:	4643      	mov	r3, r8
 8001360:	2b00      	cmp	r3, #0
 8001362:	d100      	bne.n	8001366 <__aeabi_dmul+0x176>
 8001364:	e181      	b.n	800166a <__aeabi_dmul+0x47a>
 8001366:	4640      	mov	r0, r8
 8001368:	f000 fd64 	bl	8001e34 <__clzsi2>
 800136c:	0002      	movs	r2, r0
 800136e:	3a0b      	subs	r2, #11
 8001370:	2a1c      	cmp	r2, #28
 8001372:	dd00      	ble.n	8001376 <__aeabi_dmul+0x186>
 8001374:	e172      	b.n	800165c <__aeabi_dmul+0x46c>
 8001376:	0001      	movs	r1, r0
 8001378:	4643      	mov	r3, r8
 800137a:	3908      	subs	r1, #8
 800137c:	408b      	lsls	r3, r1
 800137e:	4698      	mov	r8, r3
 8001380:	231d      	movs	r3, #29
 8001382:	1a9a      	subs	r2, r3, r2
 8001384:	4653      	mov	r3, sl
 8001386:	40d3      	lsrs	r3, r2
 8001388:	001a      	movs	r2, r3
 800138a:	4643      	mov	r3, r8
 800138c:	4313      	orrs	r3, r2
 800138e:	4652      	mov	r2, sl
 8001390:	408a      	lsls	r2, r1
 8001392:	4649      	mov	r1, r9
 8001394:	1a08      	subs	r0, r1, r0
 8001396:	4982      	ldr	r1, [pc, #520]	; (80015a0 <__aeabi_dmul+0x3b0>)
 8001398:	4689      	mov	r9, r1
 800139a:	4481      	add	r9, r0
 800139c:	2000      	movs	r0, #0
 800139e:	e768      	b.n	8001272 <__aeabi_dmul+0x82>
 80013a0:	4b7b      	ldr	r3, [pc, #492]	; (8001590 <__aeabi_dmul+0x3a0>)
 80013a2:	2700      	movs	r7, #0
 80013a4:	2600      	movs	r6, #0
 80013a6:	e78e      	b.n	80012c6 <__aeabi_dmul+0xd6>
 80013a8:	0c14      	lsrs	r4, r2, #16
 80013aa:	0412      	lsls	r2, r2, #16
 80013ac:	0c12      	lsrs	r2, r2, #16
 80013ae:	0011      	movs	r1, r2
 80013b0:	0c37      	lsrs	r7, r6, #16
 80013b2:	0436      	lsls	r6, r6, #16
 80013b4:	0c35      	lsrs	r5, r6, #16
 80013b6:	4379      	muls	r1, r7
 80013b8:	0028      	movs	r0, r5
 80013ba:	468c      	mov	ip, r1
 80013bc:	002e      	movs	r6, r5
 80013be:	4360      	muls	r0, r4
 80013c0:	4460      	add	r0, ip
 80013c2:	4683      	mov	fp, r0
 80013c4:	4356      	muls	r6, r2
 80013c6:	0021      	movs	r1, r4
 80013c8:	0c30      	lsrs	r0, r6, #16
 80013ca:	4680      	mov	r8, r0
 80013cc:	4658      	mov	r0, fp
 80013ce:	4379      	muls	r1, r7
 80013d0:	4440      	add	r0, r8
 80013d2:	9102      	str	r1, [sp, #8]
 80013d4:	4584      	cmp	ip, r0
 80013d6:	d906      	bls.n	80013e6 <__aeabi_dmul+0x1f6>
 80013d8:	4688      	mov	r8, r1
 80013da:	2180      	movs	r1, #128	; 0x80
 80013dc:	0249      	lsls	r1, r1, #9
 80013de:	468c      	mov	ip, r1
 80013e0:	44e0      	add	r8, ip
 80013e2:	4641      	mov	r1, r8
 80013e4:	9102      	str	r1, [sp, #8]
 80013e6:	0436      	lsls	r6, r6, #16
 80013e8:	0c01      	lsrs	r1, r0, #16
 80013ea:	0c36      	lsrs	r6, r6, #16
 80013ec:	0400      	lsls	r0, r0, #16
 80013ee:	468b      	mov	fp, r1
 80013f0:	1981      	adds	r1, r0, r6
 80013f2:	0c1e      	lsrs	r6, r3, #16
 80013f4:	041b      	lsls	r3, r3, #16
 80013f6:	0c1b      	lsrs	r3, r3, #16
 80013f8:	9103      	str	r1, [sp, #12]
 80013fa:	0019      	movs	r1, r3
 80013fc:	4379      	muls	r1, r7
 80013fe:	468c      	mov	ip, r1
 8001400:	0028      	movs	r0, r5
 8001402:	4375      	muls	r5, r6
 8001404:	4465      	add	r5, ip
 8001406:	46a8      	mov	r8, r5
 8001408:	4358      	muls	r0, r3
 800140a:	0c05      	lsrs	r5, r0, #16
 800140c:	4445      	add	r5, r8
 800140e:	4377      	muls	r7, r6
 8001410:	42a9      	cmp	r1, r5
 8001412:	d903      	bls.n	800141c <__aeabi_dmul+0x22c>
 8001414:	2180      	movs	r1, #128	; 0x80
 8001416:	0249      	lsls	r1, r1, #9
 8001418:	468c      	mov	ip, r1
 800141a:	4467      	add	r7, ip
 800141c:	0c29      	lsrs	r1, r5, #16
 800141e:	468c      	mov	ip, r1
 8001420:	0039      	movs	r1, r7
 8001422:	0400      	lsls	r0, r0, #16
 8001424:	0c00      	lsrs	r0, r0, #16
 8001426:	042d      	lsls	r5, r5, #16
 8001428:	182d      	adds	r5, r5, r0
 800142a:	4461      	add	r1, ip
 800142c:	44ab      	add	fp, r5
 800142e:	9105      	str	r1, [sp, #20]
 8001430:	4659      	mov	r1, fp
 8001432:	9104      	str	r1, [sp, #16]
 8001434:	9901      	ldr	r1, [sp, #4]
 8001436:	040f      	lsls	r7, r1, #16
 8001438:	0c3f      	lsrs	r7, r7, #16
 800143a:	0c08      	lsrs	r0, r1, #16
 800143c:	0039      	movs	r1, r7
 800143e:	4351      	muls	r1, r2
 8001440:	4342      	muls	r2, r0
 8001442:	4690      	mov	r8, r2
 8001444:	0002      	movs	r2, r0
 8001446:	468c      	mov	ip, r1
 8001448:	0c09      	lsrs	r1, r1, #16
 800144a:	468b      	mov	fp, r1
 800144c:	4362      	muls	r2, r4
 800144e:	437c      	muls	r4, r7
 8001450:	4444      	add	r4, r8
 8001452:	445c      	add	r4, fp
 8001454:	45a0      	cmp	r8, r4
 8001456:	d903      	bls.n	8001460 <__aeabi_dmul+0x270>
 8001458:	2180      	movs	r1, #128	; 0x80
 800145a:	0249      	lsls	r1, r1, #9
 800145c:	4688      	mov	r8, r1
 800145e:	4442      	add	r2, r8
 8001460:	0c21      	lsrs	r1, r4, #16
 8001462:	4688      	mov	r8, r1
 8001464:	4661      	mov	r1, ip
 8001466:	0409      	lsls	r1, r1, #16
 8001468:	0c09      	lsrs	r1, r1, #16
 800146a:	468c      	mov	ip, r1
 800146c:	0039      	movs	r1, r7
 800146e:	4359      	muls	r1, r3
 8001470:	4343      	muls	r3, r0
 8001472:	4370      	muls	r0, r6
 8001474:	437e      	muls	r6, r7
 8001476:	0c0f      	lsrs	r7, r1, #16
 8001478:	18f6      	adds	r6, r6, r3
 800147a:	0424      	lsls	r4, r4, #16
 800147c:	19be      	adds	r6, r7, r6
 800147e:	4464      	add	r4, ip
 8001480:	4442      	add	r2, r8
 8001482:	468c      	mov	ip, r1
 8001484:	42b3      	cmp	r3, r6
 8001486:	d903      	bls.n	8001490 <__aeabi_dmul+0x2a0>
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	025b      	lsls	r3, r3, #9
 800148c:	4698      	mov	r8, r3
 800148e:	4440      	add	r0, r8
 8001490:	9b02      	ldr	r3, [sp, #8]
 8001492:	4661      	mov	r1, ip
 8001494:	4698      	mov	r8, r3
 8001496:	9b04      	ldr	r3, [sp, #16]
 8001498:	0437      	lsls	r7, r6, #16
 800149a:	4443      	add	r3, r8
 800149c:	469b      	mov	fp, r3
 800149e:	45ab      	cmp	fp, r5
 80014a0:	41ad      	sbcs	r5, r5
 80014a2:	426b      	negs	r3, r5
 80014a4:	040d      	lsls	r5, r1, #16
 80014a6:	9905      	ldr	r1, [sp, #20]
 80014a8:	0c2d      	lsrs	r5, r5, #16
 80014aa:	468c      	mov	ip, r1
 80014ac:	197f      	adds	r7, r7, r5
 80014ae:	4467      	add	r7, ip
 80014b0:	18fd      	adds	r5, r7, r3
 80014b2:	46a8      	mov	r8, r5
 80014b4:	465d      	mov	r5, fp
 80014b6:	192d      	adds	r5, r5, r4
 80014b8:	42a5      	cmp	r5, r4
 80014ba:	41a4      	sbcs	r4, r4
 80014bc:	4693      	mov	fp, r2
 80014be:	4264      	negs	r4, r4
 80014c0:	46a4      	mov	ip, r4
 80014c2:	44c3      	add	fp, r8
 80014c4:	44dc      	add	ip, fp
 80014c6:	428f      	cmp	r7, r1
 80014c8:	41bf      	sbcs	r7, r7
 80014ca:	4598      	cmp	r8, r3
 80014cc:	419b      	sbcs	r3, r3
 80014ce:	4593      	cmp	fp, r2
 80014d0:	4192      	sbcs	r2, r2
 80014d2:	45a4      	cmp	ip, r4
 80014d4:	41a4      	sbcs	r4, r4
 80014d6:	425b      	negs	r3, r3
 80014d8:	427f      	negs	r7, r7
 80014da:	431f      	orrs	r7, r3
 80014dc:	0c36      	lsrs	r6, r6, #16
 80014de:	4252      	negs	r2, r2
 80014e0:	4264      	negs	r4, r4
 80014e2:	19bf      	adds	r7, r7, r6
 80014e4:	4322      	orrs	r2, r4
 80014e6:	18bf      	adds	r7, r7, r2
 80014e8:	4662      	mov	r2, ip
 80014ea:	1838      	adds	r0, r7, r0
 80014ec:	0243      	lsls	r3, r0, #9
 80014ee:	0dd2      	lsrs	r2, r2, #23
 80014f0:	9903      	ldr	r1, [sp, #12]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	026a      	lsls	r2, r5, #9
 80014f6:	430a      	orrs	r2, r1
 80014f8:	1e50      	subs	r0, r2, #1
 80014fa:	4182      	sbcs	r2, r0
 80014fc:	4661      	mov	r1, ip
 80014fe:	0ded      	lsrs	r5, r5, #23
 8001500:	432a      	orrs	r2, r5
 8001502:	024e      	lsls	r6, r1, #9
 8001504:	4332      	orrs	r2, r6
 8001506:	01d9      	lsls	r1, r3, #7
 8001508:	d400      	bmi.n	800150c <__aeabi_dmul+0x31c>
 800150a:	e0b3      	b.n	8001674 <__aeabi_dmul+0x484>
 800150c:	2601      	movs	r6, #1
 800150e:	0850      	lsrs	r0, r2, #1
 8001510:	4032      	ands	r2, r6
 8001512:	4302      	orrs	r2, r0
 8001514:	07de      	lsls	r6, r3, #31
 8001516:	4332      	orrs	r2, r6
 8001518:	085b      	lsrs	r3, r3, #1
 800151a:	4c22      	ldr	r4, [pc, #136]	; (80015a4 <__aeabi_dmul+0x3b4>)
 800151c:	4454      	add	r4, sl
 800151e:	2c00      	cmp	r4, #0
 8001520:	dd62      	ble.n	80015e8 <__aeabi_dmul+0x3f8>
 8001522:	0751      	lsls	r1, r2, #29
 8001524:	d009      	beq.n	800153a <__aeabi_dmul+0x34a>
 8001526:	200f      	movs	r0, #15
 8001528:	4010      	ands	r0, r2
 800152a:	2804      	cmp	r0, #4
 800152c:	d005      	beq.n	800153a <__aeabi_dmul+0x34a>
 800152e:	1d10      	adds	r0, r2, #4
 8001530:	4290      	cmp	r0, r2
 8001532:	4192      	sbcs	r2, r2
 8001534:	4252      	negs	r2, r2
 8001536:	189b      	adds	r3, r3, r2
 8001538:	0002      	movs	r2, r0
 800153a:	01d9      	lsls	r1, r3, #7
 800153c:	d504      	bpl.n	8001548 <__aeabi_dmul+0x358>
 800153e:	2480      	movs	r4, #128	; 0x80
 8001540:	4819      	ldr	r0, [pc, #100]	; (80015a8 <__aeabi_dmul+0x3b8>)
 8001542:	00e4      	lsls	r4, r4, #3
 8001544:	4003      	ands	r3, r0
 8001546:	4454      	add	r4, sl
 8001548:	4818      	ldr	r0, [pc, #96]	; (80015ac <__aeabi_dmul+0x3bc>)
 800154a:	4284      	cmp	r4, r0
 800154c:	dd00      	ble.n	8001550 <__aeabi_dmul+0x360>
 800154e:	e727      	b.n	80013a0 <__aeabi_dmul+0x1b0>
 8001550:	075e      	lsls	r6, r3, #29
 8001552:	025b      	lsls	r3, r3, #9
 8001554:	08d2      	lsrs	r2, r2, #3
 8001556:	0b1f      	lsrs	r7, r3, #12
 8001558:	0563      	lsls	r3, r4, #21
 800155a:	4316      	orrs	r6, r2
 800155c:	0d5b      	lsrs	r3, r3, #21
 800155e:	e6b2      	b.n	80012c6 <__aeabi_dmul+0xd6>
 8001560:	2300      	movs	r3, #0
 8001562:	4699      	mov	r9, r3
 8001564:	3301      	adds	r3, #1
 8001566:	2704      	movs	r7, #4
 8001568:	2600      	movs	r6, #0
 800156a:	469b      	mov	fp, r3
 800156c:	e664      	b.n	8001238 <__aeabi_dmul+0x48>
 800156e:	2303      	movs	r3, #3
 8001570:	9701      	str	r7, [sp, #4]
 8001572:	4681      	mov	r9, r0
 8001574:	270c      	movs	r7, #12
 8001576:	469b      	mov	fp, r3
 8001578:	e65e      	b.n	8001238 <__aeabi_dmul+0x48>
 800157a:	2201      	movs	r2, #1
 800157c:	2001      	movs	r0, #1
 800157e:	4317      	orrs	r7, r2
 8001580:	2200      	movs	r2, #0
 8001582:	e676      	b.n	8001272 <__aeabi_dmul+0x82>
 8001584:	2303      	movs	r3, #3
 8001586:	2003      	movs	r0, #3
 8001588:	431f      	orrs	r7, r3
 800158a:	4643      	mov	r3, r8
 800158c:	e671      	b.n	8001272 <__aeabi_dmul+0x82>
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	000007ff 	.word	0x000007ff
 8001594:	fffffc01 	.word	0xfffffc01
 8001598:	080062e4 	.word	0x080062e4
 800159c:	800fffff 	.word	0x800fffff
 80015a0:	fffffc0d 	.word	0xfffffc0d
 80015a4:	000003ff 	.word	0x000003ff
 80015a8:	feffffff 	.word	0xfeffffff
 80015ac:	000007fe 	.word	0x000007fe
 80015b0:	2300      	movs	r3, #0
 80015b2:	2780      	movs	r7, #128	; 0x80
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	033f      	lsls	r7, r7, #12
 80015b8:	2600      	movs	r6, #0
 80015ba:	4b43      	ldr	r3, [pc, #268]	; (80016c8 <__aeabi_dmul+0x4d8>)
 80015bc:	e683      	b.n	80012c6 <__aeabi_dmul+0xd6>
 80015be:	9b01      	ldr	r3, [sp, #4]
 80015c0:	0032      	movs	r2, r6
 80015c2:	46a4      	mov	ip, r4
 80015c4:	4658      	mov	r0, fp
 80015c6:	e670      	b.n	80012aa <__aeabi_dmul+0xba>
 80015c8:	46ac      	mov	ip, r5
 80015ca:	e66e      	b.n	80012aa <__aeabi_dmul+0xba>
 80015cc:	2780      	movs	r7, #128	; 0x80
 80015ce:	9901      	ldr	r1, [sp, #4]
 80015d0:	033f      	lsls	r7, r7, #12
 80015d2:	4239      	tst	r1, r7
 80015d4:	d02d      	beq.n	8001632 <__aeabi_dmul+0x442>
 80015d6:	423b      	tst	r3, r7
 80015d8:	d12b      	bne.n	8001632 <__aeabi_dmul+0x442>
 80015da:	431f      	orrs	r7, r3
 80015dc:	033f      	lsls	r7, r7, #12
 80015de:	0b3f      	lsrs	r7, r7, #12
 80015e0:	9500      	str	r5, [sp, #0]
 80015e2:	0016      	movs	r6, r2
 80015e4:	4b38      	ldr	r3, [pc, #224]	; (80016c8 <__aeabi_dmul+0x4d8>)
 80015e6:	e66e      	b.n	80012c6 <__aeabi_dmul+0xd6>
 80015e8:	2501      	movs	r5, #1
 80015ea:	1b2d      	subs	r5, r5, r4
 80015ec:	2d38      	cmp	r5, #56	; 0x38
 80015ee:	dd00      	ble.n	80015f2 <__aeabi_dmul+0x402>
 80015f0:	e666      	b.n	80012c0 <__aeabi_dmul+0xd0>
 80015f2:	2d1f      	cmp	r5, #31
 80015f4:	dc40      	bgt.n	8001678 <__aeabi_dmul+0x488>
 80015f6:	4835      	ldr	r0, [pc, #212]	; (80016cc <__aeabi_dmul+0x4dc>)
 80015f8:	001c      	movs	r4, r3
 80015fa:	4450      	add	r0, sl
 80015fc:	0016      	movs	r6, r2
 80015fe:	4082      	lsls	r2, r0
 8001600:	4084      	lsls	r4, r0
 8001602:	40ee      	lsrs	r6, r5
 8001604:	1e50      	subs	r0, r2, #1
 8001606:	4182      	sbcs	r2, r0
 8001608:	4334      	orrs	r4, r6
 800160a:	4314      	orrs	r4, r2
 800160c:	40eb      	lsrs	r3, r5
 800160e:	0762      	lsls	r2, r4, #29
 8001610:	d009      	beq.n	8001626 <__aeabi_dmul+0x436>
 8001612:	220f      	movs	r2, #15
 8001614:	4022      	ands	r2, r4
 8001616:	2a04      	cmp	r2, #4
 8001618:	d005      	beq.n	8001626 <__aeabi_dmul+0x436>
 800161a:	0022      	movs	r2, r4
 800161c:	1d14      	adds	r4, r2, #4
 800161e:	4294      	cmp	r4, r2
 8001620:	4180      	sbcs	r0, r0
 8001622:	4240      	negs	r0, r0
 8001624:	181b      	adds	r3, r3, r0
 8001626:	021a      	lsls	r2, r3, #8
 8001628:	d53e      	bpl.n	80016a8 <__aeabi_dmul+0x4b8>
 800162a:	2301      	movs	r3, #1
 800162c:	2700      	movs	r7, #0
 800162e:	2600      	movs	r6, #0
 8001630:	e649      	b.n	80012c6 <__aeabi_dmul+0xd6>
 8001632:	2780      	movs	r7, #128	; 0x80
 8001634:	9b01      	ldr	r3, [sp, #4]
 8001636:	033f      	lsls	r7, r7, #12
 8001638:	431f      	orrs	r7, r3
 800163a:	033f      	lsls	r7, r7, #12
 800163c:	0b3f      	lsrs	r7, r7, #12
 800163e:	9400      	str	r4, [sp, #0]
 8001640:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <__aeabi_dmul+0x4d8>)
 8001642:	e640      	b.n	80012c6 <__aeabi_dmul+0xd6>
 8001644:	0003      	movs	r3, r0
 8001646:	465a      	mov	r2, fp
 8001648:	3b28      	subs	r3, #40	; 0x28
 800164a:	409a      	lsls	r2, r3
 800164c:	2600      	movs	r6, #0
 800164e:	9201      	str	r2, [sp, #4]
 8001650:	e66d      	b.n	800132e <__aeabi_dmul+0x13e>
 8001652:	4658      	mov	r0, fp
 8001654:	f000 fbee 	bl	8001e34 <__clzsi2>
 8001658:	3020      	adds	r0, #32
 800165a:	e657      	b.n	800130c <__aeabi_dmul+0x11c>
 800165c:	0003      	movs	r3, r0
 800165e:	4652      	mov	r2, sl
 8001660:	3b28      	subs	r3, #40	; 0x28
 8001662:	409a      	lsls	r2, r3
 8001664:	0013      	movs	r3, r2
 8001666:	2200      	movs	r2, #0
 8001668:	e693      	b.n	8001392 <__aeabi_dmul+0x1a2>
 800166a:	4650      	mov	r0, sl
 800166c:	f000 fbe2 	bl	8001e34 <__clzsi2>
 8001670:	3020      	adds	r0, #32
 8001672:	e67b      	b.n	800136c <__aeabi_dmul+0x17c>
 8001674:	46ca      	mov	sl, r9
 8001676:	e750      	b.n	800151a <__aeabi_dmul+0x32a>
 8001678:	201f      	movs	r0, #31
 800167a:	001e      	movs	r6, r3
 800167c:	4240      	negs	r0, r0
 800167e:	1b04      	subs	r4, r0, r4
 8001680:	40e6      	lsrs	r6, r4
 8001682:	2d20      	cmp	r5, #32
 8001684:	d003      	beq.n	800168e <__aeabi_dmul+0x49e>
 8001686:	4c12      	ldr	r4, [pc, #72]	; (80016d0 <__aeabi_dmul+0x4e0>)
 8001688:	4454      	add	r4, sl
 800168a:	40a3      	lsls	r3, r4
 800168c:	431a      	orrs	r2, r3
 800168e:	1e50      	subs	r0, r2, #1
 8001690:	4182      	sbcs	r2, r0
 8001692:	4332      	orrs	r2, r6
 8001694:	2607      	movs	r6, #7
 8001696:	2700      	movs	r7, #0
 8001698:	4016      	ands	r6, r2
 800169a:	d009      	beq.n	80016b0 <__aeabi_dmul+0x4c0>
 800169c:	200f      	movs	r0, #15
 800169e:	2300      	movs	r3, #0
 80016a0:	4010      	ands	r0, r2
 80016a2:	0014      	movs	r4, r2
 80016a4:	2804      	cmp	r0, #4
 80016a6:	d1b9      	bne.n	800161c <__aeabi_dmul+0x42c>
 80016a8:	0022      	movs	r2, r4
 80016aa:	075e      	lsls	r6, r3, #29
 80016ac:	025b      	lsls	r3, r3, #9
 80016ae:	0b1f      	lsrs	r7, r3, #12
 80016b0:	08d2      	lsrs	r2, r2, #3
 80016b2:	4316      	orrs	r6, r2
 80016b4:	2300      	movs	r3, #0
 80016b6:	e606      	b.n	80012c6 <__aeabi_dmul+0xd6>
 80016b8:	2780      	movs	r7, #128	; 0x80
 80016ba:	033f      	lsls	r7, r7, #12
 80016bc:	431f      	orrs	r7, r3
 80016be:	033f      	lsls	r7, r7, #12
 80016c0:	0b3f      	lsrs	r7, r7, #12
 80016c2:	0016      	movs	r6, r2
 80016c4:	4b00      	ldr	r3, [pc, #0]	; (80016c8 <__aeabi_dmul+0x4d8>)
 80016c6:	e5fe      	b.n	80012c6 <__aeabi_dmul+0xd6>
 80016c8:	000007ff 	.word	0x000007ff
 80016cc:	0000041e 	.word	0x0000041e
 80016d0:	0000043e 	.word	0x0000043e

080016d4 <__aeabi_dsub>:
 80016d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016d6:	4657      	mov	r7, sl
 80016d8:	464e      	mov	r6, r9
 80016da:	4645      	mov	r5, r8
 80016dc:	46de      	mov	lr, fp
 80016de:	000c      	movs	r4, r1
 80016e0:	0309      	lsls	r1, r1, #12
 80016e2:	b5e0      	push	{r5, r6, r7, lr}
 80016e4:	0a49      	lsrs	r1, r1, #9
 80016e6:	0f46      	lsrs	r6, r0, #29
 80016e8:	005f      	lsls	r7, r3, #1
 80016ea:	4331      	orrs	r1, r6
 80016ec:	031e      	lsls	r6, r3, #12
 80016ee:	0fdb      	lsrs	r3, r3, #31
 80016f0:	0a76      	lsrs	r6, r6, #9
 80016f2:	469b      	mov	fp, r3
 80016f4:	0f53      	lsrs	r3, r2, #29
 80016f6:	4333      	orrs	r3, r6
 80016f8:	4ec8      	ldr	r6, [pc, #800]	; (8001a1c <__aeabi_dsub+0x348>)
 80016fa:	0065      	lsls	r5, r4, #1
 80016fc:	00c0      	lsls	r0, r0, #3
 80016fe:	0fe4      	lsrs	r4, r4, #31
 8001700:	00d2      	lsls	r2, r2, #3
 8001702:	0d6d      	lsrs	r5, r5, #21
 8001704:	46a2      	mov	sl, r4
 8001706:	4681      	mov	r9, r0
 8001708:	0d7f      	lsrs	r7, r7, #21
 800170a:	469c      	mov	ip, r3
 800170c:	4690      	mov	r8, r2
 800170e:	42b7      	cmp	r7, r6
 8001710:	d100      	bne.n	8001714 <__aeabi_dsub+0x40>
 8001712:	e0b9      	b.n	8001888 <__aeabi_dsub+0x1b4>
 8001714:	465b      	mov	r3, fp
 8001716:	2601      	movs	r6, #1
 8001718:	4073      	eors	r3, r6
 800171a:	469b      	mov	fp, r3
 800171c:	1bee      	subs	r6, r5, r7
 800171e:	45a3      	cmp	fp, r4
 8001720:	d100      	bne.n	8001724 <__aeabi_dsub+0x50>
 8001722:	e083      	b.n	800182c <__aeabi_dsub+0x158>
 8001724:	2e00      	cmp	r6, #0
 8001726:	dd63      	ble.n	80017f0 <__aeabi_dsub+0x11c>
 8001728:	2f00      	cmp	r7, #0
 800172a:	d000      	beq.n	800172e <__aeabi_dsub+0x5a>
 800172c:	e0b1      	b.n	8001892 <__aeabi_dsub+0x1be>
 800172e:	4663      	mov	r3, ip
 8001730:	4313      	orrs	r3, r2
 8001732:	d100      	bne.n	8001736 <__aeabi_dsub+0x62>
 8001734:	e123      	b.n	800197e <__aeabi_dsub+0x2aa>
 8001736:	1e73      	subs	r3, r6, #1
 8001738:	2b00      	cmp	r3, #0
 800173a:	d000      	beq.n	800173e <__aeabi_dsub+0x6a>
 800173c:	e1ba      	b.n	8001ab4 <__aeabi_dsub+0x3e0>
 800173e:	1a86      	subs	r6, r0, r2
 8001740:	4663      	mov	r3, ip
 8001742:	42b0      	cmp	r0, r6
 8001744:	4180      	sbcs	r0, r0
 8001746:	2501      	movs	r5, #1
 8001748:	1ac9      	subs	r1, r1, r3
 800174a:	4240      	negs	r0, r0
 800174c:	1a09      	subs	r1, r1, r0
 800174e:	020b      	lsls	r3, r1, #8
 8001750:	d400      	bmi.n	8001754 <__aeabi_dsub+0x80>
 8001752:	e147      	b.n	80019e4 <__aeabi_dsub+0x310>
 8001754:	0249      	lsls	r1, r1, #9
 8001756:	0a4b      	lsrs	r3, r1, #9
 8001758:	4698      	mov	r8, r3
 800175a:	4643      	mov	r3, r8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d100      	bne.n	8001762 <__aeabi_dsub+0x8e>
 8001760:	e189      	b.n	8001a76 <__aeabi_dsub+0x3a2>
 8001762:	4640      	mov	r0, r8
 8001764:	f000 fb66 	bl	8001e34 <__clzsi2>
 8001768:	0003      	movs	r3, r0
 800176a:	3b08      	subs	r3, #8
 800176c:	2b1f      	cmp	r3, #31
 800176e:	dd00      	ble.n	8001772 <__aeabi_dsub+0x9e>
 8001770:	e17c      	b.n	8001a6c <__aeabi_dsub+0x398>
 8001772:	2220      	movs	r2, #32
 8001774:	0030      	movs	r0, r6
 8001776:	1ad2      	subs	r2, r2, r3
 8001778:	4641      	mov	r1, r8
 800177a:	40d0      	lsrs	r0, r2
 800177c:	4099      	lsls	r1, r3
 800177e:	0002      	movs	r2, r0
 8001780:	409e      	lsls	r6, r3
 8001782:	430a      	orrs	r2, r1
 8001784:	429d      	cmp	r5, r3
 8001786:	dd00      	ble.n	800178a <__aeabi_dsub+0xb6>
 8001788:	e16a      	b.n	8001a60 <__aeabi_dsub+0x38c>
 800178a:	1b5d      	subs	r5, r3, r5
 800178c:	1c6b      	adds	r3, r5, #1
 800178e:	2b1f      	cmp	r3, #31
 8001790:	dd00      	ble.n	8001794 <__aeabi_dsub+0xc0>
 8001792:	e194      	b.n	8001abe <__aeabi_dsub+0x3ea>
 8001794:	2120      	movs	r1, #32
 8001796:	0010      	movs	r0, r2
 8001798:	0035      	movs	r5, r6
 800179a:	1ac9      	subs	r1, r1, r3
 800179c:	408e      	lsls	r6, r1
 800179e:	40da      	lsrs	r2, r3
 80017a0:	4088      	lsls	r0, r1
 80017a2:	40dd      	lsrs	r5, r3
 80017a4:	1e71      	subs	r1, r6, #1
 80017a6:	418e      	sbcs	r6, r1
 80017a8:	0011      	movs	r1, r2
 80017aa:	2207      	movs	r2, #7
 80017ac:	4328      	orrs	r0, r5
 80017ae:	2500      	movs	r5, #0
 80017b0:	4306      	orrs	r6, r0
 80017b2:	4032      	ands	r2, r6
 80017b4:	2a00      	cmp	r2, #0
 80017b6:	d009      	beq.n	80017cc <__aeabi_dsub+0xf8>
 80017b8:	230f      	movs	r3, #15
 80017ba:	4033      	ands	r3, r6
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d005      	beq.n	80017cc <__aeabi_dsub+0xf8>
 80017c0:	1d33      	adds	r3, r6, #4
 80017c2:	42b3      	cmp	r3, r6
 80017c4:	41b6      	sbcs	r6, r6
 80017c6:	4276      	negs	r6, r6
 80017c8:	1989      	adds	r1, r1, r6
 80017ca:	001e      	movs	r6, r3
 80017cc:	020b      	lsls	r3, r1, #8
 80017ce:	d400      	bmi.n	80017d2 <__aeabi_dsub+0xfe>
 80017d0:	e23d      	b.n	8001c4e <__aeabi_dsub+0x57a>
 80017d2:	1c6a      	adds	r2, r5, #1
 80017d4:	4b91      	ldr	r3, [pc, #580]	; (8001a1c <__aeabi_dsub+0x348>)
 80017d6:	0555      	lsls	r5, r2, #21
 80017d8:	0d6d      	lsrs	r5, r5, #21
 80017da:	429a      	cmp	r2, r3
 80017dc:	d100      	bne.n	80017e0 <__aeabi_dsub+0x10c>
 80017de:	e119      	b.n	8001a14 <__aeabi_dsub+0x340>
 80017e0:	4a8f      	ldr	r2, [pc, #572]	; (8001a20 <__aeabi_dsub+0x34c>)
 80017e2:	08f6      	lsrs	r6, r6, #3
 80017e4:	400a      	ands	r2, r1
 80017e6:	0757      	lsls	r7, r2, #29
 80017e8:	0252      	lsls	r2, r2, #9
 80017ea:	4337      	orrs	r7, r6
 80017ec:	0b12      	lsrs	r2, r2, #12
 80017ee:	e09b      	b.n	8001928 <__aeabi_dsub+0x254>
 80017f0:	2e00      	cmp	r6, #0
 80017f2:	d000      	beq.n	80017f6 <__aeabi_dsub+0x122>
 80017f4:	e0c5      	b.n	8001982 <__aeabi_dsub+0x2ae>
 80017f6:	1c6e      	adds	r6, r5, #1
 80017f8:	0576      	lsls	r6, r6, #21
 80017fa:	0d76      	lsrs	r6, r6, #21
 80017fc:	2e01      	cmp	r6, #1
 80017fe:	dc00      	bgt.n	8001802 <__aeabi_dsub+0x12e>
 8001800:	e148      	b.n	8001a94 <__aeabi_dsub+0x3c0>
 8001802:	4667      	mov	r7, ip
 8001804:	1a86      	subs	r6, r0, r2
 8001806:	1bcb      	subs	r3, r1, r7
 8001808:	42b0      	cmp	r0, r6
 800180a:	41bf      	sbcs	r7, r7
 800180c:	427f      	negs	r7, r7
 800180e:	46b8      	mov	r8, r7
 8001810:	001f      	movs	r7, r3
 8001812:	4643      	mov	r3, r8
 8001814:	1aff      	subs	r7, r7, r3
 8001816:	003b      	movs	r3, r7
 8001818:	46b8      	mov	r8, r7
 800181a:	021b      	lsls	r3, r3, #8
 800181c:	d500      	bpl.n	8001820 <__aeabi_dsub+0x14c>
 800181e:	e15f      	b.n	8001ae0 <__aeabi_dsub+0x40c>
 8001820:	4337      	orrs	r7, r6
 8001822:	d19a      	bne.n	800175a <__aeabi_dsub+0x86>
 8001824:	2200      	movs	r2, #0
 8001826:	2400      	movs	r4, #0
 8001828:	2500      	movs	r5, #0
 800182a:	e079      	b.n	8001920 <__aeabi_dsub+0x24c>
 800182c:	2e00      	cmp	r6, #0
 800182e:	dc00      	bgt.n	8001832 <__aeabi_dsub+0x15e>
 8001830:	e0fa      	b.n	8001a28 <__aeabi_dsub+0x354>
 8001832:	2f00      	cmp	r7, #0
 8001834:	d100      	bne.n	8001838 <__aeabi_dsub+0x164>
 8001836:	e08d      	b.n	8001954 <__aeabi_dsub+0x280>
 8001838:	4b78      	ldr	r3, [pc, #480]	; (8001a1c <__aeabi_dsub+0x348>)
 800183a:	429d      	cmp	r5, r3
 800183c:	d067      	beq.n	800190e <__aeabi_dsub+0x23a>
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	4667      	mov	r7, ip
 8001842:	041b      	lsls	r3, r3, #16
 8001844:	431f      	orrs	r7, r3
 8001846:	46bc      	mov	ip, r7
 8001848:	2e38      	cmp	r6, #56	; 0x38
 800184a:	dc00      	bgt.n	800184e <__aeabi_dsub+0x17a>
 800184c:	e152      	b.n	8001af4 <__aeabi_dsub+0x420>
 800184e:	4663      	mov	r3, ip
 8001850:	4313      	orrs	r3, r2
 8001852:	1e5a      	subs	r2, r3, #1
 8001854:	4193      	sbcs	r3, r2
 8001856:	181e      	adds	r6, r3, r0
 8001858:	4286      	cmp	r6, r0
 800185a:	4180      	sbcs	r0, r0
 800185c:	4240      	negs	r0, r0
 800185e:	1809      	adds	r1, r1, r0
 8001860:	020b      	lsls	r3, r1, #8
 8001862:	d400      	bmi.n	8001866 <__aeabi_dsub+0x192>
 8001864:	e0be      	b.n	80019e4 <__aeabi_dsub+0x310>
 8001866:	4b6d      	ldr	r3, [pc, #436]	; (8001a1c <__aeabi_dsub+0x348>)
 8001868:	3501      	adds	r5, #1
 800186a:	429d      	cmp	r5, r3
 800186c:	d100      	bne.n	8001870 <__aeabi_dsub+0x19c>
 800186e:	e0d2      	b.n	8001a16 <__aeabi_dsub+0x342>
 8001870:	4a6b      	ldr	r2, [pc, #428]	; (8001a20 <__aeabi_dsub+0x34c>)
 8001872:	0873      	lsrs	r3, r6, #1
 8001874:	400a      	ands	r2, r1
 8001876:	2101      	movs	r1, #1
 8001878:	400e      	ands	r6, r1
 800187a:	431e      	orrs	r6, r3
 800187c:	0851      	lsrs	r1, r2, #1
 800187e:	07d3      	lsls	r3, r2, #31
 8001880:	2207      	movs	r2, #7
 8001882:	431e      	orrs	r6, r3
 8001884:	4032      	ands	r2, r6
 8001886:	e795      	b.n	80017b4 <__aeabi_dsub+0xe0>
 8001888:	001e      	movs	r6, r3
 800188a:	4316      	orrs	r6, r2
 800188c:	d000      	beq.n	8001890 <__aeabi_dsub+0x1bc>
 800188e:	e745      	b.n	800171c <__aeabi_dsub+0x48>
 8001890:	e740      	b.n	8001714 <__aeabi_dsub+0x40>
 8001892:	4b62      	ldr	r3, [pc, #392]	; (8001a1c <__aeabi_dsub+0x348>)
 8001894:	429d      	cmp	r5, r3
 8001896:	d03a      	beq.n	800190e <__aeabi_dsub+0x23a>
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	4667      	mov	r7, ip
 800189c:	041b      	lsls	r3, r3, #16
 800189e:	431f      	orrs	r7, r3
 80018a0:	46bc      	mov	ip, r7
 80018a2:	2e38      	cmp	r6, #56	; 0x38
 80018a4:	dd00      	ble.n	80018a8 <__aeabi_dsub+0x1d4>
 80018a6:	e0eb      	b.n	8001a80 <__aeabi_dsub+0x3ac>
 80018a8:	2e1f      	cmp	r6, #31
 80018aa:	dc00      	bgt.n	80018ae <__aeabi_dsub+0x1da>
 80018ac:	e13a      	b.n	8001b24 <__aeabi_dsub+0x450>
 80018ae:	0033      	movs	r3, r6
 80018b0:	4667      	mov	r7, ip
 80018b2:	3b20      	subs	r3, #32
 80018b4:	40df      	lsrs	r7, r3
 80018b6:	003b      	movs	r3, r7
 80018b8:	2e20      	cmp	r6, #32
 80018ba:	d005      	beq.n	80018c8 <__aeabi_dsub+0x1f4>
 80018bc:	2740      	movs	r7, #64	; 0x40
 80018be:	1bbf      	subs	r7, r7, r6
 80018c0:	4666      	mov	r6, ip
 80018c2:	40be      	lsls	r6, r7
 80018c4:	4332      	orrs	r2, r6
 80018c6:	4690      	mov	r8, r2
 80018c8:	4646      	mov	r6, r8
 80018ca:	1e72      	subs	r2, r6, #1
 80018cc:	4196      	sbcs	r6, r2
 80018ce:	4333      	orrs	r3, r6
 80018d0:	e0da      	b.n	8001a88 <__aeabi_dsub+0x3b4>
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d100      	bne.n	80018d8 <__aeabi_dsub+0x204>
 80018d6:	e214      	b.n	8001d02 <__aeabi_dsub+0x62e>
 80018d8:	4663      	mov	r3, ip
 80018da:	4313      	orrs	r3, r2
 80018dc:	d100      	bne.n	80018e0 <__aeabi_dsub+0x20c>
 80018de:	e168      	b.n	8001bb2 <__aeabi_dsub+0x4de>
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	074e      	lsls	r6, r1, #29
 80018e4:	08c0      	lsrs	r0, r0, #3
 80018e6:	08c9      	lsrs	r1, r1, #3
 80018e8:	031b      	lsls	r3, r3, #12
 80018ea:	4306      	orrs	r6, r0
 80018ec:	4219      	tst	r1, r3
 80018ee:	d008      	beq.n	8001902 <__aeabi_dsub+0x22e>
 80018f0:	4660      	mov	r0, ip
 80018f2:	08c0      	lsrs	r0, r0, #3
 80018f4:	4218      	tst	r0, r3
 80018f6:	d104      	bne.n	8001902 <__aeabi_dsub+0x22e>
 80018f8:	4663      	mov	r3, ip
 80018fa:	0001      	movs	r1, r0
 80018fc:	08d2      	lsrs	r2, r2, #3
 80018fe:	075e      	lsls	r6, r3, #29
 8001900:	4316      	orrs	r6, r2
 8001902:	00f3      	lsls	r3, r6, #3
 8001904:	4699      	mov	r9, r3
 8001906:	00c9      	lsls	r1, r1, #3
 8001908:	0f72      	lsrs	r2, r6, #29
 800190a:	4d44      	ldr	r5, [pc, #272]	; (8001a1c <__aeabi_dsub+0x348>)
 800190c:	4311      	orrs	r1, r2
 800190e:	464b      	mov	r3, r9
 8001910:	08de      	lsrs	r6, r3, #3
 8001912:	4b42      	ldr	r3, [pc, #264]	; (8001a1c <__aeabi_dsub+0x348>)
 8001914:	074f      	lsls	r7, r1, #29
 8001916:	4337      	orrs	r7, r6
 8001918:	08ca      	lsrs	r2, r1, #3
 800191a:	429d      	cmp	r5, r3
 800191c:	d100      	bne.n	8001920 <__aeabi_dsub+0x24c>
 800191e:	e06e      	b.n	80019fe <__aeabi_dsub+0x32a>
 8001920:	0312      	lsls	r2, r2, #12
 8001922:	056d      	lsls	r5, r5, #21
 8001924:	0b12      	lsrs	r2, r2, #12
 8001926:	0d6d      	lsrs	r5, r5, #21
 8001928:	2100      	movs	r1, #0
 800192a:	0312      	lsls	r2, r2, #12
 800192c:	0b13      	lsrs	r3, r2, #12
 800192e:	0d0a      	lsrs	r2, r1, #20
 8001930:	0512      	lsls	r2, r2, #20
 8001932:	431a      	orrs	r2, r3
 8001934:	4b3b      	ldr	r3, [pc, #236]	; (8001a24 <__aeabi_dsub+0x350>)
 8001936:	052d      	lsls	r5, r5, #20
 8001938:	4013      	ands	r3, r2
 800193a:	432b      	orrs	r3, r5
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	07e4      	lsls	r4, r4, #31
 8001940:	085b      	lsrs	r3, r3, #1
 8001942:	4323      	orrs	r3, r4
 8001944:	0038      	movs	r0, r7
 8001946:	0019      	movs	r1, r3
 8001948:	bc3c      	pop	{r2, r3, r4, r5}
 800194a:	4690      	mov	r8, r2
 800194c:	4699      	mov	r9, r3
 800194e:	46a2      	mov	sl, r4
 8001950:	46ab      	mov	fp, r5
 8001952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001954:	4663      	mov	r3, ip
 8001956:	4313      	orrs	r3, r2
 8001958:	d011      	beq.n	800197e <__aeabi_dsub+0x2aa>
 800195a:	1e73      	subs	r3, r6, #1
 800195c:	2b00      	cmp	r3, #0
 800195e:	d000      	beq.n	8001962 <__aeabi_dsub+0x28e>
 8001960:	e107      	b.n	8001b72 <__aeabi_dsub+0x49e>
 8001962:	1886      	adds	r6, r0, r2
 8001964:	4286      	cmp	r6, r0
 8001966:	4180      	sbcs	r0, r0
 8001968:	4461      	add	r1, ip
 800196a:	4240      	negs	r0, r0
 800196c:	1809      	adds	r1, r1, r0
 800196e:	2501      	movs	r5, #1
 8001970:	020b      	lsls	r3, r1, #8
 8001972:	d537      	bpl.n	80019e4 <__aeabi_dsub+0x310>
 8001974:	2502      	movs	r5, #2
 8001976:	e77b      	b.n	8001870 <__aeabi_dsub+0x19c>
 8001978:	003e      	movs	r6, r7
 800197a:	4661      	mov	r1, ip
 800197c:	4691      	mov	r9, r2
 800197e:	0035      	movs	r5, r6
 8001980:	e7c5      	b.n	800190e <__aeabi_dsub+0x23a>
 8001982:	465c      	mov	r4, fp
 8001984:	2d00      	cmp	r5, #0
 8001986:	d000      	beq.n	800198a <__aeabi_dsub+0x2b6>
 8001988:	e0e1      	b.n	8001b4e <__aeabi_dsub+0x47a>
 800198a:	000b      	movs	r3, r1
 800198c:	4303      	orrs	r3, r0
 800198e:	d0f3      	beq.n	8001978 <__aeabi_dsub+0x2a4>
 8001990:	1c73      	adds	r3, r6, #1
 8001992:	d100      	bne.n	8001996 <__aeabi_dsub+0x2c2>
 8001994:	e1ac      	b.n	8001cf0 <__aeabi_dsub+0x61c>
 8001996:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <__aeabi_dsub+0x348>)
 8001998:	429f      	cmp	r7, r3
 800199a:	d100      	bne.n	800199e <__aeabi_dsub+0x2ca>
 800199c:	e13a      	b.n	8001c14 <__aeabi_dsub+0x540>
 800199e:	43f3      	mvns	r3, r6
 80019a0:	2b38      	cmp	r3, #56	; 0x38
 80019a2:	dd00      	ble.n	80019a6 <__aeabi_dsub+0x2d2>
 80019a4:	e16f      	b.n	8001c86 <__aeabi_dsub+0x5b2>
 80019a6:	2b1f      	cmp	r3, #31
 80019a8:	dd00      	ble.n	80019ac <__aeabi_dsub+0x2d8>
 80019aa:	e18c      	b.n	8001cc6 <__aeabi_dsub+0x5f2>
 80019ac:	2520      	movs	r5, #32
 80019ae:	000e      	movs	r6, r1
 80019b0:	1aed      	subs	r5, r5, r3
 80019b2:	40ae      	lsls	r6, r5
 80019b4:	46b0      	mov	r8, r6
 80019b6:	0006      	movs	r6, r0
 80019b8:	46aa      	mov	sl, r5
 80019ba:	40de      	lsrs	r6, r3
 80019bc:	4645      	mov	r5, r8
 80019be:	4335      	orrs	r5, r6
 80019c0:	002e      	movs	r6, r5
 80019c2:	4655      	mov	r5, sl
 80019c4:	40d9      	lsrs	r1, r3
 80019c6:	40a8      	lsls	r0, r5
 80019c8:	4663      	mov	r3, ip
 80019ca:	1e45      	subs	r5, r0, #1
 80019cc:	41a8      	sbcs	r0, r5
 80019ce:	1a5b      	subs	r3, r3, r1
 80019d0:	469c      	mov	ip, r3
 80019d2:	4330      	orrs	r0, r6
 80019d4:	1a16      	subs	r6, r2, r0
 80019d6:	42b2      	cmp	r2, r6
 80019d8:	4192      	sbcs	r2, r2
 80019da:	4663      	mov	r3, ip
 80019dc:	4252      	negs	r2, r2
 80019de:	1a99      	subs	r1, r3, r2
 80019e0:	003d      	movs	r5, r7
 80019e2:	e6b4      	b.n	800174e <__aeabi_dsub+0x7a>
 80019e4:	2207      	movs	r2, #7
 80019e6:	4032      	ands	r2, r6
 80019e8:	2a00      	cmp	r2, #0
 80019ea:	d000      	beq.n	80019ee <__aeabi_dsub+0x31a>
 80019ec:	e6e4      	b.n	80017b8 <__aeabi_dsub+0xe4>
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <__aeabi_dsub+0x348>)
 80019f0:	08f6      	lsrs	r6, r6, #3
 80019f2:	074f      	lsls	r7, r1, #29
 80019f4:	4337      	orrs	r7, r6
 80019f6:	08ca      	lsrs	r2, r1, #3
 80019f8:	429d      	cmp	r5, r3
 80019fa:	d000      	beq.n	80019fe <__aeabi_dsub+0x32a>
 80019fc:	e790      	b.n	8001920 <__aeabi_dsub+0x24c>
 80019fe:	003b      	movs	r3, r7
 8001a00:	4313      	orrs	r3, r2
 8001a02:	d100      	bne.n	8001a06 <__aeabi_dsub+0x332>
 8001a04:	e1a6      	b.n	8001d54 <__aeabi_dsub+0x680>
 8001a06:	2380      	movs	r3, #128	; 0x80
 8001a08:	031b      	lsls	r3, r3, #12
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	0312      	lsls	r2, r2, #12
 8001a0e:	0b12      	lsrs	r2, r2, #12
 8001a10:	4d02      	ldr	r5, [pc, #8]	; (8001a1c <__aeabi_dsub+0x348>)
 8001a12:	e789      	b.n	8001928 <__aeabi_dsub+0x254>
 8001a14:	0015      	movs	r5, r2
 8001a16:	2200      	movs	r2, #0
 8001a18:	2700      	movs	r7, #0
 8001a1a:	e785      	b.n	8001928 <__aeabi_dsub+0x254>
 8001a1c:	000007ff 	.word	0x000007ff
 8001a20:	ff7fffff 	.word	0xff7fffff
 8001a24:	800fffff 	.word	0x800fffff
 8001a28:	2e00      	cmp	r6, #0
 8001a2a:	d000      	beq.n	8001a2e <__aeabi_dsub+0x35a>
 8001a2c:	e0c7      	b.n	8001bbe <__aeabi_dsub+0x4ea>
 8001a2e:	1c6b      	adds	r3, r5, #1
 8001a30:	055e      	lsls	r6, r3, #21
 8001a32:	0d76      	lsrs	r6, r6, #21
 8001a34:	2e01      	cmp	r6, #1
 8001a36:	dc00      	bgt.n	8001a3a <__aeabi_dsub+0x366>
 8001a38:	e0f0      	b.n	8001c1c <__aeabi_dsub+0x548>
 8001a3a:	4dc8      	ldr	r5, [pc, #800]	; (8001d5c <__aeabi_dsub+0x688>)
 8001a3c:	42ab      	cmp	r3, r5
 8001a3e:	d100      	bne.n	8001a42 <__aeabi_dsub+0x36e>
 8001a40:	e0b9      	b.n	8001bb6 <__aeabi_dsub+0x4e2>
 8001a42:	1885      	adds	r5, r0, r2
 8001a44:	000a      	movs	r2, r1
 8001a46:	4285      	cmp	r5, r0
 8001a48:	4189      	sbcs	r1, r1
 8001a4a:	4462      	add	r2, ip
 8001a4c:	4249      	negs	r1, r1
 8001a4e:	1851      	adds	r1, r2, r1
 8001a50:	2207      	movs	r2, #7
 8001a52:	07ce      	lsls	r6, r1, #31
 8001a54:	086d      	lsrs	r5, r5, #1
 8001a56:	432e      	orrs	r6, r5
 8001a58:	0849      	lsrs	r1, r1, #1
 8001a5a:	4032      	ands	r2, r6
 8001a5c:	001d      	movs	r5, r3
 8001a5e:	e6a9      	b.n	80017b4 <__aeabi_dsub+0xe0>
 8001a60:	49bf      	ldr	r1, [pc, #764]	; (8001d60 <__aeabi_dsub+0x68c>)
 8001a62:	1aed      	subs	r5, r5, r3
 8001a64:	4011      	ands	r1, r2
 8001a66:	2207      	movs	r2, #7
 8001a68:	4032      	ands	r2, r6
 8001a6a:	e6a3      	b.n	80017b4 <__aeabi_dsub+0xe0>
 8001a6c:	0032      	movs	r2, r6
 8001a6e:	3828      	subs	r0, #40	; 0x28
 8001a70:	4082      	lsls	r2, r0
 8001a72:	2600      	movs	r6, #0
 8001a74:	e686      	b.n	8001784 <__aeabi_dsub+0xb0>
 8001a76:	0030      	movs	r0, r6
 8001a78:	f000 f9dc 	bl	8001e34 <__clzsi2>
 8001a7c:	3020      	adds	r0, #32
 8001a7e:	e673      	b.n	8001768 <__aeabi_dsub+0x94>
 8001a80:	4663      	mov	r3, ip
 8001a82:	4313      	orrs	r3, r2
 8001a84:	1e5a      	subs	r2, r3, #1
 8001a86:	4193      	sbcs	r3, r2
 8001a88:	1ac6      	subs	r6, r0, r3
 8001a8a:	42b0      	cmp	r0, r6
 8001a8c:	4180      	sbcs	r0, r0
 8001a8e:	4240      	negs	r0, r0
 8001a90:	1a09      	subs	r1, r1, r0
 8001a92:	e65c      	b.n	800174e <__aeabi_dsub+0x7a>
 8001a94:	000e      	movs	r6, r1
 8001a96:	4667      	mov	r7, ip
 8001a98:	4306      	orrs	r6, r0
 8001a9a:	4317      	orrs	r7, r2
 8001a9c:	2d00      	cmp	r5, #0
 8001a9e:	d15e      	bne.n	8001b5e <__aeabi_dsub+0x48a>
 8001aa0:	2e00      	cmp	r6, #0
 8001aa2:	d000      	beq.n	8001aa6 <__aeabi_dsub+0x3d2>
 8001aa4:	e0f3      	b.n	8001c8e <__aeabi_dsub+0x5ba>
 8001aa6:	2f00      	cmp	r7, #0
 8001aa8:	d100      	bne.n	8001aac <__aeabi_dsub+0x3d8>
 8001aaa:	e11e      	b.n	8001cea <__aeabi_dsub+0x616>
 8001aac:	465c      	mov	r4, fp
 8001aae:	4661      	mov	r1, ip
 8001ab0:	4691      	mov	r9, r2
 8001ab2:	e72c      	b.n	800190e <__aeabi_dsub+0x23a>
 8001ab4:	4fa9      	ldr	r7, [pc, #676]	; (8001d5c <__aeabi_dsub+0x688>)
 8001ab6:	42be      	cmp	r6, r7
 8001ab8:	d07b      	beq.n	8001bb2 <__aeabi_dsub+0x4de>
 8001aba:	001e      	movs	r6, r3
 8001abc:	e6f1      	b.n	80018a2 <__aeabi_dsub+0x1ce>
 8001abe:	0010      	movs	r0, r2
 8001ac0:	3d1f      	subs	r5, #31
 8001ac2:	40e8      	lsrs	r0, r5
 8001ac4:	2b20      	cmp	r3, #32
 8001ac6:	d003      	beq.n	8001ad0 <__aeabi_dsub+0x3fc>
 8001ac8:	2140      	movs	r1, #64	; 0x40
 8001aca:	1acb      	subs	r3, r1, r3
 8001acc:	409a      	lsls	r2, r3
 8001ace:	4316      	orrs	r6, r2
 8001ad0:	1e73      	subs	r3, r6, #1
 8001ad2:	419e      	sbcs	r6, r3
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	4306      	orrs	r6, r0
 8001ad8:	4032      	ands	r2, r6
 8001ada:	2100      	movs	r1, #0
 8001adc:	2500      	movs	r5, #0
 8001ade:	e783      	b.n	80019e8 <__aeabi_dsub+0x314>
 8001ae0:	1a16      	subs	r6, r2, r0
 8001ae2:	4663      	mov	r3, ip
 8001ae4:	42b2      	cmp	r2, r6
 8001ae6:	4180      	sbcs	r0, r0
 8001ae8:	1a59      	subs	r1, r3, r1
 8001aea:	4240      	negs	r0, r0
 8001aec:	1a0b      	subs	r3, r1, r0
 8001aee:	4698      	mov	r8, r3
 8001af0:	465c      	mov	r4, fp
 8001af2:	e632      	b.n	800175a <__aeabi_dsub+0x86>
 8001af4:	2e1f      	cmp	r6, #31
 8001af6:	dd00      	ble.n	8001afa <__aeabi_dsub+0x426>
 8001af8:	e0ab      	b.n	8001c52 <__aeabi_dsub+0x57e>
 8001afa:	2720      	movs	r7, #32
 8001afc:	1bbb      	subs	r3, r7, r6
 8001afe:	469a      	mov	sl, r3
 8001b00:	4663      	mov	r3, ip
 8001b02:	4657      	mov	r7, sl
 8001b04:	40bb      	lsls	r3, r7
 8001b06:	4699      	mov	r9, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	464f      	mov	r7, r9
 8001b0c:	40f3      	lsrs	r3, r6
 8001b0e:	431f      	orrs	r7, r3
 8001b10:	003b      	movs	r3, r7
 8001b12:	4657      	mov	r7, sl
 8001b14:	40ba      	lsls	r2, r7
 8001b16:	1e57      	subs	r7, r2, #1
 8001b18:	41ba      	sbcs	r2, r7
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	4662      	mov	r2, ip
 8001b1e:	40f2      	lsrs	r2, r6
 8001b20:	1889      	adds	r1, r1, r2
 8001b22:	e698      	b.n	8001856 <__aeabi_dsub+0x182>
 8001b24:	2720      	movs	r7, #32
 8001b26:	1bbb      	subs	r3, r7, r6
 8001b28:	469a      	mov	sl, r3
 8001b2a:	4663      	mov	r3, ip
 8001b2c:	4657      	mov	r7, sl
 8001b2e:	40bb      	lsls	r3, r7
 8001b30:	4699      	mov	r9, r3
 8001b32:	0013      	movs	r3, r2
 8001b34:	464f      	mov	r7, r9
 8001b36:	40f3      	lsrs	r3, r6
 8001b38:	431f      	orrs	r7, r3
 8001b3a:	003b      	movs	r3, r7
 8001b3c:	4657      	mov	r7, sl
 8001b3e:	40ba      	lsls	r2, r7
 8001b40:	1e57      	subs	r7, r2, #1
 8001b42:	41ba      	sbcs	r2, r7
 8001b44:	4313      	orrs	r3, r2
 8001b46:	4662      	mov	r2, ip
 8001b48:	40f2      	lsrs	r2, r6
 8001b4a:	1a89      	subs	r1, r1, r2
 8001b4c:	e79c      	b.n	8001a88 <__aeabi_dsub+0x3b4>
 8001b4e:	4b83      	ldr	r3, [pc, #524]	; (8001d5c <__aeabi_dsub+0x688>)
 8001b50:	429f      	cmp	r7, r3
 8001b52:	d05f      	beq.n	8001c14 <__aeabi_dsub+0x540>
 8001b54:	2580      	movs	r5, #128	; 0x80
 8001b56:	042d      	lsls	r5, r5, #16
 8001b58:	4273      	negs	r3, r6
 8001b5a:	4329      	orrs	r1, r5
 8001b5c:	e720      	b.n	80019a0 <__aeabi_dsub+0x2cc>
 8001b5e:	2e00      	cmp	r6, #0
 8001b60:	d10c      	bne.n	8001b7c <__aeabi_dsub+0x4a8>
 8001b62:	2f00      	cmp	r7, #0
 8001b64:	d100      	bne.n	8001b68 <__aeabi_dsub+0x494>
 8001b66:	e0d0      	b.n	8001d0a <__aeabi_dsub+0x636>
 8001b68:	465c      	mov	r4, fp
 8001b6a:	4661      	mov	r1, ip
 8001b6c:	4691      	mov	r9, r2
 8001b6e:	4d7b      	ldr	r5, [pc, #492]	; (8001d5c <__aeabi_dsub+0x688>)
 8001b70:	e6cd      	b.n	800190e <__aeabi_dsub+0x23a>
 8001b72:	4f7a      	ldr	r7, [pc, #488]	; (8001d5c <__aeabi_dsub+0x688>)
 8001b74:	42be      	cmp	r6, r7
 8001b76:	d01c      	beq.n	8001bb2 <__aeabi_dsub+0x4de>
 8001b78:	001e      	movs	r6, r3
 8001b7a:	e665      	b.n	8001848 <__aeabi_dsub+0x174>
 8001b7c:	2f00      	cmp	r7, #0
 8001b7e:	d018      	beq.n	8001bb2 <__aeabi_dsub+0x4de>
 8001b80:	08c0      	lsrs	r0, r0, #3
 8001b82:	074e      	lsls	r6, r1, #29
 8001b84:	4306      	orrs	r6, r0
 8001b86:	2080      	movs	r0, #128	; 0x80
 8001b88:	08c9      	lsrs	r1, r1, #3
 8001b8a:	0300      	lsls	r0, r0, #12
 8001b8c:	4201      	tst	r1, r0
 8001b8e:	d008      	beq.n	8001ba2 <__aeabi_dsub+0x4ce>
 8001b90:	4663      	mov	r3, ip
 8001b92:	08dc      	lsrs	r4, r3, #3
 8001b94:	4204      	tst	r4, r0
 8001b96:	d104      	bne.n	8001ba2 <__aeabi_dsub+0x4ce>
 8001b98:	0021      	movs	r1, r4
 8001b9a:	46da      	mov	sl, fp
 8001b9c:	08d2      	lsrs	r2, r2, #3
 8001b9e:	075e      	lsls	r6, r3, #29
 8001ba0:	4316      	orrs	r6, r2
 8001ba2:	00f3      	lsls	r3, r6, #3
 8001ba4:	4699      	mov	r9, r3
 8001ba6:	2401      	movs	r4, #1
 8001ba8:	4653      	mov	r3, sl
 8001baa:	00c9      	lsls	r1, r1, #3
 8001bac:	0f72      	lsrs	r2, r6, #29
 8001bae:	4311      	orrs	r1, r2
 8001bb0:	401c      	ands	r4, r3
 8001bb2:	4d6a      	ldr	r5, [pc, #424]	; (8001d5c <__aeabi_dsub+0x688>)
 8001bb4:	e6ab      	b.n	800190e <__aeabi_dsub+0x23a>
 8001bb6:	001d      	movs	r5, r3
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2700      	movs	r7, #0
 8001bbc:	e6b4      	b.n	8001928 <__aeabi_dsub+0x254>
 8001bbe:	2d00      	cmp	r5, #0
 8001bc0:	d159      	bne.n	8001c76 <__aeabi_dsub+0x5a2>
 8001bc2:	000b      	movs	r3, r1
 8001bc4:	4303      	orrs	r3, r0
 8001bc6:	d100      	bne.n	8001bca <__aeabi_dsub+0x4f6>
 8001bc8:	e6d6      	b.n	8001978 <__aeabi_dsub+0x2a4>
 8001bca:	1c73      	adds	r3, r6, #1
 8001bcc:	d100      	bne.n	8001bd0 <__aeabi_dsub+0x4fc>
 8001bce:	e0b2      	b.n	8001d36 <__aeabi_dsub+0x662>
 8001bd0:	4b62      	ldr	r3, [pc, #392]	; (8001d5c <__aeabi_dsub+0x688>)
 8001bd2:	429f      	cmp	r7, r3
 8001bd4:	d01e      	beq.n	8001c14 <__aeabi_dsub+0x540>
 8001bd6:	43f3      	mvns	r3, r6
 8001bd8:	2b38      	cmp	r3, #56	; 0x38
 8001bda:	dc6f      	bgt.n	8001cbc <__aeabi_dsub+0x5e8>
 8001bdc:	2b1f      	cmp	r3, #31
 8001bde:	dd00      	ble.n	8001be2 <__aeabi_dsub+0x50e>
 8001be0:	e097      	b.n	8001d12 <__aeabi_dsub+0x63e>
 8001be2:	2520      	movs	r5, #32
 8001be4:	000e      	movs	r6, r1
 8001be6:	1aed      	subs	r5, r5, r3
 8001be8:	40ae      	lsls	r6, r5
 8001bea:	46b0      	mov	r8, r6
 8001bec:	0006      	movs	r6, r0
 8001bee:	46aa      	mov	sl, r5
 8001bf0:	40de      	lsrs	r6, r3
 8001bf2:	4645      	mov	r5, r8
 8001bf4:	4335      	orrs	r5, r6
 8001bf6:	002e      	movs	r6, r5
 8001bf8:	4655      	mov	r5, sl
 8001bfa:	40a8      	lsls	r0, r5
 8001bfc:	40d9      	lsrs	r1, r3
 8001bfe:	1e45      	subs	r5, r0, #1
 8001c00:	41a8      	sbcs	r0, r5
 8001c02:	448c      	add	ip, r1
 8001c04:	4306      	orrs	r6, r0
 8001c06:	18b6      	adds	r6, r6, r2
 8001c08:	4296      	cmp	r6, r2
 8001c0a:	4192      	sbcs	r2, r2
 8001c0c:	4251      	negs	r1, r2
 8001c0e:	4461      	add	r1, ip
 8001c10:	003d      	movs	r5, r7
 8001c12:	e625      	b.n	8001860 <__aeabi_dsub+0x18c>
 8001c14:	003d      	movs	r5, r7
 8001c16:	4661      	mov	r1, ip
 8001c18:	4691      	mov	r9, r2
 8001c1a:	e678      	b.n	800190e <__aeabi_dsub+0x23a>
 8001c1c:	000b      	movs	r3, r1
 8001c1e:	4303      	orrs	r3, r0
 8001c20:	2d00      	cmp	r5, #0
 8001c22:	d000      	beq.n	8001c26 <__aeabi_dsub+0x552>
 8001c24:	e655      	b.n	80018d2 <__aeabi_dsub+0x1fe>
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f5      	beq.n	8001c16 <__aeabi_dsub+0x542>
 8001c2a:	4663      	mov	r3, ip
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	d100      	bne.n	8001c32 <__aeabi_dsub+0x55e>
 8001c30:	e66d      	b.n	800190e <__aeabi_dsub+0x23a>
 8001c32:	1886      	adds	r6, r0, r2
 8001c34:	4286      	cmp	r6, r0
 8001c36:	4180      	sbcs	r0, r0
 8001c38:	4461      	add	r1, ip
 8001c3a:	4240      	negs	r0, r0
 8001c3c:	1809      	adds	r1, r1, r0
 8001c3e:	2200      	movs	r2, #0
 8001c40:	020b      	lsls	r3, r1, #8
 8001c42:	d400      	bmi.n	8001c46 <__aeabi_dsub+0x572>
 8001c44:	e6d0      	b.n	80019e8 <__aeabi_dsub+0x314>
 8001c46:	4b46      	ldr	r3, [pc, #280]	; (8001d60 <__aeabi_dsub+0x68c>)
 8001c48:	3501      	adds	r5, #1
 8001c4a:	4019      	ands	r1, r3
 8001c4c:	e5b2      	b.n	80017b4 <__aeabi_dsub+0xe0>
 8001c4e:	46b1      	mov	r9, r6
 8001c50:	e65d      	b.n	800190e <__aeabi_dsub+0x23a>
 8001c52:	0033      	movs	r3, r6
 8001c54:	4667      	mov	r7, ip
 8001c56:	3b20      	subs	r3, #32
 8001c58:	40df      	lsrs	r7, r3
 8001c5a:	003b      	movs	r3, r7
 8001c5c:	2e20      	cmp	r6, #32
 8001c5e:	d005      	beq.n	8001c6c <__aeabi_dsub+0x598>
 8001c60:	2740      	movs	r7, #64	; 0x40
 8001c62:	1bbf      	subs	r7, r7, r6
 8001c64:	4666      	mov	r6, ip
 8001c66:	40be      	lsls	r6, r7
 8001c68:	4332      	orrs	r2, r6
 8001c6a:	4690      	mov	r8, r2
 8001c6c:	4646      	mov	r6, r8
 8001c6e:	1e72      	subs	r2, r6, #1
 8001c70:	4196      	sbcs	r6, r2
 8001c72:	4333      	orrs	r3, r6
 8001c74:	e5ef      	b.n	8001856 <__aeabi_dsub+0x182>
 8001c76:	4b39      	ldr	r3, [pc, #228]	; (8001d5c <__aeabi_dsub+0x688>)
 8001c78:	429f      	cmp	r7, r3
 8001c7a:	d0cb      	beq.n	8001c14 <__aeabi_dsub+0x540>
 8001c7c:	2580      	movs	r5, #128	; 0x80
 8001c7e:	042d      	lsls	r5, r5, #16
 8001c80:	4273      	negs	r3, r6
 8001c82:	4329      	orrs	r1, r5
 8001c84:	e7a8      	b.n	8001bd8 <__aeabi_dsub+0x504>
 8001c86:	4308      	orrs	r0, r1
 8001c88:	1e41      	subs	r1, r0, #1
 8001c8a:	4188      	sbcs	r0, r1
 8001c8c:	e6a2      	b.n	80019d4 <__aeabi_dsub+0x300>
 8001c8e:	2f00      	cmp	r7, #0
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x5c0>
 8001c92:	e63c      	b.n	800190e <__aeabi_dsub+0x23a>
 8001c94:	4663      	mov	r3, ip
 8001c96:	1a86      	subs	r6, r0, r2
 8001c98:	1acf      	subs	r7, r1, r3
 8001c9a:	42b0      	cmp	r0, r6
 8001c9c:	419b      	sbcs	r3, r3
 8001c9e:	425b      	negs	r3, r3
 8001ca0:	1afb      	subs	r3, r7, r3
 8001ca2:	4698      	mov	r8, r3
 8001ca4:	021b      	lsls	r3, r3, #8
 8001ca6:	d54e      	bpl.n	8001d46 <__aeabi_dsub+0x672>
 8001ca8:	1a16      	subs	r6, r2, r0
 8001caa:	4663      	mov	r3, ip
 8001cac:	42b2      	cmp	r2, r6
 8001cae:	4192      	sbcs	r2, r2
 8001cb0:	1a59      	subs	r1, r3, r1
 8001cb2:	4252      	negs	r2, r2
 8001cb4:	1a89      	subs	r1, r1, r2
 8001cb6:	465c      	mov	r4, fp
 8001cb8:	2200      	movs	r2, #0
 8001cba:	e57b      	b.n	80017b4 <__aeabi_dsub+0xe0>
 8001cbc:	4301      	orrs	r1, r0
 8001cbe:	000e      	movs	r6, r1
 8001cc0:	1e71      	subs	r1, r6, #1
 8001cc2:	418e      	sbcs	r6, r1
 8001cc4:	e79f      	b.n	8001c06 <__aeabi_dsub+0x532>
 8001cc6:	001d      	movs	r5, r3
 8001cc8:	000e      	movs	r6, r1
 8001cca:	3d20      	subs	r5, #32
 8001ccc:	40ee      	lsrs	r6, r5
 8001cce:	46b0      	mov	r8, r6
 8001cd0:	2b20      	cmp	r3, #32
 8001cd2:	d004      	beq.n	8001cde <__aeabi_dsub+0x60a>
 8001cd4:	2540      	movs	r5, #64	; 0x40
 8001cd6:	1aeb      	subs	r3, r5, r3
 8001cd8:	4099      	lsls	r1, r3
 8001cda:	4308      	orrs	r0, r1
 8001cdc:	4681      	mov	r9, r0
 8001cde:	4648      	mov	r0, r9
 8001ce0:	4643      	mov	r3, r8
 8001ce2:	1e41      	subs	r1, r0, #1
 8001ce4:	4188      	sbcs	r0, r1
 8001ce6:	4318      	orrs	r0, r3
 8001ce8:	e674      	b.n	80019d4 <__aeabi_dsub+0x300>
 8001cea:	2200      	movs	r2, #0
 8001cec:	2400      	movs	r4, #0
 8001cee:	e617      	b.n	8001920 <__aeabi_dsub+0x24c>
 8001cf0:	1a16      	subs	r6, r2, r0
 8001cf2:	4663      	mov	r3, ip
 8001cf4:	42b2      	cmp	r2, r6
 8001cf6:	4192      	sbcs	r2, r2
 8001cf8:	1a59      	subs	r1, r3, r1
 8001cfa:	4252      	negs	r2, r2
 8001cfc:	1a89      	subs	r1, r1, r2
 8001cfe:	003d      	movs	r5, r7
 8001d00:	e525      	b.n	800174e <__aeabi_dsub+0x7a>
 8001d02:	4661      	mov	r1, ip
 8001d04:	4691      	mov	r9, r2
 8001d06:	4d15      	ldr	r5, [pc, #84]	; (8001d5c <__aeabi_dsub+0x688>)
 8001d08:	e601      	b.n	800190e <__aeabi_dsub+0x23a>
 8001d0a:	2280      	movs	r2, #128	; 0x80
 8001d0c:	2400      	movs	r4, #0
 8001d0e:	0312      	lsls	r2, r2, #12
 8001d10:	e679      	b.n	8001a06 <__aeabi_dsub+0x332>
 8001d12:	001d      	movs	r5, r3
 8001d14:	000e      	movs	r6, r1
 8001d16:	3d20      	subs	r5, #32
 8001d18:	40ee      	lsrs	r6, r5
 8001d1a:	46b0      	mov	r8, r6
 8001d1c:	2b20      	cmp	r3, #32
 8001d1e:	d004      	beq.n	8001d2a <__aeabi_dsub+0x656>
 8001d20:	2540      	movs	r5, #64	; 0x40
 8001d22:	1aeb      	subs	r3, r5, r3
 8001d24:	4099      	lsls	r1, r3
 8001d26:	4308      	orrs	r0, r1
 8001d28:	4681      	mov	r9, r0
 8001d2a:	464e      	mov	r6, r9
 8001d2c:	4643      	mov	r3, r8
 8001d2e:	1e71      	subs	r1, r6, #1
 8001d30:	418e      	sbcs	r6, r1
 8001d32:	431e      	orrs	r6, r3
 8001d34:	e767      	b.n	8001c06 <__aeabi_dsub+0x532>
 8001d36:	1886      	adds	r6, r0, r2
 8001d38:	4296      	cmp	r6, r2
 8001d3a:	419b      	sbcs	r3, r3
 8001d3c:	4461      	add	r1, ip
 8001d3e:	425b      	negs	r3, r3
 8001d40:	18c9      	adds	r1, r1, r3
 8001d42:	003d      	movs	r5, r7
 8001d44:	e58c      	b.n	8001860 <__aeabi_dsub+0x18c>
 8001d46:	4647      	mov	r7, r8
 8001d48:	4337      	orrs	r7, r6
 8001d4a:	d0ce      	beq.n	8001cea <__aeabi_dsub+0x616>
 8001d4c:	2207      	movs	r2, #7
 8001d4e:	4641      	mov	r1, r8
 8001d50:	4032      	ands	r2, r6
 8001d52:	e649      	b.n	80019e8 <__aeabi_dsub+0x314>
 8001d54:	2700      	movs	r7, #0
 8001d56:	003a      	movs	r2, r7
 8001d58:	e5e6      	b.n	8001928 <__aeabi_dsub+0x254>
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	000007ff 	.word	0x000007ff
 8001d60:	ff7fffff 	.word	0xff7fffff

08001d64 <__aeabi_d2iz>:
 8001d64:	b530      	push	{r4, r5, lr}
 8001d66:	4d14      	ldr	r5, [pc, #80]	; (8001db8 <__aeabi_d2iz+0x54>)
 8001d68:	030a      	lsls	r2, r1, #12
 8001d6a:	004b      	lsls	r3, r1, #1
 8001d6c:	0b12      	lsrs	r2, r2, #12
 8001d6e:	0d5b      	lsrs	r3, r3, #21
 8001d70:	0fc9      	lsrs	r1, r1, #31
 8001d72:	2400      	movs	r4, #0
 8001d74:	42ab      	cmp	r3, r5
 8001d76:	dd11      	ble.n	8001d9c <__aeabi_d2iz+0x38>
 8001d78:	4c10      	ldr	r4, [pc, #64]	; (8001dbc <__aeabi_d2iz+0x58>)
 8001d7a:	42a3      	cmp	r3, r4
 8001d7c:	dc10      	bgt.n	8001da0 <__aeabi_d2iz+0x3c>
 8001d7e:	2480      	movs	r4, #128	; 0x80
 8001d80:	0364      	lsls	r4, r4, #13
 8001d82:	4322      	orrs	r2, r4
 8001d84:	4c0e      	ldr	r4, [pc, #56]	; (8001dc0 <__aeabi_d2iz+0x5c>)
 8001d86:	1ae4      	subs	r4, r4, r3
 8001d88:	2c1f      	cmp	r4, #31
 8001d8a:	dd0c      	ble.n	8001da6 <__aeabi_d2iz+0x42>
 8001d8c:	480d      	ldr	r0, [pc, #52]	; (8001dc4 <__aeabi_d2iz+0x60>)
 8001d8e:	1ac3      	subs	r3, r0, r3
 8001d90:	40da      	lsrs	r2, r3
 8001d92:	0013      	movs	r3, r2
 8001d94:	425c      	negs	r4, r3
 8001d96:	2900      	cmp	r1, #0
 8001d98:	d100      	bne.n	8001d9c <__aeabi_d2iz+0x38>
 8001d9a:	001c      	movs	r4, r3
 8001d9c:	0020      	movs	r0, r4
 8001d9e:	bd30      	pop	{r4, r5, pc}
 8001da0:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <__aeabi_d2iz+0x64>)
 8001da2:	18cc      	adds	r4, r1, r3
 8001da4:	e7fa      	b.n	8001d9c <__aeabi_d2iz+0x38>
 8001da6:	4d09      	ldr	r5, [pc, #36]	; (8001dcc <__aeabi_d2iz+0x68>)
 8001da8:	40e0      	lsrs	r0, r4
 8001daa:	46ac      	mov	ip, r5
 8001dac:	4463      	add	r3, ip
 8001dae:	409a      	lsls	r2, r3
 8001db0:	0013      	movs	r3, r2
 8001db2:	4303      	orrs	r3, r0
 8001db4:	e7ee      	b.n	8001d94 <__aeabi_d2iz+0x30>
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	000003fe 	.word	0x000003fe
 8001dbc:	0000041d 	.word	0x0000041d
 8001dc0:	00000433 	.word	0x00000433
 8001dc4:	00000413 	.word	0x00000413
 8001dc8:	7fffffff 	.word	0x7fffffff
 8001dcc:	fffffbed 	.word	0xfffffbed

08001dd0 <__aeabi_ui2d>:
 8001dd0:	b510      	push	{r4, lr}
 8001dd2:	1e04      	subs	r4, r0, #0
 8001dd4:	d025      	beq.n	8001e22 <__aeabi_ui2d+0x52>
 8001dd6:	f000 f82d 	bl	8001e34 <__clzsi2>
 8001dda:	4b14      	ldr	r3, [pc, #80]	; (8001e2c <__aeabi_ui2d+0x5c>)
 8001ddc:	1a1b      	subs	r3, r3, r0
 8001dde:	055b      	lsls	r3, r3, #21
 8001de0:	0d5b      	lsrs	r3, r3, #21
 8001de2:	280a      	cmp	r0, #10
 8001de4:	dd12      	ble.n	8001e0c <__aeabi_ui2d+0x3c>
 8001de6:	380b      	subs	r0, #11
 8001de8:	4084      	lsls	r4, r0
 8001dea:	2200      	movs	r2, #0
 8001dec:	0324      	lsls	r4, r4, #12
 8001dee:	0b24      	lsrs	r4, r4, #12
 8001df0:	2100      	movs	r1, #0
 8001df2:	0010      	movs	r0, r2
 8001df4:	0324      	lsls	r4, r4, #12
 8001df6:	0d0a      	lsrs	r2, r1, #20
 8001df8:	0b24      	lsrs	r4, r4, #12
 8001dfa:	0512      	lsls	r2, r2, #20
 8001dfc:	4322      	orrs	r2, r4
 8001dfe:	4c0c      	ldr	r4, [pc, #48]	; (8001e30 <__aeabi_ui2d+0x60>)
 8001e00:	051b      	lsls	r3, r3, #20
 8001e02:	4022      	ands	r2, r4
 8001e04:	4313      	orrs	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	0859      	lsrs	r1, r3, #1
 8001e0a:	bd10      	pop	{r4, pc}
 8001e0c:	0002      	movs	r2, r0
 8001e0e:	0021      	movs	r1, r4
 8001e10:	3215      	adds	r2, #21
 8001e12:	4091      	lsls	r1, r2
 8001e14:	000a      	movs	r2, r1
 8001e16:	210b      	movs	r1, #11
 8001e18:	1a08      	subs	r0, r1, r0
 8001e1a:	40c4      	lsrs	r4, r0
 8001e1c:	0324      	lsls	r4, r4, #12
 8001e1e:	0b24      	lsrs	r4, r4, #12
 8001e20:	e7e6      	b.n	8001df0 <__aeabi_ui2d+0x20>
 8001e22:	2300      	movs	r3, #0
 8001e24:	2400      	movs	r4, #0
 8001e26:	2200      	movs	r2, #0
 8001e28:	e7e2      	b.n	8001df0 <__aeabi_ui2d+0x20>
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	0000041e 	.word	0x0000041e
 8001e30:	800fffff 	.word	0x800fffff

08001e34 <__clzsi2>:
 8001e34:	211c      	movs	r1, #28
 8001e36:	2301      	movs	r3, #1
 8001e38:	041b      	lsls	r3, r3, #16
 8001e3a:	4298      	cmp	r0, r3
 8001e3c:	d301      	bcc.n	8001e42 <__clzsi2+0xe>
 8001e3e:	0c00      	lsrs	r0, r0, #16
 8001e40:	3910      	subs	r1, #16
 8001e42:	0a1b      	lsrs	r3, r3, #8
 8001e44:	4298      	cmp	r0, r3
 8001e46:	d301      	bcc.n	8001e4c <__clzsi2+0x18>
 8001e48:	0a00      	lsrs	r0, r0, #8
 8001e4a:	3908      	subs	r1, #8
 8001e4c:	091b      	lsrs	r3, r3, #4
 8001e4e:	4298      	cmp	r0, r3
 8001e50:	d301      	bcc.n	8001e56 <__clzsi2+0x22>
 8001e52:	0900      	lsrs	r0, r0, #4
 8001e54:	3904      	subs	r1, #4
 8001e56:	a202      	add	r2, pc, #8	; (adr r2, 8001e60 <__clzsi2+0x2c>)
 8001e58:	5c10      	ldrb	r0, [r2, r0]
 8001e5a:	1840      	adds	r0, r0, r1
 8001e5c:	4770      	bx	lr
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	02020304 	.word	0x02020304
 8001e64:	01010101 	.word	0x01010101
	...

08001e70 <__clzdi2>:
 8001e70:	b510      	push	{r4, lr}
 8001e72:	2900      	cmp	r1, #0
 8001e74:	d103      	bne.n	8001e7e <__clzdi2+0xe>
 8001e76:	f7ff ffdd 	bl	8001e34 <__clzsi2>
 8001e7a:	3020      	adds	r0, #32
 8001e7c:	e002      	b.n	8001e84 <__clzdi2+0x14>
 8001e7e:	1c08      	adds	r0, r1, #0
 8001e80:	f7ff ffd8 	bl	8001e34 <__clzsi2>
 8001e84:	bd10      	pop	{r4, pc}
 8001e86:	46c0      	nop			; (mov r8, r8)

08001e88 <delay>:
#define timer htim1


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	0002      	movs	r2, r0
 8001e90:	1dbb      	adds	r3, r7, #6
 8001e92:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8001e94:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <delay+0x2c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8001e9c:	46c0      	nop			; (mov r8, r8)
 8001e9e:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <delay+0x2c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ea4:	1dbb      	adds	r3, r7, #6
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d3f8      	bcc.n	8001e9e <delay+0x16>
}
 8001eac:	46c0      	nop			; (mov r8, r8)
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b002      	add	sp, #8
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	200000d8 	.word	0x200000d8

08001eb8 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	6039      	str	r1, [r7, #0]
 8001ec2:	1dfb      	adds	r3, r7, #7
 8001ec4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	4824      	ldr	r0, [pc, #144]	; (8001f5c <send_to_lcd+0xa4>)
 8001ecc:	001a      	movs	r2, r3
 8001ece:	2102      	movs	r1, #2
 8001ed0:	f000 ffbe 	bl	8002e50 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8001ed4:	1dfb      	adds	r3, r7, #7
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	08db      	lsrs	r3, r3, #3
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2201      	movs	r2, #1
 8001ede:	4013      	ands	r3, r2
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	481e      	ldr	r0, [pc, #120]	; (8001f5c <send_to_lcd+0xa4>)
 8001ee4:	001a      	movs	r2, r3
 8001ee6:	2180      	movs	r1, #128	; 0x80
 8001ee8:	f000 ffb2 	bl	8002e50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8001eec:	1dfb      	adds	r3, r7, #7
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	089b      	lsrs	r3, r3, #2
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	4818      	ldr	r0, [pc, #96]	; (8001f5c <send_to_lcd+0xa4>)
 8001efc:	001a      	movs	r2, r3
 8001efe:	2140      	movs	r1, #64	; 0x40
 8001f00:	f000 ffa6 	bl	8002e50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8001f04:	1dfb      	adds	r3, r7, #7
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	085b      	lsrs	r3, r3, #1
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	4013      	ands	r3, r2
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	4812      	ldr	r0, [pc, #72]	; (8001f5c <send_to_lcd+0xa4>)
 8001f14:	001a      	movs	r2, r3
 8001f16:	2120      	movs	r1, #32
 8001f18:	f000 ff9a 	bl	8002e50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8001f1c:	1dfb      	adds	r3, r7, #7
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2201      	movs	r2, #1
 8001f22:	4013      	ands	r3, r2
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	480d      	ldr	r0, [pc, #52]	; (8001f5c <send_to_lcd+0xa4>)
 8001f28:	001a      	movs	r2, r3
 8001f2a:	2110      	movs	r1, #16
 8001f2c:	f000 ff90 	bl	8002e50 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <send_to_lcd+0xa4>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	2108      	movs	r1, #8
 8001f36:	0018      	movs	r0, r3
 8001f38:	f000 ff8a 	bl	8002e50 <HAL_GPIO_WritePin>
	delay (20);
 8001f3c:	2014      	movs	r0, #20
 8001f3e:	f7ff ffa3 	bl	8001e88 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <send_to_lcd+0xa4>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	2108      	movs	r1, #8
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f000 ff81 	bl	8002e50 <HAL_GPIO_WritePin>
	delay (20);
 8001f4e:	2014      	movs	r0, #20
 8001f50:	f7ff ff9a 	bl	8001e88 <delay>
}
 8001f54:	46c0      	nop			; (mov r8, r8)
 8001f56:	46bd      	mov	sp, r7
 8001f58:	b002      	add	sp, #8
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	50000400 	.word	0x50000400

08001f60 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8001f60:	b590      	push	{r4, r7, lr}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	0002      	movs	r2, r0
 8001f68:	1dfb      	adds	r3, r7, #7
 8001f6a:	701a      	strb	r2, [r3, #0]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8001f6c:	200f      	movs	r0, #15
 8001f6e:	183b      	adds	r3, r7, r0
 8001f70:	1dfa      	adds	r2, r7, #7
 8001f72:	7812      	ldrb	r2, [r2, #0]
 8001f74:	0912      	lsrs	r2, r2, #4
 8001f76:	701a      	strb	r2, [r3, #0]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8001f78:	0004      	movs	r4, r0
 8001f7a:	183b      	adds	r3, r7, r0
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2100      	movs	r1, #0
 8001f80:	0018      	movs	r0, r3
 8001f82:	f7ff ff99 	bl	8001eb8 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8001f86:	0020      	movs	r0, r4
 8001f88:	183b      	adds	r3, r7, r0
 8001f8a:	1dfa      	adds	r2, r7, #7
 8001f8c:	7812      	ldrb	r2, [r2, #0]
 8001f8e:	210f      	movs	r1, #15
 8001f90:	400a      	ands	r2, r1
 8001f92:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 0);
 8001f94:	183b      	adds	r3, r7, r0
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2100      	movs	r1, #0
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f7ff ff8c 	bl	8001eb8 <send_to_lcd>
}
 8001fa0:	46c0      	nop			; (mov r8, r8)
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b005      	add	sp, #20
 8001fa6:	bd90      	pop	{r4, r7, pc}

08001fa8 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001fa8:	b590      	push	{r4, r7, lr}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	0002      	movs	r2, r0
 8001fb0:	1dfb      	adds	r3, r7, #7
 8001fb2:	701a      	strb	r2, [r3, #0]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8001fb4:	200f      	movs	r0, #15
 8001fb6:	183b      	adds	r3, r7, r0
 8001fb8:	1dfa      	adds	r2, r7, #7
 8001fba:	7812      	ldrb	r2, [r2, #0]
 8001fbc:	0912      	lsrs	r2, r2, #4
 8001fbe:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8001fc0:	0004      	movs	r4, r0
 8001fc2:	183b      	adds	r3, r7, r0
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f7ff ff75 	bl	8001eb8 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8001fce:	0020      	movs	r0, r4
 8001fd0:	183b      	adds	r3, r7, r0
 8001fd2:	1dfa      	adds	r2, r7, #7
 8001fd4:	7812      	ldrb	r2, [r2, #0]
 8001fd6:	210f      	movs	r1, #15
 8001fd8:	400a      	ands	r2, r1
 8001fda:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 1);
 8001fdc:	183b      	adds	r3, r7, r0
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	f7ff ff68 	bl	8001eb8 <send_to_lcd>
}
 8001fe8:	46c0      	nop			; (mov r8, r8)
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b005      	add	sp, #20
 8001fee:	bd90      	pop	{r4, r7, pc}

08001ff0 <lcd_clear>:

void lcd_clear (void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	f7ff ffb3 	bl	8001f60 <lcd_send_cmd>
	HAL_Delay(2);
 8001ffa:	2002      	movs	r0, #2
 8001ffc:	f000 fcee 	bl	80029dc <HAL_Delay>
}
 8002000:	46c0      	nop			; (mov r8, r8)
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	6039      	str	r1, [r7, #0]
    switch (row)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d002      	beq.n	800201c <lcd_put_cur+0x16>
 8002016:	2b01      	cmp	r3, #1
 8002018:	d005      	beq.n	8002026 <lcd_put_cur+0x20>
 800201a:	e009      	b.n	8002030 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	2280      	movs	r2, #128	; 0x80
 8002020:	4313      	orrs	r3, r2
 8002022:	603b      	str	r3, [r7, #0]
            break;
 8002024:	e004      	b.n	8002030 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	22c0      	movs	r2, #192	; 0xc0
 800202a:	4313      	orrs	r3, r2
 800202c:	603b      	str	r3, [r7, #0]
            break;
 800202e:	46c0      	nop			; (mov r8, r8)
    }

    lcd_send_cmd (col);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	0018      	movs	r0, r3
 8002036:	f7ff ff93 	bl	8001f60 <lcd_send_cmd>
}
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	46bd      	mov	sp, r7
 800203e:	b002      	add	sp, #8
 8002040:	bd80      	pop	{r7, pc}

08002042 <lcd_init>:


void lcd_init (void)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8002046:	2032      	movs	r0, #50	; 0x32
 8002048:	f000 fcc8 	bl	80029dc <HAL_Delay>
	lcd_send_cmd (0x30);
 800204c:	2030      	movs	r0, #48	; 0x30
 800204e:	f7ff ff87 	bl	8001f60 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8002052:	2005      	movs	r0, #5
 8002054:	f000 fcc2 	bl	80029dc <HAL_Delay>
	lcd_send_cmd (0x30);
 8002058:	2030      	movs	r0, #48	; 0x30
 800205a:	f7ff ff81 	bl	8001f60 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800205e:	2001      	movs	r0, #1
 8002060:	f000 fcbc 	bl	80029dc <HAL_Delay>
	lcd_send_cmd (0x30);
 8002064:	2030      	movs	r0, #48	; 0x30
 8002066:	f7ff ff7b 	bl	8001f60 <lcd_send_cmd>
	HAL_Delay(10);
 800206a:	200a      	movs	r0, #10
 800206c:	f000 fcb6 	bl	80029dc <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8002070:	2020      	movs	r0, #32
 8002072:	f7ff ff75 	bl	8001f60 <lcd_send_cmd>
	HAL_Delay(10);
 8002076:	200a      	movs	r0, #10
 8002078:	f000 fcb0 	bl	80029dc <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800207c:	2028      	movs	r0, #40	; 0x28
 800207e:	f7ff ff6f 	bl	8001f60 <lcd_send_cmd>
	HAL_Delay(1);
 8002082:	2001      	movs	r0, #1
 8002084:	f000 fcaa 	bl	80029dc <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8002088:	2008      	movs	r0, #8
 800208a:	f7ff ff69 	bl	8001f60 <lcd_send_cmd>
	HAL_Delay(1);
 800208e:	2001      	movs	r0, #1
 8002090:	f000 fca4 	bl	80029dc <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8002094:	2001      	movs	r0, #1
 8002096:	f7ff ff63 	bl	8001f60 <lcd_send_cmd>
	HAL_Delay(1);
 800209a:	2001      	movs	r0, #1
 800209c:	f000 fc9e 	bl	80029dc <HAL_Delay>
	HAL_Delay(1);
 80020a0:	2001      	movs	r0, #1
 80020a2:	f000 fc9b 	bl	80029dc <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80020a6:	2006      	movs	r0, #6
 80020a8:	f7ff ff5a 	bl	8001f60 <lcd_send_cmd>
	HAL_Delay(1);
 80020ac:	2001      	movs	r0, #1
 80020ae:	f000 fc95 	bl	80029dc <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80020b2:	200c      	movs	r0, #12
 80020b4:	f7ff ff54 	bl	8001f60 <lcd_send_cmd>
}
 80020b8:	46c0      	nop			; (mov r8, r8)
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <lcd_send_string>:

void lcd_send_string (char *str)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80020c6:	e006      	b.n	80020d6 <lcd_send_string+0x18>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7ff ff69 	bl	8001fa8 <lcd_send_data>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f4      	bne.n	80020c8 <lcd_send_string+0xa>
}
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b002      	add	sp, #8
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 80020ee:	f000 fbf1 	bl	80028d4 <HAL_Init>
  SetTunings(1, 1, 1); // kp, ki, kd setzen
 80020f2:	2500      	movs	r5, #0
 80020f4:	4e24      	ldr	r6, [pc, #144]	; (8002188 <main+0xa0>)
 80020f6:	2000      	movs	r0, #0
 80020f8:	4923      	ldr	r1, [pc, #140]	; (8002188 <main+0xa0>)
 80020fa:	2300      	movs	r3, #0
 80020fc:	4c22      	ldr	r4, [pc, #136]	; (8002188 <main+0xa0>)
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	9401      	str	r4, [sp, #4]
 8002102:	002a      	movs	r2, r5
 8002104:	0033      	movs	r3, r6
 8002106:	f000 f905 	bl	8002314 <SetTunings>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800210a:	f000 f923 	bl	8002354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800210e:	f000 fa47 	bl	80025a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002112:	f000 f9f7 	bl	8002504 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002116:	f000 f981 	bl	800241c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800211a:	4b1c      	ldr	r3, [pc, #112]	; (800218c <main+0xa4>)
 800211c:	0018      	movs	r0, r3
 800211e:	f001 fdaf 	bl	8003c80 <HAL_TIM_Base_Start>

  lcd_init();
 8002122:	f7ff ff8e 	bl	8002042 <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Input+=0.001;
 8002126:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <main+0xa8>)
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	6859      	ldr	r1, [r3, #4]
 800212c:	4a19      	ldr	r2, [pc, #100]	; (8002194 <main+0xac>)
 800212e:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <main+0xb0>)
 8002130:	f7fe fa40 	bl	80005b4 <__aeabi_dadd>
 8002134:	0003      	movs	r3, r0
 8002136:	000c      	movs	r4, r1
 8002138:	4a15      	ldr	r2, [pc, #84]	; (8002190 <main+0xa8>)
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	6054      	str	r4, [r2, #4]
	  Setpoint = 100;
 800213e:	4a17      	ldr	r2, [pc, #92]	; (800219c <main+0xb4>)
 8002140:	2300      	movs	r3, #0
 8002142:	4c17      	ldr	r4, [pc, #92]	; (80021a0 <main+0xb8>)
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	6054      	str	r4, [r2, #4]
	  Compute();
 8002148:	f000 f848 	bl	80021dc <Compute>

	  /*char num_arr[10];
	  uint32_t num = Output;
	  sprintf (num_arr, "%u", num);*/

	  lcd_put_cur(0, 0);
 800214c:	2100      	movs	r1, #0
 800214e:	2000      	movs	r0, #0
 8002150:	f7ff ff59 	bl	8002006 <lcd_put_cur>
	  lcd_send_string("Output: ");
 8002154:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <main+0xbc>)
 8002156:	0018      	movs	r0, r3
 8002158:	f7ff ffb1 	bl	80020be <lcd_send_string>
	  lcd_put_cur(0, 8);
 800215c:	2108      	movs	r1, #8
 800215e:	2000      	movs	r0, #0
 8002160:	f7ff ff51 	bl	8002006 <lcd_put_cur>
	  int_to_char_sendLCD(Output);
 8002164:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <main+0xc0>)
 8002166:	685c      	ldr	r4, [r3, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	0018      	movs	r0, r3
 800216c:	0021      	movs	r1, r4
 800216e:	f7ff fdf9 	bl	8001d64 <__aeabi_d2iz>
 8002172:	0003      	movs	r3, r0
 8002174:	0018      	movs	r0, r3
 8002176:	f000 f819 	bl	80021ac <int_to_char_sendLCD>
	  HAL_Delay(20);
 800217a:	2014      	movs	r0, #20
 800217c:	f000 fc2e 	bl	80029dc <HAL_Delay>
	  lcd_clear();
 8002180:	f7ff ff36 	bl	8001ff0 <lcd_clear>
	  Input+=0.001;
 8002184:	e7cf      	b.n	8002126 <main+0x3e>
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	3ff00000 	.word	0x3ff00000
 800218c:	200000d8 	.word	0x200000d8
 8002190:	20000000 	.word	0x20000000
 8002194:	d2f1a9fc 	.word	0xd2f1a9fc
 8002198:	3f50624d 	.word	0x3f50624d
 800219c:	200000b0 	.word	0x200000b0
 80021a0:	40590000 	.word	0x40590000
 80021a4:	08006284 	.word	0x08006284
 80021a8:	200000c0 	.word	0x200000c0

080021ac <int_to_char_sendLCD>:
  }
  /* USER CODE END 3 */
}

void int_to_char_sendLCD(int wert)
{
 80021ac:	b590      	push	{r4, r7, lr}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	char num_arr[10];
	uint32_t num = wert;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	617b      	str	r3, [r7, #20]
	sprintf (num_arr, "%u", num);
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	4907      	ldr	r1, [pc, #28]	; (80021d8 <int_to_char_sendLCD+0x2c>)
 80021bc:	2408      	movs	r4, #8
 80021be:	193b      	adds	r3, r7, r4
 80021c0:	0018      	movs	r0, r3
 80021c2:	f003 fc4b 	bl	8005a5c <siprintf>
	lcd_send_string(num_arr);
 80021c6:	193b      	adds	r3, r7, r4
 80021c8:	0018      	movs	r0, r3
 80021ca:	f7ff ff78 	bl	80020be <lcd_send_string>
}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	46bd      	mov	sp, r7
 80021d2:	b007      	add	sp, #28
 80021d4:	bd90      	pop	{r4, r7, pc}
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	08006290 	.word	0x08006290

080021dc <Compute>:

void Compute()
{
 80021dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021de:	b089      	sub	sp, #36	; 0x24
 80021e0:	af00      	add	r7, sp, #0
   /*How long since we last calculated*/
   unsigned long now = HAL_GetTick();
 80021e2:	f000 fbf1 	bl	80029c8 <HAL_GetTick>
 80021e6:	0003      	movs	r3, r0
 80021e8:	61fb      	str	r3, [r7, #28]
   double timeChange = (double)(now - lastTime);
 80021ea:	4b41      	ldr	r3, [pc, #260]	; (80022f0 <Compute+0x114>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	69fa      	ldr	r2, [r7, #28]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	0018      	movs	r0, r3
 80021f4:	f7ff fdec 	bl	8001dd0 <__aeabi_ui2d>
 80021f8:	0003      	movs	r3, r0
 80021fa:	000c      	movs	r4, r1
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	617c      	str	r4, [r7, #20]

   /*Compute all the working error variables*/
   double error = Setpoint - Input;
 8002200:	4b3c      	ldr	r3, [pc, #240]	; (80022f4 <Compute+0x118>)
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	6859      	ldr	r1, [r3, #4]
 8002206:	4b3c      	ldr	r3, [pc, #240]	; (80022f8 <Compute+0x11c>)
 8002208:	685c      	ldr	r4, [r3, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	001a      	movs	r2, r3
 800220e:	0023      	movs	r3, r4
 8002210:	f7ff fa60 	bl	80016d4 <__aeabi_dsub>
 8002214:	0003      	movs	r3, r0
 8002216:	000c      	movs	r4, r1
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	60fc      	str	r4, [r7, #12]
   errSum += (error * timeChange);
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	68b8      	ldr	r0, [r7, #8]
 8002222:	68f9      	ldr	r1, [r7, #12]
 8002224:	f7fe ffe4 	bl	80011f0 <__aeabi_dmul>
 8002228:	0003      	movs	r3, r0
 800222a:	000c      	movs	r4, r1
 800222c:	0018      	movs	r0, r3
 800222e:	0021      	movs	r1, r4
 8002230:	4b32      	ldr	r3, [pc, #200]	; (80022fc <Compute+0x120>)
 8002232:	685c      	ldr	r4, [r3, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	001a      	movs	r2, r3
 8002238:	0023      	movs	r3, r4
 800223a:	f7fe f9bb 	bl	80005b4 <__aeabi_dadd>
 800223e:	0003      	movs	r3, r0
 8002240:	000c      	movs	r4, r1
 8002242:	4a2e      	ldr	r2, [pc, #184]	; (80022fc <Compute+0x120>)
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	6054      	str	r4, [r2, #4]
   double dErr = (error - lastErr) / timeChange;
 8002248:	4b2d      	ldr	r3, [pc, #180]	; (8002300 <Compute+0x124>)
 800224a:	685c      	ldr	r4, [r3, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	001a      	movs	r2, r3
 8002250:	0023      	movs	r3, r4
 8002252:	68b8      	ldr	r0, [r7, #8]
 8002254:	68f9      	ldr	r1, [r7, #12]
 8002256:	f7ff fa3d 	bl	80016d4 <__aeabi_dsub>
 800225a:	0003      	movs	r3, r0
 800225c:	000c      	movs	r4, r1
 800225e:	0018      	movs	r0, r3
 8002260:	0021      	movs	r1, r4
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f7fe fcc1 	bl	8000bec <__aeabi_ddiv>
 800226a:	0003      	movs	r3, r0
 800226c:	000c      	movs	r4, r1
 800226e:	603b      	str	r3, [r7, #0]
 8002270:	607c      	str	r4, [r7, #4]

   /*Compute PID Output*/
   Output = kp * error + ki * errSum + kd * dErr;
 8002272:	4b24      	ldr	r3, [pc, #144]	; (8002304 <Compute+0x128>)
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	6859      	ldr	r1, [r3, #4]
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f7fe ffb8 	bl	80011f0 <__aeabi_dmul>
 8002280:	0003      	movs	r3, r0
 8002282:	000c      	movs	r4, r1
 8002284:	001d      	movs	r5, r3
 8002286:	0026      	movs	r6, r4
 8002288:	4b1f      	ldr	r3, [pc, #124]	; (8002308 <Compute+0x12c>)
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	6859      	ldr	r1, [r3, #4]
 800228e:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <Compute+0x120>)
 8002290:	685c      	ldr	r4, [r3, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	001a      	movs	r2, r3
 8002296:	0023      	movs	r3, r4
 8002298:	f7fe ffaa 	bl	80011f0 <__aeabi_dmul>
 800229c:	0003      	movs	r3, r0
 800229e:	000c      	movs	r4, r1
 80022a0:	001a      	movs	r2, r3
 80022a2:	0023      	movs	r3, r4
 80022a4:	0028      	movs	r0, r5
 80022a6:	0031      	movs	r1, r6
 80022a8:	f7fe f984 	bl	80005b4 <__aeabi_dadd>
 80022ac:	0003      	movs	r3, r0
 80022ae:	000c      	movs	r4, r1
 80022b0:	0025      	movs	r5, r4
 80022b2:	001c      	movs	r4, r3
 80022b4:	4b15      	ldr	r3, [pc, #84]	; (800230c <Compute+0x130>)
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	6859      	ldr	r1, [r3, #4]
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f7fe ff97 	bl	80011f0 <__aeabi_dmul>
 80022c2:	0002      	movs	r2, r0
 80022c4:	000b      	movs	r3, r1
 80022c6:	0020      	movs	r0, r4
 80022c8:	0029      	movs	r1, r5
 80022ca:	f7fe f973 	bl	80005b4 <__aeabi_dadd>
 80022ce:	0003      	movs	r3, r0
 80022d0:	000c      	movs	r4, r1
 80022d2:	4a0f      	ldr	r2, [pc, #60]	; (8002310 <Compute+0x134>)
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	6054      	str	r4, [r2, #4]

   /*Remember some variables for next time*/
   lastErr = error;
 80022d8:	4a09      	ldr	r2, [pc, #36]	; (8002300 <Compute+0x124>)
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	68fc      	ldr	r4, [r7, #12]
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	6054      	str	r4, [r2, #4]
   lastTime = now;
 80022e2:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <Compute+0x114>)
 80022e4:	69fa      	ldr	r2, [r7, #28]
 80022e6:	601a      	str	r2, [r3, #0]
}
 80022e8:	46c0      	nop			; (mov r8, r8)
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b009      	add	sp, #36	; 0x24
 80022ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022f0:	20000094 	.word	0x20000094
 80022f4:	200000b0 	.word	0x200000b0
 80022f8:	20000000 	.word	0x20000000
 80022fc:	200000b8 	.word	0x200000b8
 8002300:	200000c8 	.word	0x200000c8
 8002304:	200001a8 	.word	0x200001a8
 8002308:	200000d0 	.word	0x200000d0
 800230c:	200000a8 	.word	0x200000a8
 8002310:	200000c0 	.word	0x200000c0

08002314 <SetTunings>:


void SetTunings(double Kp, double Ki, double Kd)
{
 8002314:	b590      	push	{r4, r7, lr}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	60b8      	str	r0, [r7, #8]
 800231c:	60f9      	str	r1, [r7, #12]
 800231e:	603a      	str	r2, [r7, #0]
 8002320:	607b      	str	r3, [r7, #4]
   kp = Kp;
 8002322:	4a09      	ldr	r2, [pc, #36]	; (8002348 <SetTunings+0x34>)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	68fc      	ldr	r4, [r7, #12]
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	6054      	str	r4, [r2, #4]
   ki = Ki;
 800232c:	4a07      	ldr	r2, [pc, #28]	; (800234c <SetTunings+0x38>)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	687c      	ldr	r4, [r7, #4]
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	6054      	str	r4, [r2, #4]
   kd = Kd;
 8002336:	4a06      	ldr	r2, [pc, #24]	; (8002350 <SetTunings+0x3c>)
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	6054      	str	r4, [r2, #4]
}
 8002340:	46c0      	nop			; (mov r8, r8)
 8002342:	46bd      	mov	sp, r7
 8002344:	b005      	add	sp, #20
 8002346:	bd90      	pop	{r4, r7, pc}
 8002348:	200001a8 	.word	0x200001a8
 800234c:	200000d0 	.word	0x200000d0
 8002350:	200000a8 	.word	0x200000a8

08002354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002354:	b590      	push	{r4, r7, lr}
 8002356:	b0a1      	sub	sp, #132	; 0x84
 8002358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800235a:	2448      	movs	r4, #72	; 0x48
 800235c:	193b      	adds	r3, r7, r4
 800235e:	0018      	movs	r0, r3
 8002360:	2338      	movs	r3, #56	; 0x38
 8002362:	001a      	movs	r2, r3
 8002364:	2100      	movs	r1, #0
 8002366:	f003 fb71 	bl	8005a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800236a:	2338      	movs	r3, #56	; 0x38
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	0018      	movs	r0, r3
 8002370:	2310      	movs	r3, #16
 8002372:	001a      	movs	r2, r3
 8002374:	2100      	movs	r1, #0
 8002376:	f003 fb69 	bl	8005a4c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800237a:	1d3b      	adds	r3, r7, #4
 800237c:	0018      	movs	r0, r3
 800237e:	2334      	movs	r3, #52	; 0x34
 8002380:	001a      	movs	r2, r3
 8002382:	2100      	movs	r1, #0
 8002384:	f003 fb62 	bl	8005a4c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	0018      	movs	r0, r3
 800238e:	f000 fd7d 	bl	8002e8c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002392:	193b      	adds	r3, r7, r4
 8002394:	2202      	movs	r2, #2
 8002396:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002398:	193b      	adds	r3, r7, r4
 800239a:	2280      	movs	r2, #128	; 0x80
 800239c:	0052      	lsls	r2, r2, #1
 800239e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80023a0:	193b      	adds	r3, r7, r4
 80023a2:	2200      	movs	r2, #0
 80023a4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023a6:	193b      	adds	r3, r7, r4
 80023a8:	2240      	movs	r2, #64	; 0x40
 80023aa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023ac:	193b      	adds	r3, r7, r4
 80023ae:	2200      	movs	r2, #0
 80023b0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023b2:	193b      	adds	r3, r7, r4
 80023b4:	0018      	movs	r0, r3
 80023b6:	f000 fdb5 	bl	8002f24 <HAL_RCC_OscConfig>
 80023ba:	1e03      	subs	r3, r0, #0
 80023bc:	d001      	beq.n	80023c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80023be:	f000 f965 	bl	800268c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023c2:	2138      	movs	r1, #56	; 0x38
 80023c4:	187b      	adds	r3, r7, r1
 80023c6:	2207      	movs	r2, #7
 80023c8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80023ca:	187b      	adds	r3, r7, r1
 80023cc:	2200      	movs	r2, #0
 80023ce:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023d0:	187b      	adds	r3, r7, r1
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023d6:	187b      	adds	r3, r7, r1
 80023d8:	2200      	movs	r2, #0
 80023da:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023dc:	187b      	adds	r3, r7, r1
 80023de:	2100      	movs	r1, #0
 80023e0:	0018      	movs	r0, r3
 80023e2:	f001 f8bf 	bl	8003564 <HAL_RCC_ClockConfig>
 80023e6:	1e03      	subs	r3, r0, #0
 80023e8:	d001      	beq.n	80023ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80023ea:	f000 f94f 	bl	800268c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1;
 80023ee:	1d3b      	adds	r3, r7, #4
 80023f0:	4a09      	ldr	r2, [pc, #36]	; (8002418 <SystemClock_Config+0xc4>)
 80023f2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80023fa:	1d3b      	adds	r3, r7, #4
 80023fc:	2200      	movs	r2, #0
 80023fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002400:	1d3b      	adds	r3, r7, #4
 8002402:	0018      	movs	r0, r3
 8002404:	f001 fa58 	bl	80038b8 <HAL_RCCEx_PeriphCLKConfig>
 8002408:	1e03      	subs	r3, r0, #0
 800240a:	d001      	beq.n	8002410 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800240c:	f000 f93e 	bl	800268c <Error_Handler>
  }
}
 8002410:	46c0      	nop			; (mov r8, r8)
 8002412:	46bd      	mov	sp, r7
 8002414:	b021      	add	sp, #132	; 0x84
 8002416:	bd90      	pop	{r4, r7, pc}
 8002418:	00200002 	.word	0x00200002

0800241c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b094      	sub	sp, #80	; 0x50
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002422:	2340      	movs	r3, #64	; 0x40
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	0018      	movs	r0, r3
 8002428:	2310      	movs	r3, #16
 800242a:	001a      	movs	r2, r3
 800242c:	2100      	movs	r1, #0
 800242e:	f003 fb0d 	bl	8005a4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002432:	2334      	movs	r3, #52	; 0x34
 8002434:	18fb      	adds	r3, r7, r3
 8002436:	0018      	movs	r0, r3
 8002438:	230c      	movs	r3, #12
 800243a:	001a      	movs	r2, r3
 800243c:	2100      	movs	r1, #0
 800243e:	f003 fb05 	bl	8005a4c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002442:	003b      	movs	r3, r7
 8002444:	0018      	movs	r0, r3
 8002446:	2334      	movs	r3, #52	; 0x34
 8002448:	001a      	movs	r2, r3
 800244a:	2100      	movs	r1, #0
 800244c:	f003 fafe 	bl	8005a4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002450:	4b29      	ldr	r3, [pc, #164]	; (80024f8 <MX_TIM1_Init+0xdc>)
 8002452:	4a2a      	ldr	r2, [pc, #168]	; (80024fc <MX_TIM1_Init+0xe0>)
 8002454:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8002456:	4b28      	ldr	r3, [pc, #160]	; (80024f8 <MX_TIM1_Init+0xdc>)
 8002458:	2210      	movs	r2, #16
 800245a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800245c:	4b26      	ldr	r3, [pc, #152]	; (80024f8 <MX_TIM1_Init+0xdc>)
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff;
 8002462:	4b25      	ldr	r3, [pc, #148]	; (80024f8 <MX_TIM1_Init+0xdc>)
 8002464:	4a26      	ldr	r2, [pc, #152]	; (8002500 <MX_TIM1_Init+0xe4>)
 8002466:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002468:	4b23      	ldr	r3, [pc, #140]	; (80024f8 <MX_TIM1_Init+0xdc>)
 800246a:	2200      	movs	r2, #0
 800246c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800246e:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <MX_TIM1_Init+0xdc>)
 8002470:	2200      	movs	r2, #0
 8002472:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002474:	4b20      	ldr	r3, [pc, #128]	; (80024f8 <MX_TIM1_Init+0xdc>)
 8002476:	2200      	movs	r2, #0
 8002478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800247a:	4b1f      	ldr	r3, [pc, #124]	; (80024f8 <MX_TIM1_Init+0xdc>)
 800247c:	0018      	movs	r0, r3
 800247e:	f001 fbd3 	bl	8003c28 <HAL_TIM_Base_Init>
 8002482:	1e03      	subs	r3, r0, #0
 8002484:	d001      	beq.n	800248a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002486:	f000 f901 	bl	800268c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800248a:	2140      	movs	r1, #64	; 0x40
 800248c:	187b      	adds	r3, r7, r1
 800248e:	2280      	movs	r2, #128	; 0x80
 8002490:	0152      	lsls	r2, r2, #5
 8002492:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002494:	187a      	adds	r2, r7, r1
 8002496:	4b18      	ldr	r3, [pc, #96]	; (80024f8 <MX_TIM1_Init+0xdc>)
 8002498:	0011      	movs	r1, r2
 800249a:	0018      	movs	r0, r3
 800249c:	f001 fc1a 	bl	8003cd4 <HAL_TIM_ConfigClockSource>
 80024a0:	1e03      	subs	r3, r0, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80024a4:	f000 f8f2 	bl	800268c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a8:	2134      	movs	r1, #52	; 0x34
 80024aa:	187b      	adds	r3, r7, r1
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024b0:	187b      	adds	r3, r7, r1
 80024b2:	2200      	movs	r2, #0
 80024b4:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b6:	187b      	adds	r3, r7, r1
 80024b8:	2200      	movs	r2, #0
 80024ba:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024bc:	187a      	adds	r2, r7, r1
 80024be:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <MX_TIM1_Init+0xdc>)
 80024c0:	0011      	movs	r1, r2
 80024c2:	0018      	movs	r0, r3
 80024c4:	f001 fde2 	bl	800408c <HAL_TIMEx_MasterConfigSynchronization>
 80024c8:	1e03      	subs	r3, r0, #0
 80024ca:	d001      	beq.n	80024d0 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80024cc:	f000 f8de 	bl	800268c <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80024d0:	003b      	movs	r3, r7
 80024d2:	2200      	movs	r2, #0
 80024d4:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80024d6:	003b      	movs	r3, r7
 80024d8:	2200      	movs	r2, #0
 80024da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024dc:	003a      	movs	r2, r7
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <MX_TIM1_Init+0xdc>)
 80024e0:	0011      	movs	r1, r2
 80024e2:	0018      	movs	r0, r3
 80024e4:	f001 fe28 	bl	8004138 <HAL_TIMEx_ConfigBreakDeadTime>
 80024e8:	1e03      	subs	r3, r0, #0
 80024ea:	d001      	beq.n	80024f0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80024ec:	f000 f8ce 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80024f0:	46c0      	nop			; (mov r8, r8)
 80024f2:	46bd      	mov	sp, r7
 80024f4:	b014      	add	sp, #80	; 0x50
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	200000d8 	.word	0x200000d8
 80024fc:	40012c00 	.word	0x40012c00
 8002500:	0000ffff 	.word	0x0000ffff

08002504 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002508:	4b23      	ldr	r3, [pc, #140]	; (8002598 <MX_USART2_UART_Init+0x94>)
 800250a:	4a24      	ldr	r2, [pc, #144]	; (800259c <MX_USART2_UART_Init+0x98>)
 800250c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800250e:	4b22      	ldr	r3, [pc, #136]	; (8002598 <MX_USART2_UART_Init+0x94>)
 8002510:	22e1      	movs	r2, #225	; 0xe1
 8002512:	0252      	lsls	r2, r2, #9
 8002514:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002516:	4b20      	ldr	r3, [pc, #128]	; (8002598 <MX_USART2_UART_Init+0x94>)
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800251c:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <MX_USART2_UART_Init+0x94>)
 800251e:	2200      	movs	r2, #0
 8002520:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002522:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <MX_USART2_UART_Init+0x94>)
 8002524:	2200      	movs	r2, #0
 8002526:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002528:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <MX_USART2_UART_Init+0x94>)
 800252a:	220c      	movs	r2, #12
 800252c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800252e:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <MX_USART2_UART_Init+0x94>)
 8002530:	2200      	movs	r2, #0
 8002532:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002534:	4b18      	ldr	r3, [pc, #96]	; (8002598 <MX_USART2_UART_Init+0x94>)
 8002536:	2200      	movs	r2, #0
 8002538:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800253a:	4b17      	ldr	r3, [pc, #92]	; (8002598 <MX_USART2_UART_Init+0x94>)
 800253c:	2200      	movs	r2, #0
 800253e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002540:	4b15      	ldr	r3, [pc, #84]	; (8002598 <MX_USART2_UART_Init+0x94>)
 8002542:	2200      	movs	r2, #0
 8002544:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002546:	4b14      	ldr	r3, [pc, #80]	; (8002598 <MX_USART2_UART_Init+0x94>)
 8002548:	2200      	movs	r2, #0
 800254a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800254c:	4b12      	ldr	r3, [pc, #72]	; (8002598 <MX_USART2_UART_Init+0x94>)
 800254e:	0018      	movs	r0, r3
 8002550:	f001 fe98 	bl	8004284 <HAL_UART_Init>
 8002554:	1e03      	subs	r3, r0, #0
 8002556:	d001      	beq.n	800255c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002558:	f000 f898 	bl	800268c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800255c:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <MX_USART2_UART_Init+0x94>)
 800255e:	2100      	movs	r1, #0
 8002560:	0018      	movs	r0, r3
 8002562:	f003 f95d 	bl	8005820 <HAL_UARTEx_SetTxFifoThreshold>
 8002566:	1e03      	subs	r3, r0, #0
 8002568:	d001      	beq.n	800256e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800256a:	f000 f88f 	bl	800268c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <MX_USART2_UART_Init+0x94>)
 8002570:	2100      	movs	r1, #0
 8002572:	0018      	movs	r0, r3
 8002574:	f003 f994 	bl	80058a0 <HAL_UARTEx_SetRxFifoThreshold>
 8002578:	1e03      	subs	r3, r0, #0
 800257a:	d001      	beq.n	8002580 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800257c:	f000 f886 	bl	800268c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <MX_USART2_UART_Init+0x94>)
 8002582:	0018      	movs	r0, r3
 8002584:	f003 f912 	bl	80057ac <HAL_UARTEx_DisableFifoMode>
 8002588:	1e03      	subs	r3, r0, #0
 800258a:	d001      	beq.n	8002590 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800258c:	f000 f87e 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002590:	46c0      	nop			; (mov r8, r8)
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	20000118 	.word	0x20000118
 800259c:	40004400 	.word	0x40004400

080025a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b08b      	sub	sp, #44	; 0x2c
 80025a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a6:	2414      	movs	r4, #20
 80025a8:	193b      	adds	r3, r7, r4
 80025aa:	0018      	movs	r0, r3
 80025ac:	2314      	movs	r3, #20
 80025ae:	001a      	movs	r2, r3
 80025b0:	2100      	movs	r1, #0
 80025b2:	f003 fa4b 	bl	8005a4c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025b6:	4b33      	ldr	r3, [pc, #204]	; (8002684 <MX_GPIO_Init+0xe4>)
 80025b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025ba:	4b32      	ldr	r3, [pc, #200]	; (8002684 <MX_GPIO_Init+0xe4>)
 80025bc:	2104      	movs	r1, #4
 80025be:	430a      	orrs	r2, r1
 80025c0:	635a      	str	r2, [r3, #52]	; 0x34
 80025c2:	4b30      	ldr	r3, [pc, #192]	; (8002684 <MX_GPIO_Init+0xe4>)
 80025c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c6:	2204      	movs	r2, #4
 80025c8:	4013      	ands	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025ce:	4b2d      	ldr	r3, [pc, #180]	; (8002684 <MX_GPIO_Init+0xe4>)
 80025d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025d2:	4b2c      	ldr	r3, [pc, #176]	; (8002684 <MX_GPIO_Init+0xe4>)
 80025d4:	2120      	movs	r1, #32
 80025d6:	430a      	orrs	r2, r1
 80025d8:	635a      	str	r2, [r3, #52]	; 0x34
 80025da:	4b2a      	ldr	r3, [pc, #168]	; (8002684 <MX_GPIO_Init+0xe4>)
 80025dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025de:	2220      	movs	r2, #32
 80025e0:	4013      	ands	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e6:	4b27      	ldr	r3, [pc, #156]	; (8002684 <MX_GPIO_Init+0xe4>)
 80025e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025ea:	4b26      	ldr	r3, [pc, #152]	; (8002684 <MX_GPIO_Init+0xe4>)
 80025ec:	2101      	movs	r1, #1
 80025ee:	430a      	orrs	r2, r1
 80025f0:	635a      	str	r2, [r3, #52]	; 0x34
 80025f2:	4b24      	ldr	r3, [pc, #144]	; (8002684 <MX_GPIO_Init+0xe4>)
 80025f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f6:	2201      	movs	r2, #1
 80025f8:	4013      	ands	r3, r2
 80025fa:	60bb      	str	r3, [r7, #8]
 80025fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fe:	4b21      	ldr	r3, [pc, #132]	; (8002684 <MX_GPIO_Init+0xe4>)
 8002600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002602:	4b20      	ldr	r3, [pc, #128]	; (8002684 <MX_GPIO_Init+0xe4>)
 8002604:	2102      	movs	r1, #2
 8002606:	430a      	orrs	r2, r1
 8002608:	635a      	str	r2, [r3, #52]	; 0x34
 800260a:	4b1e      	ldr	r3, [pc, #120]	; (8002684 <MX_GPIO_Init+0xe4>)
 800260c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260e:	2202      	movs	r2, #2
 8002610:	4013      	ands	r3, r2
 8002612:	607b      	str	r3, [r7, #4]
 8002614:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8002616:	23a0      	movs	r3, #160	; 0xa0
 8002618:	05db      	lsls	r3, r3, #23
 800261a:	2200      	movs	r2, #0
 800261c:	2120      	movs	r1, #32
 800261e:	0018      	movs	r0, r3
 8002620:	f000 fc16 	bl	8002e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8002624:	4b18      	ldr	r3, [pc, #96]	; (8002688 <MX_GPIO_Init+0xe8>)
 8002626:	2200      	movs	r2, #0
 8002628:	21fe      	movs	r1, #254	; 0xfe
 800262a:	0018      	movs	r0, r3
 800262c:	f000 fc10 	bl	8002e50 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8002630:	193b      	adds	r3, r7, r4
 8002632:	2220      	movs	r2, #32
 8002634:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002636:	193b      	adds	r3, r7, r4
 8002638:	2201      	movs	r2, #1
 800263a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	193b      	adds	r3, r7, r4
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002642:	193b      	adds	r3, r7, r4
 8002644:	2202      	movs	r2, #2
 8002646:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8002648:	193a      	adds	r2, r7, r4
 800264a:	23a0      	movs	r3, #160	; 0xa0
 800264c:	05db      	lsls	r3, r3, #23
 800264e:	0011      	movs	r1, r2
 8002650:	0018      	movs	r0, r3
 8002652:	f000 fa99 	bl	8002b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8002656:	0021      	movs	r1, r4
 8002658:	187b      	adds	r3, r7, r1
 800265a:	22fe      	movs	r2, #254	; 0xfe
 800265c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800265e:	187b      	adds	r3, r7, r1
 8002660:	2201      	movs	r2, #1
 8002662:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	187b      	adds	r3, r7, r1
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266a:	187b      	adds	r3, r7, r1
 800266c:	2200      	movs	r2, #0
 800266e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002670:	187b      	adds	r3, r7, r1
 8002672:	4a05      	ldr	r2, [pc, #20]	; (8002688 <MX_GPIO_Init+0xe8>)
 8002674:	0019      	movs	r1, r3
 8002676:	0010      	movs	r0, r2
 8002678:	f000 fa86 	bl	8002b88 <HAL_GPIO_Init>

}
 800267c:	46c0      	nop			; (mov r8, r8)
 800267e:	46bd      	mov	sp, r7
 8002680:	b00b      	add	sp, #44	; 0x2c
 8002682:	bd90      	pop	{r4, r7, pc}
 8002684:	40021000 	.word	0x40021000
 8002688:	50000400 	.word	0x50000400

0800268c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002690:	46c0      	nop			; (mov r8, r8)
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <LL_SYSCFG_DisableDBATT>:
  *         @arg @ref LL_SYSCFG_UCPD2_STROBE
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 80026a0:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <LL_SYSCFG_DisableDBATT+0x1c>)
 80026a2:	6819      	ldr	r1, [r3, #0]
 80026a4:	4b03      	ldr	r3, [pc, #12]	; (80026b4 <LL_SYSCFG_DisableDBATT+0x1c>)
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]
}
 80026ac:	46c0      	nop			; (mov r8, r8)
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b002      	add	sp, #8
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40010000 	.word	0x40010000

080026b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026be:	4b11      	ldr	r3, [pc, #68]	; (8002704 <HAL_MspInit+0x4c>)
 80026c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026c2:	4b10      	ldr	r3, [pc, #64]	; (8002704 <HAL_MspInit+0x4c>)
 80026c4:	2101      	movs	r1, #1
 80026c6:	430a      	orrs	r2, r1
 80026c8:	641a      	str	r2, [r3, #64]	; 0x40
 80026ca:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <HAL_MspInit+0x4c>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	2201      	movs	r2, #1
 80026d0:	4013      	ands	r3, r2
 80026d2:	607b      	str	r3, [r7, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026d6:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <HAL_MspInit+0x4c>)
 80026d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026da:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <HAL_MspInit+0x4c>)
 80026dc:	2180      	movs	r1, #128	; 0x80
 80026de:	0549      	lsls	r1, r1, #21
 80026e0:	430a      	orrs	r2, r1
 80026e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80026e4:	4b07      	ldr	r3, [pc, #28]	; (8002704 <HAL_MspInit+0x4c>)
 80026e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026e8:	2380      	movs	r3, #128	; 0x80
 80026ea:	055b      	lsls	r3, r3, #21
 80026ec:	4013      	ands	r3, r2
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  LL_SYSCFG_DisableDBATT(LL_SYSCFG_UCPD1_STROBE | LL_SYSCFG_UCPD2_STROBE);
 80026f2:	23c0      	movs	r3, #192	; 0xc0
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	0018      	movs	r0, r3
 80026f8:	f7ff ffce 	bl	8002698 <LL_SYSCFG_DisableDBATT>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026fc:	46c0      	nop			; (mov r8, r8)
 80026fe:	46bd      	mov	sp, r7
 8002700:	b002      	add	sp, #8
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40021000 	.word	0x40021000

08002708 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a0a      	ldr	r2, [pc, #40]	; (8002740 <HAL_TIM_Base_MspInit+0x38>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d10d      	bne.n	8002736 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800271a:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <HAL_TIM_Base_MspInit+0x3c>)
 800271c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800271e:	4b09      	ldr	r3, [pc, #36]	; (8002744 <HAL_TIM_Base_MspInit+0x3c>)
 8002720:	2180      	movs	r1, #128	; 0x80
 8002722:	0109      	lsls	r1, r1, #4
 8002724:	430a      	orrs	r2, r1
 8002726:	641a      	str	r2, [r3, #64]	; 0x40
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_TIM_Base_MspInit+0x3c>)
 800272a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800272c:	2380      	movs	r3, #128	; 0x80
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	4013      	ands	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	46bd      	mov	sp, r7
 800273a:	b004      	add	sp, #16
 800273c:	bd80      	pop	{r7, pc}
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	40012c00 	.word	0x40012c00
 8002744:	40021000 	.word	0x40021000

08002748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	; 0x28
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	2314      	movs	r3, #20
 8002752:	18fb      	adds	r3, r7, r3
 8002754:	0018      	movs	r0, r3
 8002756:	2314      	movs	r3, #20
 8002758:	001a      	movs	r2, r3
 800275a:	2100      	movs	r1, #0
 800275c:	f003 f976 	bl	8005a4c <memset>
  if(huart->Instance==USART2)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a1b      	ldr	r2, [pc, #108]	; (80027d4 <HAL_UART_MspInit+0x8c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d130      	bne.n	80027cc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800276a:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <HAL_UART_MspInit+0x90>)
 800276c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800276e:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <HAL_UART_MspInit+0x90>)
 8002770:	2180      	movs	r1, #128	; 0x80
 8002772:	0289      	lsls	r1, r1, #10
 8002774:	430a      	orrs	r2, r1
 8002776:	63da      	str	r2, [r3, #60]	; 0x3c
 8002778:	4b17      	ldr	r3, [pc, #92]	; (80027d8 <HAL_UART_MspInit+0x90>)
 800277a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800277c:	2380      	movs	r3, #128	; 0x80
 800277e:	029b      	lsls	r3, r3, #10
 8002780:	4013      	ands	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002786:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <HAL_UART_MspInit+0x90>)
 8002788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800278a:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <HAL_UART_MspInit+0x90>)
 800278c:	2101      	movs	r1, #1
 800278e:	430a      	orrs	r2, r1
 8002790:	635a      	str	r2, [r3, #52]	; 0x34
 8002792:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <HAL_UART_MspInit+0x90>)
 8002794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002796:	2201      	movs	r2, #1
 8002798:	4013      	ands	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800279e:	2114      	movs	r1, #20
 80027a0:	187b      	adds	r3, r7, r1
 80027a2:	220c      	movs	r2, #12
 80027a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a6:	187b      	adds	r3, r7, r1
 80027a8:	2202      	movs	r2, #2
 80027aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027ac:	187b      	adds	r3, r7, r1
 80027ae:	2201      	movs	r2, #1
 80027b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b2:	187b      	adds	r3, r7, r1
 80027b4:	2200      	movs	r2, #0
 80027b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80027b8:	187b      	adds	r3, r7, r1
 80027ba:	2201      	movs	r2, #1
 80027bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027be:	187a      	adds	r2, r7, r1
 80027c0:	23a0      	movs	r3, #160	; 0xa0
 80027c2:	05db      	lsls	r3, r3, #23
 80027c4:	0011      	movs	r1, r2
 80027c6:	0018      	movs	r0, r3
 80027c8:	f000 f9de 	bl	8002b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027cc:	46c0      	nop			; (mov r8, r8)
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b00a      	add	sp, #40	; 0x28
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40004400 	.word	0x40004400
 80027d8:	40021000 	.word	0x40021000

080027dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027e0:	46c0      	nop			; (mov r8, r8)
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ea:	e7fe      	b.n	80027ea <HardFault_Handler+0x4>

080027ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80027f0:	46c0      	nop			; (mov r8, r8)
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002804:	f000 f8d0 	bl	80029a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002808:	46c0      	nop			; (mov r8, r8)
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002818:	4b11      	ldr	r3, [pc, #68]	; (8002860 <_sbrk+0x50>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d102      	bne.n	8002826 <_sbrk+0x16>
		heap_end = &end;
 8002820:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <_sbrk+0x50>)
 8002822:	4a10      	ldr	r2, [pc, #64]	; (8002864 <_sbrk+0x54>)
 8002824:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002826:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <_sbrk+0x50>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800282c:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <_sbrk+0x50>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	18d3      	adds	r3, r2, r3
 8002834:	466a      	mov	r2, sp
 8002836:	4293      	cmp	r3, r2
 8002838:	d907      	bls.n	800284a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800283a:	f003 f8dd 	bl	80059f8 <__errno>
 800283e:	0003      	movs	r3, r0
 8002840:	220c      	movs	r2, #12
 8002842:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002844:	2301      	movs	r3, #1
 8002846:	425b      	negs	r3, r3
 8002848:	e006      	b.n	8002858 <_sbrk+0x48>
	}

	heap_end += incr;
 800284a:	4b05      	ldr	r3, [pc, #20]	; (8002860 <_sbrk+0x50>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	18d2      	adds	r2, r2, r3
 8002852:	4b03      	ldr	r3, [pc, #12]	; (8002860 <_sbrk+0x50>)
 8002854:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8002856:	68fb      	ldr	r3, [r7, #12]
}
 8002858:	0018      	movs	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	b004      	add	sp, #16
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20000098 	.word	0x20000098
 8002864:	200001b8 	.word	0x200001b8

08002868 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800286c:	4b03      	ldr	r3, [pc, #12]	; (800287c <SystemInit+0x14>)
 800286e:	2280      	movs	r2, #128	; 0x80
 8002870:	0512      	lsls	r2, r2, #20
 8002872:	609a      	str	r2, [r3, #8]
#endif
}
 8002874:	46c0      	nop			; (mov r8, r8)
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002880:	480d      	ldr	r0, [pc, #52]	; (80028b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002882:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002884:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002886:	e003      	b.n	8002890 <LoopCopyDataInit>

08002888 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002888:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800288a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800288c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800288e:	3104      	adds	r1, #4

08002890 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002890:	480b      	ldr	r0, [pc, #44]	; (80028c0 <LoopForever+0xa>)
  ldr r3, =_edata
 8002892:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <LoopForever+0xe>)
  adds r2, r0, r1
 8002894:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002896:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002898:	d3f6      	bcc.n	8002888 <CopyDataInit>
  ldr r2, =_sbss
 800289a:	4a0b      	ldr	r2, [pc, #44]	; (80028c8 <LoopForever+0x12>)
  b LoopFillZerobss
 800289c:	e002      	b.n	80028a4 <LoopFillZerobss>

0800289e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800289e:	2300      	movs	r3, #0
  str  r3, [r2]
 80028a0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028a2:	3204      	adds	r2, #4

080028a4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80028a4:	4b09      	ldr	r3, [pc, #36]	; (80028cc <LoopForever+0x16>)
  cmp r2, r3
 80028a6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80028a8:	d3f9      	bcc.n	800289e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80028aa:	f7ff ffdd 	bl	8002868 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80028ae:	f003 f8a9 	bl	8005a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028b2:	f7ff fc19 	bl	80020e8 <main>

080028b6 <LoopForever>:

LoopForever:
    b LoopForever
 80028b6:	e7fe      	b.n	80028b6 <LoopForever>
  ldr   r0, =_estack
 80028b8:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 80028bc:	080063c8 	.word	0x080063c8
  ldr r0, =_sdata
 80028c0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80028c4:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 80028c8:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80028cc:	200001b8 	.word	0x200001b8

080028d0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028d0:	e7fe      	b.n	80028d0 <ADC1_COMP_IRQHandler>
	...

080028d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028da:	1dfb      	adds	r3, r7, #7
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_Init+0x3c>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <HAL_Init+0x3c>)
 80028e6:	2180      	movs	r1, #128	; 0x80
 80028e8:	0049      	lsls	r1, r1, #1
 80028ea:	430a      	orrs	r2, r1
 80028ec:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028ee:	2000      	movs	r0, #0
 80028f0:	f000 f810 	bl	8002914 <HAL_InitTick>
 80028f4:	1e03      	subs	r3, r0, #0
 80028f6:	d003      	beq.n	8002900 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80028f8:	1dfb      	adds	r3, r7, #7
 80028fa:	2201      	movs	r2, #1
 80028fc:	701a      	strb	r2, [r3, #0]
 80028fe:	e001      	b.n	8002904 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002900:	f7ff feda 	bl	80026b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002904:	1dfb      	adds	r3, r7, #7
 8002906:	781b      	ldrb	r3, [r3, #0]
}
 8002908:	0018      	movs	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	b002      	add	sp, #8
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40022000 	.word	0x40022000

08002914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002914:	b590      	push	{r4, r7, lr}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800291c:	230f      	movs	r3, #15
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8002924:	4b1d      	ldr	r3, [pc, #116]	; (800299c <HAL_InitTick+0x88>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d02b      	beq.n	8002984 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 800292c:	4b1c      	ldr	r3, [pc, #112]	; (80029a0 <HAL_InitTick+0x8c>)
 800292e:	681c      	ldr	r4, [r3, #0]
 8002930:	4b1a      	ldr	r3, [pc, #104]	; (800299c <HAL_InitTick+0x88>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	0019      	movs	r1, r3
 8002936:	23fa      	movs	r3, #250	; 0xfa
 8002938:	0098      	lsls	r0, r3, #2
 800293a:	f7fd fbe3 	bl	8000104 <__udivsi3>
 800293e:	0003      	movs	r3, r0
 8002940:	0019      	movs	r1, r3
 8002942:	0020      	movs	r0, r4
 8002944:	f7fd fbde 	bl	8000104 <__udivsi3>
 8002948:	0003      	movs	r3, r0
 800294a:	0018      	movs	r0, r3
 800294c:	f000 f90f 	bl	8002b6e <HAL_SYSTICK_Config>
 8002950:	1e03      	subs	r3, r0, #0
 8002952:	d112      	bne.n	800297a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b03      	cmp	r3, #3
 8002958:	d80a      	bhi.n	8002970 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	2301      	movs	r3, #1
 800295e:	425b      	negs	r3, r3
 8002960:	2200      	movs	r2, #0
 8002962:	0018      	movs	r0, r3
 8002964:	f000 f8ee 	bl	8002b44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002968:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <HAL_InitTick+0x90>)
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	e00d      	b.n	800298c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002970:	230f      	movs	r3, #15
 8002972:	18fb      	adds	r3, r7, r3
 8002974:	2201      	movs	r2, #1
 8002976:	701a      	strb	r2, [r3, #0]
 8002978:	e008      	b.n	800298c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800297a:	230f      	movs	r3, #15
 800297c:	18fb      	adds	r3, r7, r3
 800297e:	2201      	movs	r2, #1
 8002980:	701a      	strb	r2, [r3, #0]
 8002982:	e003      	b.n	800298c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002984:	230f      	movs	r3, #15
 8002986:	18fb      	adds	r3, r7, r3
 8002988:	2201      	movs	r2, #1
 800298a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800298c:	230f      	movs	r3, #15
 800298e:	18fb      	adds	r3, r7, r3
 8002990:	781b      	ldrb	r3, [r3, #0]
}
 8002992:	0018      	movs	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	b005      	add	sp, #20
 8002998:	bd90      	pop	{r4, r7, pc}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	20000010 	.word	0x20000010
 80029a0:	20000008 	.word	0x20000008
 80029a4:	2000000c 	.word	0x2000000c

080029a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029ac:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <HAL_IncTick+0x18>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <HAL_IncTick+0x1c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	18d2      	adds	r2, r2, r3
 80029b6:	4b02      	ldr	r3, [pc, #8]	; (80029c0 <HAL_IncTick+0x18>)
 80029b8:	601a      	str	r2, [r3, #0]
}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	200001b0 	.word	0x200001b0
 80029c4:	20000010 	.word	0x20000010

080029c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  return uwTick;
 80029cc:	4b02      	ldr	r3, [pc, #8]	; (80029d8 <HAL_GetTick+0x10>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	0018      	movs	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	200001b0 	.word	0x200001b0

080029dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029e4:	f7ff fff0 	bl	80029c8 <HAL_GetTick>
 80029e8:	0003      	movs	r3, r0
 80029ea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	3301      	adds	r3, #1
 80029f4:	d004      	beq.n	8002a00 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <HAL_Delay+0x40>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	18d3      	adds	r3, r2, r3
 80029fe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a00:	46c0      	nop			; (mov r8, r8)
 8002a02:	f7ff ffe1 	bl	80029c8 <HAL_GetTick>
 8002a06:	0002      	movs	r2, r0
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d8f7      	bhi.n	8002a02 <HAL_Delay+0x26>
  {
  }
}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b004      	add	sp, #16
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	20000010 	.word	0x20000010

08002a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a20:	b590      	push	{r4, r7, lr}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	0002      	movs	r2, r0
 8002a28:	6039      	str	r1, [r7, #0]
 8002a2a:	1dfb      	adds	r3, r7, #7
 8002a2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a2e:	1dfb      	adds	r3, r7, #7
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b7f      	cmp	r3, #127	; 0x7f
 8002a34:	d828      	bhi.n	8002a88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a36:	4a2f      	ldr	r2, [pc, #188]	; (8002af4 <__NVIC_SetPriority+0xd4>)
 8002a38:	1dfb      	adds	r3, r7, #7
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	b25b      	sxtb	r3, r3
 8002a3e:	089b      	lsrs	r3, r3, #2
 8002a40:	33c0      	adds	r3, #192	; 0xc0
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	589b      	ldr	r3, [r3, r2]
 8002a46:	1dfa      	adds	r2, r7, #7
 8002a48:	7812      	ldrb	r2, [r2, #0]
 8002a4a:	0011      	movs	r1, r2
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	400a      	ands	r2, r1
 8002a50:	00d2      	lsls	r2, r2, #3
 8002a52:	21ff      	movs	r1, #255	; 0xff
 8002a54:	4091      	lsls	r1, r2
 8002a56:	000a      	movs	r2, r1
 8002a58:	43d2      	mvns	r2, r2
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	019b      	lsls	r3, r3, #6
 8002a62:	22ff      	movs	r2, #255	; 0xff
 8002a64:	401a      	ands	r2, r3
 8002a66:	1dfb      	adds	r3, r7, #7
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	4003      	ands	r3, r0
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a74:	481f      	ldr	r0, [pc, #124]	; (8002af4 <__NVIC_SetPriority+0xd4>)
 8002a76:	1dfb      	adds	r3, r7, #7
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	b25b      	sxtb	r3, r3
 8002a7c:	089b      	lsrs	r3, r3, #2
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	33c0      	adds	r3, #192	; 0xc0
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002a86:	e031      	b.n	8002aec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a88:	4a1b      	ldr	r2, [pc, #108]	; (8002af8 <__NVIC_SetPriority+0xd8>)
 8002a8a:	1dfb      	adds	r3, r7, #7
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	0019      	movs	r1, r3
 8002a90:	230f      	movs	r3, #15
 8002a92:	400b      	ands	r3, r1
 8002a94:	3b08      	subs	r3, #8
 8002a96:	089b      	lsrs	r3, r3, #2
 8002a98:	3306      	adds	r3, #6
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	18d3      	adds	r3, r2, r3
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	1dfa      	adds	r2, r7, #7
 8002aa4:	7812      	ldrb	r2, [r2, #0]
 8002aa6:	0011      	movs	r1, r2
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	400a      	ands	r2, r1
 8002aac:	00d2      	lsls	r2, r2, #3
 8002aae:	21ff      	movs	r1, #255	; 0xff
 8002ab0:	4091      	lsls	r1, r2
 8002ab2:	000a      	movs	r2, r1
 8002ab4:	43d2      	mvns	r2, r2
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	019b      	lsls	r3, r3, #6
 8002abe:	22ff      	movs	r2, #255	; 0xff
 8002ac0:	401a      	ands	r2, r3
 8002ac2:	1dfb      	adds	r3, r7, #7
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	2303      	movs	r3, #3
 8002aca:	4003      	ands	r3, r0
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ad0:	4809      	ldr	r0, [pc, #36]	; (8002af8 <__NVIC_SetPriority+0xd8>)
 8002ad2:	1dfb      	adds	r3, r7, #7
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	001c      	movs	r4, r3
 8002ad8:	230f      	movs	r3, #15
 8002ada:	4023      	ands	r3, r4
 8002adc:	3b08      	subs	r3, #8
 8002ade:	089b      	lsrs	r3, r3, #2
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	3306      	adds	r3, #6
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	18c3      	adds	r3, r0, r3
 8002ae8:	3304      	adds	r3, #4
 8002aea:	601a      	str	r2, [r3, #0]
}
 8002aec:	46c0      	nop			; (mov r8, r8)
 8002aee:	46bd      	mov	sp, r7
 8002af0:	b003      	add	sp, #12
 8002af2:	bd90      	pop	{r4, r7, pc}
 8002af4:	e000e100 	.word	0xe000e100
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	4a0c      	ldr	r2, [pc, #48]	; (8002b3c <SysTick_Config+0x40>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d901      	bls.n	8002b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e010      	b.n	8002b34 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b12:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <SysTick_Config+0x44>)
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	3a01      	subs	r2, #1
 8002b18:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	425b      	negs	r3, r3
 8002b1e:	2103      	movs	r1, #3
 8002b20:	0018      	movs	r0, r3
 8002b22:	f7ff ff7d 	bl	8002a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b26:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <SysTick_Config+0x44>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b2c:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <SysTick_Config+0x44>)
 8002b2e:	2207      	movs	r2, #7
 8002b30:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	0018      	movs	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b002      	add	sp, #8
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	00ffffff 	.word	0x00ffffff
 8002b40:	e000e010 	.word	0xe000e010

08002b44 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
 8002b4e:	210f      	movs	r1, #15
 8002b50:	187b      	adds	r3, r7, r1
 8002b52:	1c02      	adds	r2, r0, #0
 8002b54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	187b      	adds	r3, r7, r1
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	b25b      	sxtb	r3, r3
 8002b5e:	0011      	movs	r1, r2
 8002b60:	0018      	movs	r0, r3
 8002b62:	f7ff ff5d 	bl	8002a20 <__NVIC_SetPriority>
}
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	b004      	add	sp, #16
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f7ff ffbf 	bl	8002afc <SysTick_Config>
 8002b7e:	0003      	movs	r3, r0
}
 8002b80:	0018      	movs	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b002      	add	sp, #8
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b92:	2300      	movs	r3, #0
 8002b94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b96:	e147      	b.n	8002e28 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4091      	lsls	r1, r2
 8002ba2:	000a      	movs	r2, r1
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d100      	bne.n	8002bb0 <HAL_GPIO_Init+0x28>
 8002bae:	e138      	b.n	8002e22 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d003      	beq.n	8002bc0 <HAL_GPIO_Init+0x38>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b12      	cmp	r3, #18
 8002bbe:	d123      	bne.n	8002c08 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	08da      	lsrs	r2, r3, #3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3208      	adds	r2, #8
 8002bc8:	0092      	lsls	r2, r2, #2
 8002bca:	58d3      	ldr	r3, [r2, r3]
 8002bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2207      	movs	r2, #7
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	220f      	movs	r2, #15
 8002bd8:	409a      	lsls	r2, r3
 8002bda:	0013      	movs	r3, r2
 8002bdc:	43da      	mvns	r2, r3
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	4013      	ands	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	2107      	movs	r1, #7
 8002bec:	400b      	ands	r3, r1
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	409a      	lsls	r2, r3
 8002bf2:	0013      	movs	r3, r2
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	08da      	lsrs	r2, r3, #3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3208      	adds	r2, #8
 8002c02:	0092      	lsls	r2, r2, #2
 8002c04:	6939      	ldr	r1, [r7, #16]
 8002c06:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	2203      	movs	r2, #3
 8002c14:	409a      	lsls	r2, r3
 8002c16:	0013      	movs	r3, r2
 8002c18:	43da      	mvns	r2, r3
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2203      	movs	r2, #3
 8002c26:	401a      	ands	r2, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	409a      	lsls	r2, r3
 8002c2e:	0013      	movs	r3, r2
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d00b      	beq.n	8002c5c <HAL_GPIO_Init+0xd4>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d007      	beq.n	8002c5c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c50:	2b11      	cmp	r3, #17
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b12      	cmp	r3, #18
 8002c5a:	d130      	bne.n	8002cbe <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	2203      	movs	r2, #3
 8002c68:	409a      	lsls	r2, r3
 8002c6a:	0013      	movs	r3, r2
 8002c6c:	43da      	mvns	r2, r3
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4013      	ands	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	409a      	lsls	r2, r3
 8002c7e:	0013      	movs	r3, r2
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c92:	2201      	movs	r2, #1
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	409a      	lsls	r2, r3
 8002c98:	0013      	movs	r3, r2
 8002c9a:	43da      	mvns	r2, r3
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	091b      	lsrs	r3, r3, #4
 8002ca8:	2201      	movs	r2, #1
 8002caa:	401a      	ands	r2, r3
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	409a      	lsls	r2, r3
 8002cb0:	0013      	movs	r3, r2
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	2203      	movs	r2, #3
 8002cca:	409a      	lsls	r2, r3
 8002ccc:	0013      	movs	r3, r2
 8002cce:	43da      	mvns	r2, r3
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	0013      	movs	r3, r2
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	2380      	movs	r3, #128	; 0x80
 8002cf4:	055b      	lsls	r3, r3, #21
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	d100      	bne.n	8002cfc <HAL_GPIO_Init+0x174>
 8002cfa:	e092      	b.n	8002e22 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002cfc:	4a50      	ldr	r2, [pc, #320]	; (8002e40 <HAL_GPIO_Init+0x2b8>)
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	089b      	lsrs	r3, r3, #2
 8002d02:	3318      	adds	r3, #24
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	589b      	ldr	r3, [r3, r2]
 8002d08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	4013      	ands	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	220f      	movs	r2, #15
 8002d14:	409a      	lsls	r2, r3
 8002d16:	0013      	movs	r3, r2
 8002d18:	43da      	mvns	r2, r3
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	23a0      	movs	r3, #160	; 0xa0
 8002d24:	05db      	lsls	r3, r3, #23
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d013      	beq.n	8002d52 <HAL_GPIO_Init+0x1ca>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a45      	ldr	r2, [pc, #276]	; (8002e44 <HAL_GPIO_Init+0x2bc>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d00d      	beq.n	8002d4e <HAL_GPIO_Init+0x1c6>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a44      	ldr	r2, [pc, #272]	; (8002e48 <HAL_GPIO_Init+0x2c0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d007      	beq.n	8002d4a <HAL_GPIO_Init+0x1c2>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a43      	ldr	r2, [pc, #268]	; (8002e4c <HAL_GPIO_Init+0x2c4>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d101      	bne.n	8002d46 <HAL_GPIO_Init+0x1be>
 8002d42:	2303      	movs	r3, #3
 8002d44:	e006      	b.n	8002d54 <HAL_GPIO_Init+0x1cc>
 8002d46:	2305      	movs	r3, #5
 8002d48:	e004      	b.n	8002d54 <HAL_GPIO_Init+0x1cc>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e002      	b.n	8002d54 <HAL_GPIO_Init+0x1cc>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <HAL_GPIO_Init+0x1cc>
 8002d52:	2300      	movs	r3, #0
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	2103      	movs	r1, #3
 8002d58:	400a      	ands	r2, r1
 8002d5a:	00d2      	lsls	r2, r2, #3
 8002d5c:	4093      	lsls	r3, r2
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002d64:	4936      	ldr	r1, [pc, #216]	; (8002e40 <HAL_GPIO_Init+0x2b8>)
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	089b      	lsrs	r3, r3, #2
 8002d6a:	3318      	adds	r3, #24
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d72:	4a33      	ldr	r2, [pc, #204]	; (8002e40 <HAL_GPIO_Init+0x2b8>)
 8002d74:	2380      	movs	r3, #128	; 0x80
 8002d76:	58d3      	ldr	r3, [r2, r3]
 8002d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	43da      	mvns	r2, r3
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4013      	ands	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	2380      	movs	r3, #128	; 0x80
 8002d8a:	025b      	lsls	r3, r3, #9
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d003      	beq.n	8002d98 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d98:	4929      	ldr	r1, [pc, #164]	; (8002e40 <HAL_GPIO_Init+0x2b8>)
 8002d9a:	2280      	movs	r2, #128	; 0x80
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8002da0:	4a27      	ldr	r2, [pc, #156]	; (8002e40 <HAL_GPIO_Init+0x2b8>)
 8002da2:	2384      	movs	r3, #132	; 0x84
 8002da4:	58d3      	ldr	r3, [r2, r3]
 8002da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	43da      	mvns	r2, r3
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4013      	ands	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	029b      	lsls	r3, r3, #10
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dc6:	491e      	ldr	r1, [pc, #120]	; (8002e40 <HAL_GPIO_Init+0x2b8>)
 8002dc8:	2284      	movs	r2, #132	; 0x84
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dce:	4b1c      	ldr	r3, [pc, #112]	; (8002e40 <HAL_GPIO_Init+0x2b8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	43da      	mvns	r2, r3
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	2380      	movs	r3, #128	; 0x80
 8002de4:	035b      	lsls	r3, r3, #13
 8002de6:	4013      	ands	r3, r2
 8002de8:	d003      	beq.n	8002df2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002df2:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <HAL_GPIO_Init+0x2b8>)
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <HAL_GPIO_Init+0x2b8>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	43da      	mvns	r2, r3
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	4013      	ands	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	2380      	movs	r3, #128	; 0x80
 8002e0e:	039b      	lsls	r3, r3, #14
 8002e10:	4013      	ands	r3, r2
 8002e12:	d003      	beq.n	8002e1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e1c:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <HAL_GPIO_Init+0x2b8>)
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	3301      	adds	r3, #1
 8002e26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	40da      	lsrs	r2, r3
 8002e30:	1e13      	subs	r3, r2, #0
 8002e32:	d000      	beq.n	8002e36 <HAL_GPIO_Init+0x2ae>
 8002e34:	e6b0      	b.n	8002b98 <HAL_GPIO_Init+0x10>
  }
}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	b006      	add	sp, #24
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	40021800 	.word	0x40021800
 8002e44:	50000400 	.word	0x50000400
 8002e48:	50000800 	.word	0x50000800
 8002e4c:	50000c00 	.word	0x50000c00

08002e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	0008      	movs	r0, r1
 8002e5a:	0011      	movs	r1, r2
 8002e5c:	1cbb      	adds	r3, r7, #2
 8002e5e:	1c02      	adds	r2, r0, #0
 8002e60:	801a      	strh	r2, [r3, #0]
 8002e62:	1c7b      	adds	r3, r7, #1
 8002e64:	1c0a      	adds	r2, r1, #0
 8002e66:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e68:	1c7b      	adds	r3, r7, #1
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d004      	beq.n	8002e7a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e70:	1cbb      	adds	r3, r7, #2
 8002e72:	881a      	ldrh	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e78:	e003      	b.n	8002e82 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e7a:	1cbb      	adds	r3, r7, #2
 8002e7c:	881a      	ldrh	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	46bd      	mov	sp, r7
 8002e86:	b002      	add	sp, #8
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002e94:	4b19      	ldr	r3, [pc, #100]	; (8002efc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a19      	ldr	r2, [pc, #100]	; (8002f00 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	0019      	movs	r1, r3
 8002e9e:	4b17      	ldr	r3, [pc, #92]	; (8002efc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	2380      	movs	r3, #128	; 0x80
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d11f      	bne.n	8002ef0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8002eb0:	4b14      	ldr	r3, [pc, #80]	; (8002f04 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	0013      	movs	r3, r2
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	189b      	adds	r3, r3, r2
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	4912      	ldr	r1, [pc, #72]	; (8002f08 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f7fd f920 	bl	8000104 <__udivsi3>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002eca:	e008      	b.n	8002ede <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	e001      	b.n	8002ede <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e009      	b.n	8002ef2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ede:	4b07      	ldr	r3, [pc, #28]	; (8002efc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002ee0:	695a      	ldr	r2, [r3, #20]
 8002ee2:	2380      	movs	r3, #128	; 0x80
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	401a      	ands	r2, r3
 8002ee8:	2380      	movs	r3, #128	; 0x80
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d0ed      	beq.n	8002ecc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	b004      	add	sp, #16
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	40007000 	.word	0x40007000
 8002f00:	fffff9ff 	.word	0xfffff9ff
 8002f04:	20000008 	.word	0x20000008
 8002f08:	000f4240 	.word	0x000f4240

08002f0c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002f10:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	23e0      	movs	r3, #224	; 0xe0
 8002f16:	01db      	lsls	r3, r3, #7
 8002f18:	4013      	ands	r3, r2
}
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000

08002f24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b088      	sub	sp, #32
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e304      	b.n	8003540 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d100      	bne.n	8002f42 <HAL_RCC_OscConfig+0x1e>
 8002f40:	e07c      	b.n	800303c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f42:	4bc3      	ldr	r3, [pc, #780]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2238      	movs	r2, #56	; 0x38
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f4c:	4bc0      	ldr	r3, [pc, #768]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	2203      	movs	r2, #3
 8002f52:	4013      	ands	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	2b10      	cmp	r3, #16
 8002f5a:	d102      	bne.n	8002f62 <HAL_RCC_OscConfig+0x3e>
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	d002      	beq.n	8002f68 <HAL_RCC_OscConfig+0x44>
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d10b      	bne.n	8002f80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f68:	4bb9      	ldr	r3, [pc, #740]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	2380      	movs	r3, #128	; 0x80
 8002f6e:	029b      	lsls	r3, r3, #10
 8002f70:	4013      	ands	r3, r2
 8002f72:	d062      	beq.n	800303a <HAL_RCC_OscConfig+0x116>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d15e      	bne.n	800303a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e2df      	b.n	8003540 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	2380      	movs	r3, #128	; 0x80
 8002f86:	025b      	lsls	r3, r3, #9
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d107      	bne.n	8002f9c <HAL_RCC_OscConfig+0x78>
 8002f8c:	4bb0      	ldr	r3, [pc, #704]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	4baf      	ldr	r3, [pc, #700]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 8002f92:	2180      	movs	r1, #128	; 0x80
 8002f94:	0249      	lsls	r1, r1, #9
 8002f96:	430a      	orrs	r2, r1
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	e020      	b.n	8002fde <HAL_RCC_OscConfig+0xba>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	23a0      	movs	r3, #160	; 0xa0
 8002fa2:	02db      	lsls	r3, r3, #11
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d10e      	bne.n	8002fc6 <HAL_RCC_OscConfig+0xa2>
 8002fa8:	4ba9      	ldr	r3, [pc, #676]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	4ba8      	ldr	r3, [pc, #672]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 8002fae:	2180      	movs	r1, #128	; 0x80
 8002fb0:	02c9      	lsls	r1, r1, #11
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	4ba6      	ldr	r3, [pc, #664]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	4ba5      	ldr	r3, [pc, #660]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 8002fbc:	2180      	movs	r1, #128	; 0x80
 8002fbe:	0249      	lsls	r1, r1, #9
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	e00b      	b.n	8002fde <HAL_RCC_OscConfig+0xba>
 8002fc6:	4ba2      	ldr	r3, [pc, #648]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	4ba1      	ldr	r3, [pc, #644]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 8002fcc:	49a1      	ldr	r1, [pc, #644]	; (8003254 <HAL_RCC_OscConfig+0x330>)
 8002fce:	400a      	ands	r2, r1
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	4b9f      	ldr	r3, [pc, #636]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	4b9e      	ldr	r3, [pc, #632]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 8002fd8:	499f      	ldr	r1, [pc, #636]	; (8003258 <HAL_RCC_OscConfig+0x334>)
 8002fda:	400a      	ands	r2, r1
 8002fdc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d014      	beq.n	8003010 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe6:	f7ff fcef 	bl	80029c8 <HAL_GetTick>
 8002fea:	0003      	movs	r3, r0
 8002fec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff0:	f7ff fcea 	bl	80029c8 <HAL_GetTick>
 8002ff4:	0002      	movs	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b64      	cmp	r3, #100	; 0x64
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e29e      	b.n	8003540 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003002:	4b93      	ldr	r3, [pc, #588]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	2380      	movs	r3, #128	; 0x80
 8003008:	029b      	lsls	r3, r3, #10
 800300a:	4013      	ands	r3, r2
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0xcc>
 800300e:	e015      	b.n	800303c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003010:	f7ff fcda 	bl	80029c8 <HAL_GetTick>
 8003014:	0003      	movs	r3, r0
 8003016:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800301a:	f7ff fcd5 	bl	80029c8 <HAL_GetTick>
 800301e:	0002      	movs	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b64      	cmp	r3, #100	; 0x64
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e289      	b.n	8003540 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800302c:	4b88      	ldr	r3, [pc, #544]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	2380      	movs	r3, #128	; 0x80
 8003032:	029b      	lsls	r3, r3, #10
 8003034:	4013      	ands	r3, r2
 8003036:	d1f0      	bne.n	800301a <HAL_RCC_OscConfig+0xf6>
 8003038:	e000      	b.n	800303c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800303a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2202      	movs	r2, #2
 8003042:	4013      	ands	r3, r2
 8003044:	d100      	bne.n	8003048 <HAL_RCC_OscConfig+0x124>
 8003046:	e099      	b.n	800317c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003048:	4b81      	ldr	r3, [pc, #516]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2238      	movs	r2, #56	; 0x38
 800304e:	4013      	ands	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003052:	4b7f      	ldr	r3, [pc, #508]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	2203      	movs	r2, #3
 8003058:	4013      	ands	r3, r2
 800305a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	2b10      	cmp	r3, #16
 8003060:	d102      	bne.n	8003068 <HAL_RCC_OscConfig+0x144>
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b02      	cmp	r3, #2
 8003066:	d002      	beq.n	800306e <HAL_RCC_OscConfig+0x14a>
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d135      	bne.n	80030da <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800306e:	4b78      	ldr	r3, [pc, #480]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	2380      	movs	r3, #128	; 0x80
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4013      	ands	r3, r2
 8003078:	d005      	beq.n	8003086 <HAL_RCC_OscConfig+0x162>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e25c      	b.n	8003540 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003086:	4b72      	ldr	r3, [pc, #456]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4a74      	ldr	r2, [pc, #464]	; (800325c <HAL_RCC_OscConfig+0x338>)
 800308c:	4013      	ands	r3, r2
 800308e:	0019      	movs	r1, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	021a      	lsls	r2, r3, #8
 8003096:	4b6e      	ldr	r3, [pc, #440]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 8003098:	430a      	orrs	r2, r1
 800309a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d112      	bne.n	80030c8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80030a2:	4b6b      	ldr	r3, [pc, #428]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a6e      	ldr	r2, [pc, #440]	; (8003260 <HAL_RCC_OscConfig+0x33c>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	0019      	movs	r1, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691a      	ldr	r2, [r3, #16]
 80030b0:	4b67      	ldr	r3, [pc, #412]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 80030b2:	430a      	orrs	r2, r1
 80030b4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80030b6:	4b66      	ldr	r3, [pc, #408]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	0adb      	lsrs	r3, r3, #11
 80030bc:	2207      	movs	r2, #7
 80030be:	4013      	ands	r3, r2
 80030c0:	4a68      	ldr	r2, [pc, #416]	; (8003264 <HAL_RCC_OscConfig+0x340>)
 80030c2:	40da      	lsrs	r2, r3
 80030c4:	4b68      	ldr	r3, [pc, #416]	; (8003268 <HAL_RCC_OscConfig+0x344>)
 80030c6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80030c8:	4b68      	ldr	r3, [pc, #416]	; (800326c <HAL_RCC_OscConfig+0x348>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	0018      	movs	r0, r3
 80030ce:	f7ff fc21 	bl	8002914 <HAL_InitTick>
 80030d2:	1e03      	subs	r3, r0, #0
 80030d4:	d051      	beq.n	800317a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e232      	b.n	8003540 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d030      	beq.n	8003144 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80030e2:	4b5b      	ldr	r3, [pc, #364]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a5e      	ldr	r2, [pc, #376]	; (8003260 <HAL_RCC_OscConfig+0x33c>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	0019      	movs	r1, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	4b57      	ldr	r3, [pc, #348]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 80030f2:	430a      	orrs	r2, r1
 80030f4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80030f6:	4b56      	ldr	r3, [pc, #344]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	4b55      	ldr	r3, [pc, #340]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 80030fc:	2180      	movs	r1, #128	; 0x80
 80030fe:	0049      	lsls	r1, r1, #1
 8003100:	430a      	orrs	r2, r1
 8003102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003104:	f7ff fc60 	bl	80029c8 <HAL_GetTick>
 8003108:	0003      	movs	r3, r0
 800310a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800310e:	f7ff fc5b 	bl	80029c8 <HAL_GetTick>
 8003112:	0002      	movs	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e20f      	b.n	8003540 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003120:	4b4b      	ldr	r3, [pc, #300]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4013      	ands	r3, r2
 800312a:	d0f0      	beq.n	800310e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312c:	4b48      	ldr	r3, [pc, #288]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4a4a      	ldr	r2, [pc, #296]	; (800325c <HAL_RCC_OscConfig+0x338>)
 8003132:	4013      	ands	r3, r2
 8003134:	0019      	movs	r1, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	021a      	lsls	r2, r3, #8
 800313c:	4b44      	ldr	r3, [pc, #272]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 800313e:	430a      	orrs	r2, r1
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	e01b      	b.n	800317c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003144:	4b42      	ldr	r3, [pc, #264]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4b41      	ldr	r3, [pc, #260]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 800314a:	4949      	ldr	r1, [pc, #292]	; (8003270 <HAL_RCC_OscConfig+0x34c>)
 800314c:	400a      	ands	r2, r1
 800314e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003150:	f7ff fc3a 	bl	80029c8 <HAL_GetTick>
 8003154:	0003      	movs	r3, r0
 8003156:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800315a:	f7ff fc35 	bl	80029c8 <HAL_GetTick>
 800315e:	0002      	movs	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e1e9      	b.n	8003540 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800316c:	4b38      	ldr	r3, [pc, #224]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	4013      	ands	r3, r2
 8003176:	d1f0      	bne.n	800315a <HAL_RCC_OscConfig+0x236>
 8003178:	e000      	b.n	800317c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800317a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2208      	movs	r2, #8
 8003182:	4013      	ands	r3, r2
 8003184:	d047      	beq.n	8003216 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003186:	4b32      	ldr	r3, [pc, #200]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	2238      	movs	r2, #56	; 0x38
 800318c:	4013      	ands	r3, r2
 800318e:	2b18      	cmp	r3, #24
 8003190:	d10a      	bne.n	80031a8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003192:	4b2f      	ldr	r3, [pc, #188]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 8003194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003196:	2202      	movs	r2, #2
 8003198:	4013      	ands	r3, r2
 800319a:	d03c      	beq.n	8003216 <HAL_RCC_OscConfig+0x2f2>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d138      	bne.n	8003216 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e1cb      	b.n	8003540 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d019      	beq.n	80031e4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80031b0:	4b27      	ldr	r3, [pc, #156]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 80031b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031b4:	4b26      	ldr	r3, [pc, #152]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 80031b6:	2101      	movs	r1, #1
 80031b8:	430a      	orrs	r2, r1
 80031ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031bc:	f7ff fc04 	bl	80029c8 <HAL_GetTick>
 80031c0:	0003      	movs	r3, r0
 80031c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c6:	f7ff fbff 	bl	80029c8 <HAL_GetTick>
 80031ca:	0002      	movs	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e1b3      	b.n	8003540 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031d8:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 80031da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031dc:	2202      	movs	r2, #2
 80031de:	4013      	ands	r3, r2
 80031e0:	d0f1      	beq.n	80031c6 <HAL_RCC_OscConfig+0x2a2>
 80031e2:	e018      	b.n	8003216 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80031e4:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 80031e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031e8:	4b19      	ldr	r3, [pc, #100]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 80031ea:	2101      	movs	r1, #1
 80031ec:	438a      	bics	r2, r1
 80031ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7ff fbea 	bl	80029c8 <HAL_GetTick>
 80031f4:	0003      	movs	r3, r0
 80031f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031fa:	f7ff fbe5 	bl	80029c8 <HAL_GetTick>
 80031fe:	0002      	movs	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e199      	b.n	8003540 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800320c:	4b10      	ldr	r3, [pc, #64]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 800320e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003210:	2202      	movs	r2, #2
 8003212:	4013      	ands	r3, r2
 8003214:	d1f1      	bne.n	80031fa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2204      	movs	r2, #4
 800321c:	4013      	ands	r3, r2
 800321e:	d100      	bne.n	8003222 <HAL_RCC_OscConfig+0x2fe>
 8003220:	e0c6      	b.n	80033b0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003222:	231f      	movs	r3, #31
 8003224:	18fb      	adds	r3, r7, r3
 8003226:	2200      	movs	r2, #0
 8003228:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800322a:	4b09      	ldr	r3, [pc, #36]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2238      	movs	r2, #56	; 0x38
 8003230:	4013      	ands	r3, r2
 8003232:	2b20      	cmp	r3, #32
 8003234:	d11e      	bne.n	8003274 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003236:	4b06      	ldr	r3, [pc, #24]	; (8003250 <HAL_RCC_OscConfig+0x32c>)
 8003238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323a:	2202      	movs	r2, #2
 800323c:	4013      	ands	r3, r2
 800323e:	d100      	bne.n	8003242 <HAL_RCC_OscConfig+0x31e>
 8003240:	e0b6      	b.n	80033b0 <HAL_RCC_OscConfig+0x48c>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d000      	beq.n	800324c <HAL_RCC_OscConfig+0x328>
 800324a:	e0b1      	b.n	80033b0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e177      	b.n	8003540 <HAL_RCC_OscConfig+0x61c>
 8003250:	40021000 	.word	0x40021000
 8003254:	fffeffff 	.word	0xfffeffff
 8003258:	fffbffff 	.word	0xfffbffff
 800325c:	ffff80ff 	.word	0xffff80ff
 8003260:	ffffc7ff 	.word	0xffffc7ff
 8003264:	00f42400 	.word	0x00f42400
 8003268:	20000008 	.word	0x20000008
 800326c:	2000000c 	.word	0x2000000c
 8003270:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003274:	4bb4      	ldr	r3, [pc, #720]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 8003276:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003278:	2380      	movs	r3, #128	; 0x80
 800327a:	055b      	lsls	r3, r3, #21
 800327c:	4013      	ands	r3, r2
 800327e:	d101      	bne.n	8003284 <HAL_RCC_OscConfig+0x360>
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <HAL_RCC_OscConfig+0x362>
 8003284:	2300      	movs	r3, #0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d011      	beq.n	80032ae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800328a:	4baf      	ldr	r3, [pc, #700]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 800328c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800328e:	4bae      	ldr	r3, [pc, #696]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 8003290:	2180      	movs	r1, #128	; 0x80
 8003292:	0549      	lsls	r1, r1, #21
 8003294:	430a      	orrs	r2, r1
 8003296:	63da      	str	r2, [r3, #60]	; 0x3c
 8003298:	4bab      	ldr	r3, [pc, #684]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 800329a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800329c:	2380      	movs	r3, #128	; 0x80
 800329e:	055b      	lsls	r3, r3, #21
 80032a0:	4013      	ands	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80032a6:	231f      	movs	r3, #31
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	2201      	movs	r2, #1
 80032ac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ae:	4ba7      	ldr	r3, [pc, #668]	; (800354c <HAL_RCC_OscConfig+0x628>)
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	4013      	ands	r3, r2
 80032b8:	d11a      	bne.n	80032f0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032ba:	4ba4      	ldr	r3, [pc, #656]	; (800354c <HAL_RCC_OscConfig+0x628>)
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	4ba3      	ldr	r3, [pc, #652]	; (800354c <HAL_RCC_OscConfig+0x628>)
 80032c0:	2180      	movs	r1, #128	; 0x80
 80032c2:	0049      	lsls	r1, r1, #1
 80032c4:	430a      	orrs	r2, r1
 80032c6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80032c8:	f7ff fb7e 	bl	80029c8 <HAL_GetTick>
 80032cc:	0003      	movs	r3, r0
 80032ce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d2:	f7ff fb79 	bl	80029c8 <HAL_GetTick>
 80032d6:	0002      	movs	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e12d      	b.n	8003540 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032e4:	4b99      	ldr	r3, [pc, #612]	; (800354c <HAL_RCC_OscConfig+0x628>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	2380      	movs	r3, #128	; 0x80
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	4013      	ands	r3, r2
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d106      	bne.n	8003306 <HAL_RCC_OscConfig+0x3e2>
 80032f8:	4b93      	ldr	r3, [pc, #588]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 80032fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032fc:	4b92      	ldr	r3, [pc, #584]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 80032fe:	2101      	movs	r1, #1
 8003300:	430a      	orrs	r2, r1
 8003302:	65da      	str	r2, [r3, #92]	; 0x5c
 8003304:	e01c      	b.n	8003340 <HAL_RCC_OscConfig+0x41c>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	2b05      	cmp	r3, #5
 800330c:	d10c      	bne.n	8003328 <HAL_RCC_OscConfig+0x404>
 800330e:	4b8e      	ldr	r3, [pc, #568]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 8003310:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003312:	4b8d      	ldr	r3, [pc, #564]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 8003314:	2104      	movs	r1, #4
 8003316:	430a      	orrs	r2, r1
 8003318:	65da      	str	r2, [r3, #92]	; 0x5c
 800331a:	4b8b      	ldr	r3, [pc, #556]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 800331c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800331e:	4b8a      	ldr	r3, [pc, #552]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 8003320:	2101      	movs	r1, #1
 8003322:	430a      	orrs	r2, r1
 8003324:	65da      	str	r2, [r3, #92]	; 0x5c
 8003326:	e00b      	b.n	8003340 <HAL_RCC_OscConfig+0x41c>
 8003328:	4b87      	ldr	r3, [pc, #540]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 800332a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800332c:	4b86      	ldr	r3, [pc, #536]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 800332e:	2101      	movs	r1, #1
 8003330:	438a      	bics	r2, r1
 8003332:	65da      	str	r2, [r3, #92]	; 0x5c
 8003334:	4b84      	ldr	r3, [pc, #528]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 8003336:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003338:	4b83      	ldr	r3, [pc, #524]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 800333a:	2104      	movs	r1, #4
 800333c:	438a      	bics	r2, r1
 800333e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d014      	beq.n	8003372 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7ff fb3e 	bl	80029c8 <HAL_GetTick>
 800334c:	0003      	movs	r3, r0
 800334e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003350:	e009      	b.n	8003366 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003352:	f7ff fb39 	bl	80029c8 <HAL_GetTick>
 8003356:	0002      	movs	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	4a7c      	ldr	r2, [pc, #496]	; (8003550 <HAL_RCC_OscConfig+0x62c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e0ec      	b.n	8003540 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003366:	4b78      	ldr	r3, [pc, #480]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 8003368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336a:	2202      	movs	r2, #2
 800336c:	4013      	ands	r3, r2
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x42e>
 8003370:	e013      	b.n	800339a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003372:	f7ff fb29 	bl	80029c8 <HAL_GetTick>
 8003376:	0003      	movs	r3, r0
 8003378:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800337a:	e009      	b.n	8003390 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337c:	f7ff fb24 	bl	80029c8 <HAL_GetTick>
 8003380:	0002      	movs	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	4a72      	ldr	r2, [pc, #456]	; (8003550 <HAL_RCC_OscConfig+0x62c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e0d7      	b.n	8003540 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003390:	4b6d      	ldr	r3, [pc, #436]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 8003392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003394:	2202      	movs	r2, #2
 8003396:	4013      	ands	r3, r2
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800339a:	231f      	movs	r3, #31
 800339c:	18fb      	adds	r3, r7, r3
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d105      	bne.n	80033b0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80033a4:	4b68      	ldr	r3, [pc, #416]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 80033a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033a8:	4b67      	ldr	r3, [pc, #412]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 80033aa:	496a      	ldr	r1, [pc, #424]	; (8003554 <HAL_RCC_OscConfig+0x630>)
 80033ac:	400a      	ands	r2, r1
 80033ae:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d100      	bne.n	80033ba <HAL_RCC_OscConfig+0x496>
 80033b8:	e0c1      	b.n	800353e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033ba:	4b63      	ldr	r3, [pc, #396]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	2238      	movs	r2, #56	; 0x38
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b10      	cmp	r3, #16
 80033c4:	d100      	bne.n	80033c8 <HAL_RCC_OscConfig+0x4a4>
 80033c6:	e081      	b.n	80034cc <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d156      	bne.n	800347e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d0:	4b5d      	ldr	r3, [pc, #372]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	4b5c      	ldr	r3, [pc, #368]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 80033d6:	4960      	ldr	r1, [pc, #384]	; (8003558 <HAL_RCC_OscConfig+0x634>)
 80033d8:	400a      	ands	r2, r1
 80033da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7ff faf4 	bl	80029c8 <HAL_GetTick>
 80033e0:	0003      	movs	r3, r0
 80033e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e6:	f7ff faef 	bl	80029c8 <HAL_GetTick>
 80033ea:	0002      	movs	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e0a3      	b.n	8003540 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033f8:	4b53      	ldr	r3, [pc, #332]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	2380      	movs	r3, #128	; 0x80
 80033fe:	049b      	lsls	r3, r3, #18
 8003400:	4013      	ands	r3, r2
 8003402:	d1f0      	bne.n	80033e6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003404:	4b50      	ldr	r3, [pc, #320]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	4a54      	ldr	r2, [pc, #336]	; (800355c <HAL_RCC_OscConfig+0x638>)
 800340a:	4013      	ands	r3, r2
 800340c:	0019      	movs	r1, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1a      	ldr	r2, [r3, #32]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341c:	021b      	lsls	r3, r3, #8
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003430:	431a      	orrs	r2, r3
 8003432:	4b45      	ldr	r3, [pc, #276]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 8003434:	430a      	orrs	r2, r1
 8003436:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003438:	4b43      	ldr	r3, [pc, #268]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4b42      	ldr	r3, [pc, #264]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 800343e:	2180      	movs	r1, #128	; 0x80
 8003440:	0449      	lsls	r1, r1, #17
 8003442:	430a      	orrs	r2, r1
 8003444:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003446:	4b40      	ldr	r3, [pc, #256]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	4b3f      	ldr	r3, [pc, #252]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 800344c:	2180      	movs	r1, #128	; 0x80
 800344e:	0549      	lsls	r1, r1, #21
 8003450:	430a      	orrs	r2, r1
 8003452:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003454:	f7ff fab8 	bl	80029c8 <HAL_GetTick>
 8003458:	0003      	movs	r3, r0
 800345a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345e:	f7ff fab3 	bl	80029c8 <HAL_GetTick>
 8003462:	0002      	movs	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e067      	b.n	8003540 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003470:	4b35      	ldr	r3, [pc, #212]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	2380      	movs	r3, #128	; 0x80
 8003476:	049b      	lsls	r3, r3, #18
 8003478:	4013      	ands	r3, r2
 800347a:	d0f0      	beq.n	800345e <HAL_RCC_OscConfig+0x53a>
 800347c:	e05f      	b.n	800353e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347e:	4b32      	ldr	r3, [pc, #200]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	4b31      	ldr	r3, [pc, #196]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 8003484:	4934      	ldr	r1, [pc, #208]	; (8003558 <HAL_RCC_OscConfig+0x634>)
 8003486:	400a      	ands	r2, r1
 8003488:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800348a:	4b2f      	ldr	r3, [pc, #188]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	4b2e      	ldr	r3, [pc, #184]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 8003490:	2103      	movs	r1, #3
 8003492:	438a      	bics	r2, r1
 8003494:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003496:	4b2c      	ldr	r3, [pc, #176]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 800349c:	4930      	ldr	r1, [pc, #192]	; (8003560 <HAL_RCC_OscConfig+0x63c>)
 800349e:	400a      	ands	r2, r1
 80034a0:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a2:	f7ff fa91 	bl	80029c8 <HAL_GetTick>
 80034a6:	0003      	movs	r3, r0
 80034a8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ac:	f7ff fa8c 	bl	80029c8 <HAL_GetTick>
 80034b0:	0002      	movs	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e040      	b.n	8003540 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034be:	4b22      	ldr	r3, [pc, #136]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	2380      	movs	r3, #128	; 0x80
 80034c4:	049b      	lsls	r3, r3, #18
 80034c6:	4013      	ands	r3, r2
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x588>
 80034ca:	e038      	b.n	800353e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e033      	b.n	8003540 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80034d8:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <HAL_RCC_OscConfig+0x624>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2203      	movs	r2, #3
 80034e2:	401a      	ands	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d126      	bne.n	800353a <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2270      	movs	r2, #112	; 0x70
 80034f0:	401a      	ands	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d11f      	bne.n	800353a <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	23fe      	movs	r3, #254	; 0xfe
 80034fe:	01db      	lsls	r3, r3, #7
 8003500:	401a      	ands	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003506:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003508:	429a      	cmp	r2, r3
 800350a:	d116      	bne.n	800353a <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	23f8      	movs	r3, #248	; 0xf8
 8003510:	039b      	lsls	r3, r3, #14
 8003512:	401a      	ands	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003518:	429a      	cmp	r2, r3
 800351a:	d10e      	bne.n	800353a <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	23e0      	movs	r3, #224	; 0xe0
 8003520:	051b      	lsls	r3, r3, #20
 8003522:	401a      	ands	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003528:	429a      	cmp	r2, r3
 800352a:	d106      	bne.n	800353a <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	0f5b      	lsrs	r3, r3, #29
 8003530:	075a      	lsls	r2, r3, #29
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003536:	429a      	cmp	r2, r3
 8003538:	d001      	beq.n	800353e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	0018      	movs	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	b008      	add	sp, #32
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40021000 	.word	0x40021000
 800354c:	40007000 	.word	0x40007000
 8003550:	00001388 	.word	0x00001388
 8003554:	efffffff 	.word	0xefffffff
 8003558:	feffffff 	.word	0xfeffffff
 800355c:	11c1808c 	.word	0x11c1808c
 8003560:	eefeffff 	.word	0xeefeffff

08003564 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e0e9      	b.n	800374c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003578:	4b76      	ldr	r3, [pc, #472]	; (8003754 <HAL_RCC_ClockConfig+0x1f0>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2207      	movs	r2, #7
 800357e:	4013      	ands	r3, r2
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d91e      	bls.n	80035c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003586:	4b73      	ldr	r3, [pc, #460]	; (8003754 <HAL_RCC_ClockConfig+0x1f0>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2207      	movs	r2, #7
 800358c:	4393      	bics	r3, r2
 800358e:	0019      	movs	r1, r3
 8003590:	4b70      	ldr	r3, [pc, #448]	; (8003754 <HAL_RCC_ClockConfig+0x1f0>)
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003598:	f7ff fa16 	bl	80029c8 <HAL_GetTick>
 800359c:	0003      	movs	r3, r0
 800359e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035a0:	e009      	b.n	80035b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a2:	f7ff fa11 	bl	80029c8 <HAL_GetTick>
 80035a6:	0002      	movs	r2, r0
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	4a6a      	ldr	r2, [pc, #424]	; (8003758 <HAL_RCC_ClockConfig+0x1f4>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e0ca      	b.n	800374c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035b6:	4b67      	ldr	r3, [pc, #412]	; (8003754 <HAL_RCC_ClockConfig+0x1f0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2207      	movs	r2, #7
 80035bc:	4013      	ands	r3, r2
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d1ee      	bne.n	80035a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2202      	movs	r2, #2
 80035ca:	4013      	ands	r3, r2
 80035cc:	d015      	beq.n	80035fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2204      	movs	r2, #4
 80035d4:	4013      	ands	r3, r2
 80035d6:	d006      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80035d8:	4b60      	ldr	r3, [pc, #384]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	4b5f      	ldr	r3, [pc, #380]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 80035de:	21e0      	movs	r1, #224	; 0xe0
 80035e0:	01c9      	lsls	r1, r1, #7
 80035e2:	430a      	orrs	r2, r1
 80035e4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e6:	4b5d      	ldr	r3, [pc, #372]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	4a5d      	ldr	r2, [pc, #372]	; (8003760 <HAL_RCC_ClockConfig+0x1fc>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	0019      	movs	r1, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	4b59      	ldr	r3, [pc, #356]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 80035f6:	430a      	orrs	r2, r1
 80035f8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2201      	movs	r2, #1
 8003600:	4013      	ands	r3, r2
 8003602:	d057      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d107      	bne.n	800361c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800360c:	4b53      	ldr	r3, [pc, #332]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	2380      	movs	r3, #128	; 0x80
 8003612:	029b      	lsls	r3, r3, #10
 8003614:	4013      	ands	r3, r2
 8003616:	d12b      	bne.n	8003670 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e097      	b.n	800374c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b02      	cmp	r3, #2
 8003622:	d107      	bne.n	8003634 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003624:	4b4d      	ldr	r3, [pc, #308]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	2380      	movs	r3, #128	; 0x80
 800362a:	049b      	lsls	r3, r3, #18
 800362c:	4013      	ands	r3, r2
 800362e:	d11f      	bne.n	8003670 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e08b      	b.n	800374c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d107      	bne.n	800364c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800363c:	4b47      	ldr	r3, [pc, #284]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	2380      	movs	r3, #128	; 0x80
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4013      	ands	r3, r2
 8003646:	d113      	bne.n	8003670 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e07f      	b.n	800374c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2b03      	cmp	r3, #3
 8003652:	d106      	bne.n	8003662 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003654:	4b41      	ldr	r3, [pc, #260]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 8003656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003658:	2202      	movs	r2, #2
 800365a:	4013      	ands	r3, r2
 800365c:	d108      	bne.n	8003670 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e074      	b.n	800374c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003662:	4b3e      	ldr	r3, [pc, #248]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 8003664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003666:	2202      	movs	r2, #2
 8003668:	4013      	ands	r3, r2
 800366a:	d101      	bne.n	8003670 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e06d      	b.n	800374c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003670:	4b3a      	ldr	r3, [pc, #232]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	2207      	movs	r2, #7
 8003676:	4393      	bics	r3, r2
 8003678:	0019      	movs	r1, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	4b37      	ldr	r3, [pc, #220]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 8003680:	430a      	orrs	r2, r1
 8003682:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003684:	f7ff f9a0 	bl	80029c8 <HAL_GetTick>
 8003688:	0003      	movs	r3, r0
 800368a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368c:	e009      	b.n	80036a2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800368e:	f7ff f99b 	bl	80029c8 <HAL_GetTick>
 8003692:	0002      	movs	r2, r0
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	4a2f      	ldr	r2, [pc, #188]	; (8003758 <HAL_RCC_ClockConfig+0x1f4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e054      	b.n	800374c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a2:	4b2e      	ldr	r3, [pc, #184]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	2238      	movs	r2, #56	; 0x38
 80036a8:	401a      	ands	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d1ec      	bne.n	800368e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036b4:	4b27      	ldr	r3, [pc, #156]	; (8003754 <HAL_RCC_ClockConfig+0x1f0>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2207      	movs	r2, #7
 80036ba:	4013      	ands	r3, r2
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d21e      	bcs.n	8003700 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c2:	4b24      	ldr	r3, [pc, #144]	; (8003754 <HAL_RCC_ClockConfig+0x1f0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2207      	movs	r2, #7
 80036c8:	4393      	bics	r3, r2
 80036ca:	0019      	movs	r1, r3
 80036cc:	4b21      	ldr	r3, [pc, #132]	; (8003754 <HAL_RCC_ClockConfig+0x1f0>)
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036d4:	f7ff f978 	bl	80029c8 <HAL_GetTick>
 80036d8:	0003      	movs	r3, r0
 80036da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036dc:	e009      	b.n	80036f2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036de:	f7ff f973 	bl	80029c8 <HAL_GetTick>
 80036e2:	0002      	movs	r2, r0
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	4a1b      	ldr	r2, [pc, #108]	; (8003758 <HAL_RCC_ClockConfig+0x1f4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e02c      	b.n	800374c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036f2:	4b18      	ldr	r3, [pc, #96]	; (8003754 <HAL_RCC_ClockConfig+0x1f0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2207      	movs	r2, #7
 80036f8:	4013      	ands	r3, r2
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d1ee      	bne.n	80036de <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2204      	movs	r2, #4
 8003706:	4013      	ands	r3, r2
 8003708:	d009      	beq.n	800371e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800370a:	4b14      	ldr	r3, [pc, #80]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	4a15      	ldr	r2, [pc, #84]	; (8003764 <HAL_RCC_ClockConfig+0x200>)
 8003710:	4013      	ands	r3, r2
 8003712:	0019      	movs	r1, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	4b10      	ldr	r3, [pc, #64]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 800371a:	430a      	orrs	r2, r1
 800371c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800371e:	f000 f829 	bl	8003774 <HAL_RCC_GetSysClockFreq>
 8003722:	0001      	movs	r1, r0
 8003724:	4b0d      	ldr	r3, [pc, #52]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	0a1b      	lsrs	r3, r3, #8
 800372a:	220f      	movs	r2, #15
 800372c:	401a      	ands	r2, r3
 800372e:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <HAL_RCC_ClockConfig+0x204>)
 8003730:	0092      	lsls	r2, r2, #2
 8003732:	58d3      	ldr	r3, [r2, r3]
 8003734:	221f      	movs	r2, #31
 8003736:	4013      	ands	r3, r2
 8003738:	000a      	movs	r2, r1
 800373a:	40da      	lsrs	r2, r3
 800373c:	4b0b      	ldr	r3, [pc, #44]	; (800376c <HAL_RCC_ClockConfig+0x208>)
 800373e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCC_ClockConfig+0x20c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	0018      	movs	r0, r3
 8003746:	f7ff f8e5 	bl	8002914 <HAL_InitTick>
 800374a:	0003      	movs	r3, r0
}
 800374c:	0018      	movs	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	b004      	add	sp, #16
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40022000 	.word	0x40022000
 8003758:	00001388 	.word	0x00001388
 800375c:	40021000 	.word	0x40021000
 8003760:	fffff0ff 	.word	0xfffff0ff
 8003764:	ffff8fff 	.word	0xffff8fff
 8003768:	08006324 	.word	0x08006324
 800376c:	20000008 	.word	0x20000008
 8003770:	2000000c 	.word	0x2000000c

08003774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800377a:	4b3c      	ldr	r3, [pc, #240]	; (800386c <HAL_RCC_GetSysClockFreq+0xf8>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2238      	movs	r2, #56	; 0x38
 8003780:	4013      	ands	r3, r2
 8003782:	d10f      	bne.n	80037a4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003784:	4b39      	ldr	r3, [pc, #228]	; (800386c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	0adb      	lsrs	r3, r3, #11
 800378a:	2207      	movs	r2, #7
 800378c:	4013      	ands	r3, r2
 800378e:	2201      	movs	r2, #1
 8003790:	409a      	lsls	r2, r3
 8003792:	0013      	movs	r3, r2
 8003794:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003796:	6839      	ldr	r1, [r7, #0]
 8003798:	4835      	ldr	r0, [pc, #212]	; (8003870 <HAL_RCC_GetSysClockFreq+0xfc>)
 800379a:	f7fc fcb3 	bl	8000104 <__udivsi3>
 800379e:	0003      	movs	r3, r0
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	e05d      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80037a4:	4b31      	ldr	r3, [pc, #196]	; (800386c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2238      	movs	r2, #56	; 0x38
 80037aa:	4013      	ands	r3, r2
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d102      	bne.n	80037b6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037b0:	4b30      	ldr	r3, [pc, #192]	; (8003874 <HAL_RCC_GetSysClockFreq+0x100>)
 80037b2:	613b      	str	r3, [r7, #16]
 80037b4:	e054      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80037b6:	4b2d      	ldr	r3, [pc, #180]	; (800386c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	2238      	movs	r2, #56	; 0x38
 80037bc:	4013      	ands	r3, r2
 80037be:	2b10      	cmp	r3, #16
 80037c0:	d138      	bne.n	8003834 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80037c2:	4b2a      	ldr	r3, [pc, #168]	; (800386c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2203      	movs	r2, #3
 80037c8:	4013      	ands	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037cc:	4b27      	ldr	r3, [pc, #156]	; (800386c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	2207      	movs	r2, #7
 80037d4:	4013      	ands	r3, r2
 80037d6:	3301      	adds	r3, #1
 80037d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2b03      	cmp	r3, #3
 80037de:	d10d      	bne.n	80037fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037e0:	68b9      	ldr	r1, [r7, #8]
 80037e2:	4824      	ldr	r0, [pc, #144]	; (8003874 <HAL_RCC_GetSysClockFreq+0x100>)
 80037e4:	f7fc fc8e 	bl	8000104 <__udivsi3>
 80037e8:	0003      	movs	r3, r0
 80037ea:	0019      	movs	r1, r3
 80037ec:	4b1f      	ldr	r3, [pc, #124]	; (800386c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	0a1b      	lsrs	r3, r3, #8
 80037f2:	227f      	movs	r2, #127	; 0x7f
 80037f4:	4013      	ands	r3, r2
 80037f6:	434b      	muls	r3, r1
 80037f8:	617b      	str	r3, [r7, #20]
        break;
 80037fa:	e00d      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80037fc:	68b9      	ldr	r1, [r7, #8]
 80037fe:	481c      	ldr	r0, [pc, #112]	; (8003870 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003800:	f7fc fc80 	bl	8000104 <__udivsi3>
 8003804:	0003      	movs	r3, r0
 8003806:	0019      	movs	r1, r3
 8003808:	4b18      	ldr	r3, [pc, #96]	; (800386c <HAL_RCC_GetSysClockFreq+0xf8>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	0a1b      	lsrs	r3, r3, #8
 800380e:	227f      	movs	r2, #127	; 0x7f
 8003810:	4013      	ands	r3, r2
 8003812:	434b      	muls	r3, r1
 8003814:	617b      	str	r3, [r7, #20]
        break;
 8003816:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003818:	4b14      	ldr	r3, [pc, #80]	; (800386c <HAL_RCC_GetSysClockFreq+0xf8>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	0f5b      	lsrs	r3, r3, #29
 800381e:	2207      	movs	r2, #7
 8003820:	4013      	ands	r3, r2
 8003822:	3301      	adds	r3, #1
 8003824:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	6978      	ldr	r0, [r7, #20]
 800382a:	f7fc fc6b 	bl	8000104 <__udivsi3>
 800382e:	0003      	movs	r3, r0
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	e015      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003834:	4b0d      	ldr	r3, [pc, #52]	; (800386c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2238      	movs	r2, #56	; 0x38
 800383a:	4013      	ands	r3, r2
 800383c:	2b20      	cmp	r3, #32
 800383e:	d103      	bne.n	8003848 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003840:	2380      	movs	r3, #128	; 0x80
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	e00b      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003848:	4b08      	ldr	r3, [pc, #32]	; (800386c <HAL_RCC_GetSysClockFreq+0xf8>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	2238      	movs	r2, #56	; 0x38
 800384e:	4013      	ands	r3, r2
 8003850:	2b18      	cmp	r3, #24
 8003852:	d103      	bne.n	800385c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003854:	23fa      	movs	r3, #250	; 0xfa
 8003856:	01db      	lsls	r3, r3, #7
 8003858:	613b      	str	r3, [r7, #16]
 800385a:	e001      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003860:	693b      	ldr	r3, [r7, #16]
}
 8003862:	0018      	movs	r0, r3
 8003864:	46bd      	mov	sp, r7
 8003866:	b006      	add	sp, #24
 8003868:	bd80      	pop	{r7, pc}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	40021000 	.word	0x40021000
 8003870:	00f42400 	.word	0x00f42400
 8003874:	007a1200 	.word	0x007a1200

08003878 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800387c:	4b02      	ldr	r3, [pc, #8]	; (8003888 <HAL_RCC_GetHCLKFreq+0x10>)
 800387e:	681b      	ldr	r3, [r3, #0]
}
 8003880:	0018      	movs	r0, r3
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	20000008 	.word	0x20000008

0800388c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800388c:	b5b0      	push	{r4, r5, r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003890:	f7ff fff2 	bl	8003878 <HAL_RCC_GetHCLKFreq>
 8003894:	0004      	movs	r4, r0
 8003896:	f7ff fb39 	bl	8002f0c <LL_RCC_GetAPB1Prescaler>
 800389a:	0003      	movs	r3, r0
 800389c:	0b1a      	lsrs	r2, r3, #12
 800389e:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038a0:	0092      	lsls	r2, r2, #2
 80038a2:	58d3      	ldr	r3, [r2, r3]
 80038a4:	221f      	movs	r2, #31
 80038a6:	4013      	ands	r3, r2
 80038a8:	40dc      	lsrs	r4, r3
 80038aa:	0023      	movs	r3, r4
}
 80038ac:	0018      	movs	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bdb0      	pop	{r4, r5, r7, pc}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	08006364 	.word	0x08006364

080038b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80038c0:	2313      	movs	r3, #19
 80038c2:	18fb      	adds	r3, r7, r3
 80038c4:	2200      	movs	r2, #0
 80038c6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038c8:	2312      	movs	r3, #18
 80038ca:	18fb      	adds	r3, r7, r3
 80038cc:	2200      	movs	r2, #0
 80038ce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	2380      	movs	r3, #128	; 0x80
 80038d6:	029b      	lsls	r3, r3, #10
 80038d8:	4013      	ands	r3, r2
 80038da:	d100      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x26>
 80038dc:	e0a4      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038de:	2311      	movs	r3, #17
 80038e0:	18fb      	adds	r3, r7, r3
 80038e2:	2200      	movs	r2, #0
 80038e4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038e6:	4bc3      	ldr	r3, [pc, #780]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038ea:	2380      	movs	r3, #128	; 0x80
 80038ec:	055b      	lsls	r3, r3, #21
 80038ee:	4013      	ands	r3, r2
 80038f0:	d111      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038f2:	4bc0      	ldr	r3, [pc, #768]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038f6:	4bbf      	ldr	r3, [pc, #764]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038f8:	2180      	movs	r1, #128	; 0x80
 80038fa:	0549      	lsls	r1, r1, #21
 80038fc:	430a      	orrs	r2, r1
 80038fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8003900:	4bbc      	ldr	r3, [pc, #752]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003902:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003904:	2380      	movs	r3, #128	; 0x80
 8003906:	055b      	lsls	r3, r3, #21
 8003908:	4013      	ands	r3, r2
 800390a:	60bb      	str	r3, [r7, #8]
 800390c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800390e:	2311      	movs	r3, #17
 8003910:	18fb      	adds	r3, r7, r3
 8003912:	2201      	movs	r2, #1
 8003914:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003916:	4bb8      	ldr	r3, [pc, #736]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	4bb7      	ldr	r3, [pc, #732]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800391c:	2180      	movs	r1, #128	; 0x80
 800391e:	0049      	lsls	r1, r1, #1
 8003920:	430a      	orrs	r2, r1
 8003922:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003924:	f7ff f850 	bl	80029c8 <HAL_GetTick>
 8003928:	0003      	movs	r3, r0
 800392a:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800392c:	e00b      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800392e:	f7ff f84b 	bl	80029c8 <HAL_GetTick>
 8003932:	0002      	movs	r2, r0
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d904      	bls.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 800393c:	2313      	movs	r3, #19
 800393e:	18fb      	adds	r3, r7, r3
 8003940:	2203      	movs	r2, #3
 8003942:	701a      	strb	r2, [r3, #0]
        break;
 8003944:	e005      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003946:	4bac      	ldr	r3, [pc, #688]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	2380      	movs	r3, #128	; 0x80
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	4013      	ands	r3, r2
 8003950:	d0ed      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8003952:	2313      	movs	r3, #19
 8003954:	18fb      	adds	r3, r7, r3
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d154      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800395c:	4ba5      	ldr	r3, [pc, #660]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800395e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003960:	23c0      	movs	r3, #192	; 0xc0
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4013      	ands	r3, r2
 8003966:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d019      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xea>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	429a      	cmp	r2, r3
 8003976:	d014      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003978:	4b9e      	ldr	r3, [pc, #632]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800397a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397c:	4a9f      	ldr	r2, [pc, #636]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800397e:	4013      	ands	r3, r2
 8003980:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003982:	4b9c      	ldr	r3, [pc, #624]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003984:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003986:	4b9b      	ldr	r3, [pc, #620]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003988:	2180      	movs	r1, #128	; 0x80
 800398a:	0249      	lsls	r1, r1, #9
 800398c:	430a      	orrs	r2, r1
 800398e:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003990:	4b98      	ldr	r3, [pc, #608]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003992:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003994:	4b97      	ldr	r3, [pc, #604]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003996:	499a      	ldr	r1, [pc, #616]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8003998:	400a      	ands	r2, r1
 800399a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800399c:	4b95      	ldr	r3, [pc, #596]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2201      	movs	r2, #1
 80039a6:	4013      	ands	r3, r2
 80039a8:	d016      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039aa:	f7ff f80d 	bl	80029c8 <HAL_GetTick>
 80039ae:	0003      	movs	r3, r0
 80039b0:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039b2:	e00c      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b4:	f7ff f808 	bl	80029c8 <HAL_GetTick>
 80039b8:	0002      	movs	r2, r0
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	4a91      	ldr	r2, [pc, #580]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d904      	bls.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 80039c4:	2313      	movs	r3, #19
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	2203      	movs	r2, #3
 80039ca:	701a      	strb	r2, [r3, #0]
            break;
 80039cc:	e004      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ce:	4b89      	ldr	r3, [pc, #548]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d2:	2202      	movs	r2, #2
 80039d4:	4013      	ands	r3, r2
 80039d6:	d0ed      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 80039d8:	2313      	movs	r3, #19
 80039da:	18fb      	adds	r3, r7, r3
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10a      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039e2:	4b84      	ldr	r3, [pc, #528]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e6:	4a85      	ldr	r2, [pc, #532]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	0019      	movs	r1, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039f0:	4b80      	ldr	r3, [pc, #512]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039f2:	430a      	orrs	r2, r1
 80039f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80039f6:	e00c      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039f8:	2312      	movs	r3, #18
 80039fa:	18fb      	adds	r3, r7, r3
 80039fc:	2213      	movs	r2, #19
 80039fe:	18ba      	adds	r2, r7, r2
 8003a00:	7812      	ldrb	r2, [r2, #0]
 8003a02:	701a      	strb	r2, [r3, #0]
 8003a04:	e005      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a06:	2312      	movs	r3, #18
 8003a08:	18fb      	adds	r3, r7, r3
 8003a0a:	2213      	movs	r2, #19
 8003a0c:	18ba      	adds	r2, r7, r2
 8003a0e:	7812      	ldrb	r2, [r2, #0]
 8003a10:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a12:	2311      	movs	r3, #17
 8003a14:	18fb      	adds	r3, r7, r3
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d105      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a1c:	4b75      	ldr	r3, [pc, #468]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a20:	4b74      	ldr	r3, [pc, #464]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a22:	4979      	ldr	r1, [pc, #484]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8003a24:	400a      	ands	r2, r1
 8003a26:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	4013      	ands	r3, r2
 8003a30:	d009      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a32:	4b70      	ldr	r3, [pc, #448]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a36:	2203      	movs	r2, #3
 8003a38:	4393      	bics	r3, r2
 8003a3a:	0019      	movs	r1, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	4b6c      	ldr	r3, [pc, #432]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a42:	430a      	orrs	r2, r1
 8003a44:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	d009      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a50:	4b68      	ldr	r3, [pc, #416]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a54:	220c      	movs	r2, #12
 8003a56:	4393      	bics	r3, r2
 8003a58:	0019      	movs	r1, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	4b65      	ldr	r3, [pc, #404]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a60:	430a      	orrs	r2, r1
 8003a62:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d009      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a6e:	4b61      	ldr	r3, [pc, #388]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a72:	4a66      	ldr	r2, [pc, #408]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	0019      	movs	r1, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	4b5d      	ldr	r3, [pc, #372]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	2380      	movs	r3, #128	; 0x80
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	d009      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a8e:	4b59      	ldr	r3, [pc, #356]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a92:	4a5f      	ldr	r2, [pc, #380]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a94:	4013      	ands	r3, r2
 8003a96:	0019      	movs	r1, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699a      	ldr	r2, [r3, #24]
 8003a9c:	4b55      	ldr	r3, [pc, #340]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	2380      	movs	r3, #128	; 0x80
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d009      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003aae:	4b51      	ldr	r3, [pc, #324]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab2:	4a58      	ldr	r2, [pc, #352]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	0019      	movs	r1, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	69da      	ldr	r2, [r3, #28]
 8003abc:	4b4d      	ldr	r3, [pc, #308]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2240      	movs	r2, #64	; 0x40
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d009      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003acc:	4b49      	ldr	r3, [pc, #292]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad0:	4a51      	ldr	r2, [pc, #324]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	0019      	movs	r1, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691a      	ldr	r2, [r3, #16]
 8003ada:	4b46      	ldr	r3, [pc, #280]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003adc:	430a      	orrs	r2, r1
 8003ade:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	2380      	movs	r3, #128	; 0x80
 8003ae6:	01db      	lsls	r3, r3, #7
 8003ae8:	4013      	ands	r3, r2
 8003aea:	d015      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003aec:	4b41      	ldr	r3, [pc, #260]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	0899      	lsrs	r1, r3, #2
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1a      	ldr	r2, [r3, #32]
 8003af8:	4b3e      	ldr	r3, [pc, #248]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003afa:	430a      	orrs	r2, r1
 8003afc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1a      	ldr	r2, [r3, #32]
 8003b02:	2380      	movs	r3, #128	; 0x80
 8003b04:	05db      	lsls	r3, r3, #23
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d106      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003b0a:	4b3a      	ldr	r3, [pc, #232]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b0c:	68da      	ldr	r2, [r3, #12]
 8003b0e:	4b39      	ldr	r3, [pc, #228]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b10:	2180      	movs	r1, #128	; 0x80
 8003b12:	0249      	lsls	r1, r1, #9
 8003b14:	430a      	orrs	r2, r1
 8003b16:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	2380      	movs	r3, #128	; 0x80
 8003b1e:	031b      	lsls	r3, r3, #12
 8003b20:	4013      	ands	r3, r2
 8003b22:	d009      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b24:	4b33      	ldr	r3, [pc, #204]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b28:	2240      	movs	r2, #64	; 0x40
 8003b2a:	4393      	bics	r3, r2
 8003b2c:	0019      	movs	r1, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b32:	4b30      	ldr	r3, [pc, #192]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b34:	430a      	orrs	r2, r1
 8003b36:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	2380      	movs	r3, #128	; 0x80
 8003b3e:	039b      	lsls	r3, r3, #14
 8003b40:	4013      	ands	r3, r2
 8003b42:	d016      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b44:	4b2b      	ldr	r3, [pc, #172]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b48:	4a34      	ldr	r2, [pc, #208]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	0019      	movs	r1, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b52:	4b28      	ldr	r3, [pc, #160]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b54:	430a      	orrs	r2, r1
 8003b56:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b5c:	2380      	movs	r3, #128	; 0x80
 8003b5e:	03db      	lsls	r3, r3, #15
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d106      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003b64:	4b23      	ldr	r3, [pc, #140]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b66:	68da      	ldr	r2, [r3, #12]
 8003b68:	4b22      	ldr	r3, [pc, #136]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b6a:	2180      	movs	r1, #128	; 0x80
 8003b6c:	0449      	lsls	r1, r1, #17
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	2380      	movs	r3, #128	; 0x80
 8003b78:	03db      	lsls	r3, r3, #15
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d016      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003b7e:	4b1d      	ldr	r3, [pc, #116]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b82:	4a27      	ldr	r2, [pc, #156]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	0019      	movs	r1, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b8c:	4b19      	ldr	r3, [pc, #100]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b96:	2380      	movs	r3, #128	; 0x80
 8003b98:	045b      	lsls	r3, r3, #17
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d106      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003b9e:	4b15      	ldr	r3, [pc, #84]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	4b14      	ldr	r3, [pc, #80]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ba4:	2180      	movs	r1, #128	; 0x80
 8003ba6:	0449      	lsls	r1, r1, #17
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	2380      	movs	r3, #128	; 0x80
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d016      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003bb8:	4b0e      	ldr	r3, [pc, #56]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbc:	4a19      	ldr	r2, [pc, #100]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	0019      	movs	r1, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695a      	ldr	r2, [r3, #20]
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	695a      	ldr	r2, [r3, #20]
 8003bd0:	2380      	movs	r3, #128	; 0x80
 8003bd2:	01db      	lsls	r3, r3, #7
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d106      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003bd8:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bde:	2180      	movs	r1, #128	; 0x80
 8003be0:	0249      	lsls	r1, r1, #9
 8003be2:	430a      	orrs	r2, r1
 8003be4:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8003be6:	2312      	movs	r3, #18
 8003be8:	18fb      	adds	r3, r7, r3
 8003bea:	781b      	ldrb	r3, [r3, #0]
}
 8003bec:	0018      	movs	r0, r3
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b006      	add	sp, #24
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	40007000 	.word	0x40007000
 8003bfc:	fffffcff 	.word	0xfffffcff
 8003c00:	fffeffff 	.word	0xfffeffff
 8003c04:	00001388 	.word	0x00001388
 8003c08:	efffffff 	.word	0xefffffff
 8003c0c:	fffff3ff 	.word	0xfffff3ff
 8003c10:	fff3ffff 	.word	0xfff3ffff
 8003c14:	ffcfffff 	.word	0xffcfffff
 8003c18:	ffffcfff 	.word	0xffffcfff
 8003c1c:	ffbfffff 	.word	0xffbfffff
 8003c20:	feffffff 	.word	0xfeffffff
 8003c24:	ffff3fff 	.word	0xffff3fff

08003c28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e01e      	b.n	8003c78 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	223d      	movs	r2, #61	; 0x3d
 8003c3e:	5c9b      	ldrb	r3, [r3, r2]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d107      	bne.n	8003c56 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	223c      	movs	r2, #60	; 0x3c
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	0018      	movs	r0, r3
 8003c52:	f7fe fd59 	bl	8002708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	223d      	movs	r2, #61	; 0x3d
 8003c5a:	2102      	movs	r1, #2
 8003c5c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3304      	adds	r3, #4
 8003c66:	0019      	movs	r1, r3
 8003c68:	0010      	movs	r0, r2
 8003c6a:	f000 f8f3 	bl	8003e54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	223d      	movs	r2, #61	; 0x3d
 8003c72:	2101      	movs	r1, #1
 8003c74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	0018      	movs	r0, r3
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	b002      	add	sp, #8
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	223d      	movs	r2, #61	; 0x3d
 8003c8c:	2102      	movs	r1, #2
 8003c8e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	4a0e      	ldr	r2, [pc, #56]	; (8003cd0 <HAL_TIM_Base_Start+0x50>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b06      	cmp	r3, #6
 8003ca0:	d00c      	beq.n	8003cbc <HAL_TIM_Base_Start+0x3c>
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	2380      	movs	r3, #128	; 0x80
 8003ca6:	025b      	lsls	r3, r3, #9
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d007      	beq.n	8003cbc <HAL_TIM_Base_Start+0x3c>
  {
    __HAL_TIM_ENABLE(htim);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	223d      	movs	r2, #61	; 0x3d
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	b004      	add	sp, #16
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	00010007 	.word	0x00010007

08003cd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	223c      	movs	r2, #60	; 0x3c
 8003ce2:	5c9b      	ldrb	r3, [r3, r2]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d101      	bne.n	8003cec <HAL_TIM_ConfigClockSource+0x18>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e0ab      	b.n	8003e44 <HAL_TIM_ConfigClockSource+0x170>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	223c      	movs	r2, #60	; 0x3c
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	223d      	movs	r2, #61	; 0x3d
 8003cf8:	2102      	movs	r1, #2
 8003cfa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4a51      	ldr	r2, [pc, #324]	; (8003e4c <HAL_TIM_ConfigClockSource+0x178>)
 8003d08:	4013      	ands	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4a50      	ldr	r2, [pc, #320]	; (8003e50 <HAL_TIM_ConfigClockSource+0x17c>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b40      	cmp	r3, #64	; 0x40
 8003d22:	d100      	bne.n	8003d26 <HAL_TIM_ConfigClockSource+0x52>
 8003d24:	e06b      	b.n	8003dfe <HAL_TIM_ConfigClockSource+0x12a>
 8003d26:	d80e      	bhi.n	8003d46 <HAL_TIM_ConfigClockSource+0x72>
 8003d28:	2b10      	cmp	r3, #16
 8003d2a:	d100      	bne.n	8003d2e <HAL_TIM_ConfigClockSource+0x5a>
 8003d2c:	e077      	b.n	8003e1e <HAL_TIM_ConfigClockSource+0x14a>
 8003d2e:	d803      	bhi.n	8003d38 <HAL_TIM_ConfigClockSource+0x64>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d100      	bne.n	8003d36 <HAL_TIM_ConfigClockSource+0x62>
 8003d34:	e073      	b.n	8003e1e <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003d36:	e07c      	b.n	8003e32 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003d38:	2b20      	cmp	r3, #32
 8003d3a:	d100      	bne.n	8003d3e <HAL_TIM_ConfigClockSource+0x6a>
 8003d3c:	e06f      	b.n	8003e1e <HAL_TIM_ConfigClockSource+0x14a>
 8003d3e:	2b30      	cmp	r3, #48	; 0x30
 8003d40:	d100      	bne.n	8003d44 <HAL_TIM_ConfigClockSource+0x70>
 8003d42:	e06c      	b.n	8003e1e <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8003d44:	e075      	b.n	8003e32 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003d46:	2b70      	cmp	r3, #112	; 0x70
 8003d48:	d00e      	beq.n	8003d68 <HAL_TIM_ConfigClockSource+0x94>
 8003d4a:	d804      	bhi.n	8003d56 <HAL_TIM_ConfigClockSource+0x82>
 8003d4c:	2b50      	cmp	r3, #80	; 0x50
 8003d4e:	d036      	beq.n	8003dbe <HAL_TIM_ConfigClockSource+0xea>
 8003d50:	2b60      	cmp	r3, #96	; 0x60
 8003d52:	d044      	beq.n	8003dde <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8003d54:	e06d      	b.n	8003e32 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003d56:	2280      	movs	r2, #128	; 0x80
 8003d58:	0152      	lsls	r2, r2, #5
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d068      	beq.n	8003e30 <HAL_TIM_ConfigClockSource+0x15c>
 8003d5e:	2280      	movs	r2, #128	; 0x80
 8003d60:	0192      	lsls	r2, r2, #6
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d017      	beq.n	8003d96 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8003d66:	e064      	b.n	8003e32 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6818      	ldr	r0, [r3, #0]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	6899      	ldr	r1, [r3, #8]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f000 f968 	bl	800404c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2277      	movs	r2, #119	; 0x77
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	609a      	str	r2, [r3, #8]
      break;
 8003d94:	e04d      	b.n	8003e32 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6818      	ldr	r0, [r3, #0]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	6899      	ldr	r1, [r3, #8]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f000 f951 	bl	800404c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2180      	movs	r1, #128	; 0x80
 8003db6:	01c9      	lsls	r1, r1, #7
 8003db8:	430a      	orrs	r2, r1
 8003dba:	609a      	str	r2, [r3, #8]
      break;
 8003dbc:	e039      	b.n	8003e32 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	6859      	ldr	r1, [r3, #4]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	001a      	movs	r2, r3
 8003dcc:	f000 f8c2 	bl	8003f54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2150      	movs	r1, #80	; 0x50
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f000 f91c 	bl	8004014 <TIM_ITRx_SetConfig>
      break;
 8003ddc:	e029      	b.n	8003e32 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	6859      	ldr	r1, [r3, #4]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	001a      	movs	r2, r3
 8003dec:	f000 f8e0 	bl	8003fb0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2160      	movs	r1, #96	; 0x60
 8003df6:	0018      	movs	r0, r3
 8003df8:	f000 f90c 	bl	8004014 <TIM_ITRx_SetConfig>
      break;
 8003dfc:	e019      	b.n	8003e32 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6818      	ldr	r0, [r3, #0]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	6859      	ldr	r1, [r3, #4]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	001a      	movs	r2, r3
 8003e0c:	f000 f8a2 	bl	8003f54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2140      	movs	r1, #64	; 0x40
 8003e16:	0018      	movs	r0, r3
 8003e18:	f000 f8fc 	bl	8004014 <TIM_ITRx_SetConfig>
      break;
 8003e1c:	e009      	b.n	8003e32 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	0019      	movs	r1, r3
 8003e28:	0010      	movs	r0, r2
 8003e2a:	f000 f8f3 	bl	8004014 <TIM_ITRx_SetConfig>
      break;
 8003e2e:	e000      	b.n	8003e32 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8003e30:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	223d      	movs	r2, #61	; 0x3d
 8003e36:	2101      	movs	r1, #1
 8003e38:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	223c      	movs	r2, #60	; 0x3c
 8003e3e:	2100      	movs	r1, #0
 8003e40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	0018      	movs	r0, r3
 8003e46:	46bd      	mov	sp, r7
 8003e48:	b004      	add	sp, #16
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	ffceff88 	.word	0xffceff88
 8003e50:	ffff00ff 	.word	0xffff00ff

08003e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a34      	ldr	r2, [pc, #208]	; (8003f38 <TIM_Base_SetConfig+0xe4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d008      	beq.n	8003e7e <TIM_Base_SetConfig+0x2a>
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	2380      	movs	r3, #128	; 0x80
 8003e70:	05db      	lsls	r3, r3, #23
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d003      	beq.n	8003e7e <TIM_Base_SetConfig+0x2a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a30      	ldr	r2, [pc, #192]	; (8003f3c <TIM_Base_SetConfig+0xe8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d108      	bne.n	8003e90 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2270      	movs	r2, #112	; 0x70
 8003e82:	4393      	bics	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a29      	ldr	r2, [pc, #164]	; (8003f38 <TIM_Base_SetConfig+0xe4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d018      	beq.n	8003eca <TIM_Base_SetConfig+0x76>
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	2380      	movs	r3, #128	; 0x80
 8003e9c:	05db      	lsls	r3, r3, #23
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d013      	beq.n	8003eca <TIM_Base_SetConfig+0x76>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a25      	ldr	r2, [pc, #148]	; (8003f3c <TIM_Base_SetConfig+0xe8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00f      	beq.n	8003eca <TIM_Base_SetConfig+0x76>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a24      	ldr	r2, [pc, #144]	; (8003f40 <TIM_Base_SetConfig+0xec>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00b      	beq.n	8003eca <TIM_Base_SetConfig+0x76>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a23      	ldr	r2, [pc, #140]	; (8003f44 <TIM_Base_SetConfig+0xf0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d007      	beq.n	8003eca <TIM_Base_SetConfig+0x76>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a22      	ldr	r2, [pc, #136]	; (8003f48 <TIM_Base_SetConfig+0xf4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d003      	beq.n	8003eca <TIM_Base_SetConfig+0x76>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a21      	ldr	r2, [pc, #132]	; (8003f4c <TIM_Base_SetConfig+0xf8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d108      	bne.n	8003edc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4a20      	ldr	r2, [pc, #128]	; (8003f50 <TIM_Base_SetConfig+0xfc>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2280      	movs	r2, #128	; 0x80
 8003ee0:	4393      	bics	r3, r2
 8003ee2:	001a      	movs	r2, r3
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a0c      	ldr	r2, [pc, #48]	; (8003f38 <TIM_Base_SetConfig+0xe4>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d00b      	beq.n	8003f22 <TIM_Base_SetConfig+0xce>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a0d      	ldr	r2, [pc, #52]	; (8003f44 <TIM_Base_SetConfig+0xf0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d007      	beq.n	8003f22 <TIM_Base_SetConfig+0xce>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a0c      	ldr	r2, [pc, #48]	; (8003f48 <TIM_Base_SetConfig+0xf4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d003      	beq.n	8003f22 <TIM_Base_SetConfig+0xce>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a0b      	ldr	r2, [pc, #44]	; (8003f4c <TIM_Base_SetConfig+0xf8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d103      	bne.n	8003f2a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	691a      	ldr	r2, [r3, #16]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	615a      	str	r2, [r3, #20]
}
 8003f30:	46c0      	nop			; (mov r8, r8)
 8003f32:	46bd      	mov	sp, r7
 8003f34:	b004      	add	sp, #16
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40012c00 	.word	0x40012c00
 8003f3c:	40000400 	.word	0x40000400
 8003f40:	40002000 	.word	0x40002000
 8003f44:	40014000 	.word	0x40014000
 8003f48:	40014400 	.word	0x40014400
 8003f4c:	40014800 	.word	0x40014800
 8003f50:	fffffcff 	.word	0xfffffcff

08003f54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	4393      	bics	r3, r2
 8003f6e:	001a      	movs	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	22f0      	movs	r2, #240	; 0xf0
 8003f7e:	4393      	bics	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	220a      	movs	r2, #10
 8003f90:	4393      	bics	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	621a      	str	r2, [r3, #32]
}
 8003fa8:	46c0      	nop			; (mov r8, r8)
 8003faa:	46bd      	mov	sp, r7
 8003fac:	b006      	add	sp, #24
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	2210      	movs	r2, #16
 8003fc2:	4393      	bics	r3, r2
 8003fc4:	001a      	movs	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	4a0d      	ldr	r2, [pc, #52]	; (8004010 <TIM_TI2_ConfigInputStage+0x60>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	031b      	lsls	r3, r3, #12
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	22a0      	movs	r2, #160	; 0xa0
 8003fec:	4393      	bics	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	621a      	str	r2, [r3, #32]
}
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	46bd      	mov	sp, r7
 800400a:	b006      	add	sp, #24
 800400c:	bd80      	pop	{r7, pc}
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	ffff0fff 	.word	0xffff0fff

08004014 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4a08      	ldr	r2, [pc, #32]	; (8004048 <TIM_ITRx_SetConfig+0x34>)
 8004028:	4013      	ands	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4313      	orrs	r3, r2
 8004032:	2207      	movs	r2, #7
 8004034:	4313      	orrs	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	609a      	str	r2, [r3, #8]
}
 800403e:	46c0      	nop			; (mov r8, r8)
 8004040:	46bd      	mov	sp, r7
 8004042:	b004      	add	sp, #16
 8004044:	bd80      	pop	{r7, pc}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	ffcfff8f 	.word	0xffcfff8f

0800404c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	4a09      	ldr	r2, [pc, #36]	; (8004088 <TIM_ETR_SetConfig+0x3c>)
 8004064:	4013      	ands	r3, r2
 8004066:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	021a      	lsls	r2, r3, #8
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	431a      	orrs	r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4313      	orrs	r3, r2
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	609a      	str	r2, [r3, #8]
}
 8004080:	46c0      	nop			; (mov r8, r8)
 8004082:	46bd      	mov	sp, r7
 8004084:	b006      	add	sp, #24
 8004086:	bd80      	pop	{r7, pc}
 8004088:	ffff00ff 	.word	0xffff00ff

0800408c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	223c      	movs	r2, #60	; 0x3c
 800409a:	5c9b      	ldrb	r3, [r3, r2]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e040      	b.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	223c      	movs	r2, #60	; 0x3c
 80040a8:	2101      	movs	r1, #1
 80040aa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	223d      	movs	r2, #61	; 0x3d
 80040b0:	2102      	movs	r1, #2
 80040b2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a19      	ldr	r2, [pc, #100]	; (8004130 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d108      	bne.n	80040e0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4a18      	ldr	r2, [pc, #96]	; (8004134 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80040d2:	4013      	ands	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2270      	movs	r2, #112	; 0x70
 80040e4:	4393      	bics	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2280      	movs	r2, #128	; 0x80
 80040f6:	4393      	bics	r3, r2
 80040f8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	4313      	orrs	r3, r2
 8004102:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	223d      	movs	r2, #61	; 0x3d
 8004118:	2101      	movs	r1, #1
 800411a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	223c      	movs	r2, #60	; 0x3c
 8004120:	2100      	movs	r1, #0
 8004122:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	0018      	movs	r0, r3
 8004128:	46bd      	mov	sp, r7
 800412a:	b004      	add	sp, #16
 800412c:	bd80      	pop	{r7, pc}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	40012c00 	.word	0x40012c00
 8004134:	ff0fffff 	.word	0xff0fffff

08004138 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	223c      	movs	r2, #60	; 0x3c
 800414a:	5c9b      	ldrb	r3, [r3, r2]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004150:	2302      	movs	r3, #2
 8004152:	e079      	b.n	8004248 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	223c      	movs	r2, #60	; 0x3c
 8004158:	2101      	movs	r1, #1
 800415a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	22ff      	movs	r2, #255	; 0xff
 8004160:	4393      	bics	r3, r2
 8004162:	001a      	movs	r2, r3
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4a38      	ldr	r2, [pc, #224]	; (8004250 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004170:	401a      	ands	r2, r3
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4a35      	ldr	r2, [pc, #212]	; (8004254 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800417e:	401a      	ands	r2, r3
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	4313      	orrs	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4a33      	ldr	r2, [pc, #204]	; (8004258 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800418c:	401a      	ands	r2, r3
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4a30      	ldr	r2, [pc, #192]	; (800425c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800419a:	401a      	ands	r2, r3
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4a2e      	ldr	r2, [pc, #184]	; (8004260 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80041a8:	401a      	ands	r2, r3
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4a2b      	ldr	r2, [pc, #172]	; (8004264 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80041b6:	401a      	ands	r2, r3
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041bc:	4313      	orrs	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4a29      	ldr	r2, [pc, #164]	; (8004268 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80041c4:	401a      	ands	r2, r3
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	041b      	lsls	r3, r3, #16
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a25      	ldr	r2, [pc, #148]	; (800426c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d106      	bne.n	80041e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4a24      	ldr	r2, [pc, #144]	; (8004270 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80041de:	401a      	ands	r2, r3
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1f      	ldr	r2, [pc, #124]	; (800426c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d121      	bne.n	8004236 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4a1f      	ldr	r2, [pc, #124]	; (8004274 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80041f6:	401a      	ands	r2, r3
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	051b      	lsls	r3, r3, #20
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4a1c      	ldr	r2, [pc, #112]	; (8004278 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8004206:	401a      	ands	r2, r3
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4a1a      	ldr	r2, [pc, #104]	; (800427c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8004214:	401a      	ands	r2, r3
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a12      	ldr	r2, [pc, #72]	; (800426c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d106      	bne.n	8004236 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4a15      	ldr	r2, [pc, #84]	; (8004280 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800422c:	401a      	ands	r2, r3
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004232:	4313      	orrs	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	223c      	movs	r2, #60	; 0x3c
 8004242:	2100      	movs	r1, #0
 8004244:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	0018      	movs	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	b004      	add	sp, #16
 800424e:	bd80      	pop	{r7, pc}
 8004250:	fffffcff 	.word	0xfffffcff
 8004254:	fffffbff 	.word	0xfffffbff
 8004258:	fffff7ff 	.word	0xfffff7ff
 800425c:	ffffefff 	.word	0xffffefff
 8004260:	ffffdfff 	.word	0xffffdfff
 8004264:	ffffbfff 	.word	0xffffbfff
 8004268:	fff0ffff 	.word	0xfff0ffff
 800426c:	40012c00 	.word	0x40012c00
 8004270:	efffffff 	.word	0xefffffff
 8004274:	ff0fffff 	.word	0xff0fffff
 8004278:	feffffff 	.word	0xfeffffff
 800427c:	fdffffff 	.word	0xfdffffff
 8004280:	dfffffff 	.word	0xdfffffff

08004284 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e046      	b.n	8004324 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2280      	movs	r2, #128	; 0x80
 800429a:	589b      	ldr	r3, [r3, r2]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d107      	bne.n	80042b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	227c      	movs	r2, #124	; 0x7c
 80042a4:	2100      	movs	r1, #0
 80042a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	0018      	movs	r0, r3
 80042ac:	f7fe fa4c 	bl	8002748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2280      	movs	r2, #128	; 0x80
 80042b4:	2124      	movs	r1, #36	; 0x24
 80042b6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2101      	movs	r1, #1
 80042c4:	438a      	bics	r2, r1
 80042c6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	0018      	movs	r0, r3
 80042cc:	f000 f830 	bl	8004330 <UART_SetConfig>
 80042d0:	0003      	movs	r3, r0
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e024      	b.n	8004324 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	0018      	movs	r0, r3
 80042e6:	f001 f917 	bl	8005518 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	490d      	ldr	r1, [pc, #52]	; (800432c <HAL_UART_Init+0xa8>)
 80042f6:	400a      	ands	r2, r1
 80042f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	212a      	movs	r1, #42	; 0x2a
 8004306:	438a      	bics	r2, r1
 8004308:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2101      	movs	r1, #1
 8004316:	430a      	orrs	r2, r1
 8004318:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	0018      	movs	r0, r3
 800431e:	f001 f9af 	bl	8005680 <UART_CheckIdleState>
 8004322:	0003      	movs	r3, r0
}
 8004324:	0018      	movs	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	b002      	add	sp, #8
 800432a:	bd80      	pop	{r7, pc}
 800432c:	ffffb7ff 	.word	0xffffb7ff

08004330 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004332:	b0a1      	sub	sp, #132	; 0x84
 8004334:	af00      	add	r7, sp, #0
 8004336:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004338:	2300      	movs	r3, #0
 800433a:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 800433c:	231b      	movs	r3, #27
 800433e:	2258      	movs	r2, #88	; 0x58
 8004340:	18ba      	adds	r2, r7, r2
 8004342:	18d2      	adds	r2, r2, r3
 8004344:	2300      	movs	r3, #0
 8004346:	7013      	strb	r3, [r2, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004348:	2300      	movs	r3, #0
 800434a:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800434c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	431a      	orrs	r2, r3
 8004356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	431a      	orrs	r2, r3
 800435c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	4313      	orrs	r3, r2
 8004362:	67fb      	str	r3, [r7, #124]	; 0x7c
  tmpreg |= (uint32_t)huart->FifoMode;
 8004364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004366:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004368:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800436a:	4313      	orrs	r3, r2
 800436c:	67fb      	str	r3, [r7, #124]	; 0x7c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800436e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	4bba      	ldr	r3, [pc, #744]	; (8004660 <UART_SetConfig+0x330>)
 8004376:	401a      	ands	r2, r3
 8004378:	0011      	movs	r1, r2
 800437a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004380:	430b      	orrs	r3, r1
 8004382:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	4bb6      	ldr	r3, [pc, #728]	; (8004664 <UART_SetConfig+0x334>)
 800438c:	401a      	ands	r2, r3
 800438e:	0010      	movs	r0, r2
 8004390:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004392:	68d9      	ldr	r1, [r3, #12]
 8004394:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	0003      	movs	r3, r0
 800439a:	430b      	orrs	r3, r1
 800439c:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800439e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	4baf      	ldr	r3, [pc, #700]	; (8004668 <UART_SetConfig+0x338>)
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d004      	beq.n	80043b8 <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043b0:	6a1a      	ldr	r2, [r3, #32]
 80043b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80043b4:	4313      	orrs	r3, r2
 80043b6:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689a      	ldr	r2, [r3, #8]
 80043be:	4bab      	ldr	r3, [pc, #684]	; (800466c <UART_SetConfig+0x33c>)
 80043c0:	401a      	ands	r2, r3
 80043c2:	0011      	movs	r1, r2
 80043c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80043ca:	430b      	orrs	r3, r1
 80043cc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d4:	230f      	movs	r3, #15
 80043d6:	439a      	bics	r2, r3
 80043d8:	0010      	movs	r0, r2
 80043da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80043de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	0003      	movs	r3, r0
 80043e4:	430b      	orrs	r3, r1
 80043e6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	4ba0      	ldr	r3, [pc, #640]	; (8004670 <UART_SetConfig+0x340>)
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d12f      	bne.n	8004452 <UART_SetConfig+0x122>
 80043f2:	4ba0      	ldr	r3, [pc, #640]	; (8004674 <UART_SetConfig+0x344>)
 80043f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043f6:	2303      	movs	r3, #3
 80043f8:	4013      	ands	r3, r2
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d013      	beq.n	8004426 <UART_SetConfig+0xf6>
 80043fe:	d304      	bcc.n	800440a <UART_SetConfig+0xda>
 8004400:	2b02      	cmp	r3, #2
 8004402:	d009      	beq.n	8004418 <UART_SetConfig+0xe8>
 8004404:	2b03      	cmp	r3, #3
 8004406:	d015      	beq.n	8004434 <UART_SetConfig+0x104>
 8004408:	e01b      	b.n	8004442 <UART_SetConfig+0x112>
 800440a:	2323      	movs	r3, #35	; 0x23
 800440c:	2258      	movs	r2, #88	; 0x58
 800440e:	18ba      	adds	r2, r7, r2
 8004410:	18d2      	adds	r2, r2, r3
 8004412:	2300      	movs	r3, #0
 8004414:	7013      	strb	r3, [r2, #0]
 8004416:	e0b4      	b.n	8004582 <UART_SetConfig+0x252>
 8004418:	2323      	movs	r3, #35	; 0x23
 800441a:	2258      	movs	r2, #88	; 0x58
 800441c:	18ba      	adds	r2, r7, r2
 800441e:	18d2      	adds	r2, r2, r3
 8004420:	2302      	movs	r3, #2
 8004422:	7013      	strb	r3, [r2, #0]
 8004424:	e0ad      	b.n	8004582 <UART_SetConfig+0x252>
 8004426:	2323      	movs	r3, #35	; 0x23
 8004428:	2258      	movs	r2, #88	; 0x58
 800442a:	18ba      	adds	r2, r7, r2
 800442c:	18d2      	adds	r2, r2, r3
 800442e:	2304      	movs	r3, #4
 8004430:	7013      	strb	r3, [r2, #0]
 8004432:	e0a6      	b.n	8004582 <UART_SetConfig+0x252>
 8004434:	2323      	movs	r3, #35	; 0x23
 8004436:	2258      	movs	r2, #88	; 0x58
 8004438:	18ba      	adds	r2, r7, r2
 800443a:	18d2      	adds	r2, r2, r3
 800443c:	2308      	movs	r3, #8
 800443e:	7013      	strb	r3, [r2, #0]
 8004440:	e09f      	b.n	8004582 <UART_SetConfig+0x252>
 8004442:	2323      	movs	r3, #35	; 0x23
 8004444:	2258      	movs	r2, #88	; 0x58
 8004446:	18ba      	adds	r2, r7, r2
 8004448:	18d2      	adds	r2, r2, r3
 800444a:	2310      	movs	r3, #16
 800444c:	7013      	strb	r3, [r2, #0]
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	e097      	b.n	8004582 <UART_SetConfig+0x252>
 8004452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	4b88      	ldr	r3, [pc, #544]	; (8004678 <UART_SetConfig+0x348>)
 8004458:	429a      	cmp	r2, r3
 800445a:	d132      	bne.n	80044c2 <UART_SetConfig+0x192>
 800445c:	4b85      	ldr	r3, [pc, #532]	; (8004674 <UART_SetConfig+0x344>)
 800445e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004460:	230c      	movs	r3, #12
 8004462:	4013      	ands	r3, r2
 8004464:	2b04      	cmp	r3, #4
 8004466:	d016      	beq.n	8004496 <UART_SetConfig+0x166>
 8004468:	d802      	bhi.n	8004470 <UART_SetConfig+0x140>
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <UART_SetConfig+0x14a>
 800446e:	e020      	b.n	80044b2 <UART_SetConfig+0x182>
 8004470:	2b08      	cmp	r3, #8
 8004472:	d009      	beq.n	8004488 <UART_SetConfig+0x158>
 8004474:	2b0c      	cmp	r3, #12
 8004476:	d015      	beq.n	80044a4 <UART_SetConfig+0x174>
 8004478:	e01b      	b.n	80044b2 <UART_SetConfig+0x182>
 800447a:	2323      	movs	r3, #35	; 0x23
 800447c:	2258      	movs	r2, #88	; 0x58
 800447e:	18ba      	adds	r2, r7, r2
 8004480:	18d2      	adds	r2, r2, r3
 8004482:	2300      	movs	r3, #0
 8004484:	7013      	strb	r3, [r2, #0]
 8004486:	e07c      	b.n	8004582 <UART_SetConfig+0x252>
 8004488:	2323      	movs	r3, #35	; 0x23
 800448a:	2258      	movs	r2, #88	; 0x58
 800448c:	18ba      	adds	r2, r7, r2
 800448e:	18d2      	adds	r2, r2, r3
 8004490:	2302      	movs	r3, #2
 8004492:	7013      	strb	r3, [r2, #0]
 8004494:	e075      	b.n	8004582 <UART_SetConfig+0x252>
 8004496:	2323      	movs	r3, #35	; 0x23
 8004498:	2258      	movs	r2, #88	; 0x58
 800449a:	18ba      	adds	r2, r7, r2
 800449c:	18d2      	adds	r2, r2, r3
 800449e:	2304      	movs	r3, #4
 80044a0:	7013      	strb	r3, [r2, #0]
 80044a2:	e06e      	b.n	8004582 <UART_SetConfig+0x252>
 80044a4:	2323      	movs	r3, #35	; 0x23
 80044a6:	2258      	movs	r2, #88	; 0x58
 80044a8:	18ba      	adds	r2, r7, r2
 80044aa:	18d2      	adds	r2, r2, r3
 80044ac:	2308      	movs	r3, #8
 80044ae:	7013      	strb	r3, [r2, #0]
 80044b0:	e067      	b.n	8004582 <UART_SetConfig+0x252>
 80044b2:	2323      	movs	r3, #35	; 0x23
 80044b4:	2258      	movs	r2, #88	; 0x58
 80044b6:	18ba      	adds	r2, r7, r2
 80044b8:	18d2      	adds	r2, r2, r3
 80044ba:	2310      	movs	r3, #16
 80044bc:	7013      	strb	r3, [r2, #0]
 80044be:	46c0      	nop			; (mov r8, r8)
 80044c0:	e05f      	b.n	8004582 <UART_SetConfig+0x252>
 80044c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	4b6d      	ldr	r3, [pc, #436]	; (800467c <UART_SetConfig+0x34c>)
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d106      	bne.n	80044da <UART_SetConfig+0x1aa>
 80044cc:	2323      	movs	r3, #35	; 0x23
 80044ce:	2258      	movs	r2, #88	; 0x58
 80044d0:	18ba      	adds	r2, r7, r2
 80044d2:	18d2      	adds	r2, r2, r3
 80044d4:	2300      	movs	r3, #0
 80044d6:	7013      	strb	r3, [r2, #0]
 80044d8:	e053      	b.n	8004582 <UART_SetConfig+0x252>
 80044da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	4b68      	ldr	r3, [pc, #416]	; (8004680 <UART_SetConfig+0x350>)
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d106      	bne.n	80044f2 <UART_SetConfig+0x1c2>
 80044e4:	2323      	movs	r3, #35	; 0x23
 80044e6:	2258      	movs	r2, #88	; 0x58
 80044e8:	18ba      	adds	r2, r7, r2
 80044ea:	18d2      	adds	r2, r2, r3
 80044ec:	2300      	movs	r3, #0
 80044ee:	7013      	strb	r3, [r2, #0]
 80044f0:	e047      	b.n	8004582 <UART_SetConfig+0x252>
 80044f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	4b5c      	ldr	r3, [pc, #368]	; (8004668 <UART_SetConfig+0x338>)
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d13c      	bne.n	8004576 <UART_SetConfig+0x246>
 80044fc:	4b5d      	ldr	r3, [pc, #372]	; (8004674 <UART_SetConfig+0x344>)
 80044fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004500:	23c0      	movs	r3, #192	; 0xc0
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	401a      	ands	r2, r3
 8004506:	2380      	movs	r3, #128	; 0x80
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	429a      	cmp	r2, r3
 800450c:	d01d      	beq.n	800454a <UART_SetConfig+0x21a>
 800450e:	2380      	movs	r3, #128	; 0x80
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	429a      	cmp	r2, r3
 8004514:	d802      	bhi.n	800451c <UART_SetConfig+0x1ec>
 8004516:	2a00      	cmp	r2, #0
 8004518:	d009      	beq.n	800452e <UART_SetConfig+0x1fe>
 800451a:	e024      	b.n	8004566 <UART_SetConfig+0x236>
 800451c:	2380      	movs	r3, #128	; 0x80
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	429a      	cmp	r2, r3
 8004522:	d00b      	beq.n	800453c <UART_SetConfig+0x20c>
 8004524:	23c0      	movs	r3, #192	; 0xc0
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	429a      	cmp	r2, r3
 800452a:	d015      	beq.n	8004558 <UART_SetConfig+0x228>
 800452c:	e01b      	b.n	8004566 <UART_SetConfig+0x236>
 800452e:	2323      	movs	r3, #35	; 0x23
 8004530:	2258      	movs	r2, #88	; 0x58
 8004532:	18ba      	adds	r2, r7, r2
 8004534:	18d2      	adds	r2, r2, r3
 8004536:	2300      	movs	r3, #0
 8004538:	7013      	strb	r3, [r2, #0]
 800453a:	e022      	b.n	8004582 <UART_SetConfig+0x252>
 800453c:	2323      	movs	r3, #35	; 0x23
 800453e:	2258      	movs	r2, #88	; 0x58
 8004540:	18ba      	adds	r2, r7, r2
 8004542:	18d2      	adds	r2, r2, r3
 8004544:	2302      	movs	r3, #2
 8004546:	7013      	strb	r3, [r2, #0]
 8004548:	e01b      	b.n	8004582 <UART_SetConfig+0x252>
 800454a:	2323      	movs	r3, #35	; 0x23
 800454c:	2258      	movs	r2, #88	; 0x58
 800454e:	18ba      	adds	r2, r7, r2
 8004550:	18d2      	adds	r2, r2, r3
 8004552:	2304      	movs	r3, #4
 8004554:	7013      	strb	r3, [r2, #0]
 8004556:	e014      	b.n	8004582 <UART_SetConfig+0x252>
 8004558:	2323      	movs	r3, #35	; 0x23
 800455a:	2258      	movs	r2, #88	; 0x58
 800455c:	18ba      	adds	r2, r7, r2
 800455e:	18d2      	adds	r2, r2, r3
 8004560:	2308      	movs	r3, #8
 8004562:	7013      	strb	r3, [r2, #0]
 8004564:	e00d      	b.n	8004582 <UART_SetConfig+0x252>
 8004566:	2323      	movs	r3, #35	; 0x23
 8004568:	2258      	movs	r2, #88	; 0x58
 800456a:	18ba      	adds	r2, r7, r2
 800456c:	18d2      	adds	r2, r2, r3
 800456e:	2310      	movs	r3, #16
 8004570:	7013      	strb	r3, [r2, #0]
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	e005      	b.n	8004582 <UART_SetConfig+0x252>
 8004576:	2323      	movs	r3, #35	; 0x23
 8004578:	2258      	movs	r2, #88	; 0x58
 800457a:	18ba      	adds	r2, r7, r2
 800457c:	18d2      	adds	r2, r2, r3
 800457e:	2310      	movs	r3, #16
 8004580:	7013      	strb	r3, [r2, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	4b38      	ldr	r3, [pc, #224]	; (8004668 <UART_SetConfig+0x338>)
 8004588:	429a      	cmp	r2, r3
 800458a:	d001      	beq.n	8004590 <UART_SetConfig+0x260>
 800458c:	f000 fbd0 	bl	8004d30 <UART_SetConfig+0xa00>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004590:	2323      	movs	r3, #35	; 0x23
 8004592:	2258      	movs	r2, #88	; 0x58
 8004594:	4694      	mov	ip, r2
 8004596:	44bc      	add	ip, r7
 8004598:	4463      	add	r3, ip
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	2b02      	cmp	r3, #2
 800459e:	d100      	bne.n	80045a2 <UART_SetConfig+0x272>
 80045a0:	e070      	b.n	8004684 <UART_SetConfig+0x354>
 80045a2:	dc02      	bgt.n	80045aa <UART_SetConfig+0x27a>
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d007      	beq.n	80045b8 <UART_SetConfig+0x288>
 80045a8:	e15f      	b.n	800486a <UART_SetConfig+0x53a>
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d100      	bne.n	80045b0 <UART_SetConfig+0x280>
 80045ae:	e0b4      	b.n	800471a <UART_SetConfig+0x3ea>
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d100      	bne.n	80045b6 <UART_SetConfig+0x286>
 80045b4:	e105      	b.n	80047c2 <UART_SetConfig+0x492>
 80045b6:	e158      	b.n	800486a <UART_SetConfig+0x53a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80045b8:	f7ff f968 	bl	800388c <HAL_RCC_GetPCLK1Freq>
 80045bc:	0002      	movs	r2, r0
 80045be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d044      	beq.n	8004650 <UART_SetConfig+0x320>
 80045c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d03e      	beq.n	800464c <UART_SetConfig+0x31c>
 80045ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d038      	beq.n	8004648 <UART_SetConfig+0x318>
 80045d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	2b03      	cmp	r3, #3
 80045dc:	d032      	beq.n	8004644 <UART_SetConfig+0x314>
 80045de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d02c      	beq.n	8004640 <UART_SetConfig+0x310>
 80045e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	2b05      	cmp	r3, #5
 80045ec:	d026      	beq.n	800463c <UART_SetConfig+0x30c>
 80045ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	2b06      	cmp	r3, #6
 80045f4:	d020      	beq.n	8004638 <UART_SetConfig+0x308>
 80045f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	2b07      	cmp	r3, #7
 80045fc:	d01a      	beq.n	8004634 <UART_SetConfig+0x304>
 80045fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	2b08      	cmp	r3, #8
 8004604:	d014      	beq.n	8004630 <UART_SetConfig+0x300>
 8004606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	2b09      	cmp	r3, #9
 800460c:	d00e      	beq.n	800462c <UART_SetConfig+0x2fc>
 800460e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	2b0a      	cmp	r3, #10
 8004614:	d008      	beq.n	8004628 <UART_SetConfig+0x2f8>
 8004616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	2b0b      	cmp	r3, #11
 800461c:	d102      	bne.n	8004624 <UART_SetConfig+0x2f4>
 800461e:	2380      	movs	r3, #128	; 0x80
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	e016      	b.n	8004652 <UART_SetConfig+0x322>
 8004624:	2301      	movs	r3, #1
 8004626:	e014      	b.n	8004652 <UART_SetConfig+0x322>
 8004628:	2380      	movs	r3, #128	; 0x80
 800462a:	e012      	b.n	8004652 <UART_SetConfig+0x322>
 800462c:	2340      	movs	r3, #64	; 0x40
 800462e:	e010      	b.n	8004652 <UART_SetConfig+0x322>
 8004630:	2320      	movs	r3, #32
 8004632:	e00e      	b.n	8004652 <UART_SetConfig+0x322>
 8004634:	2310      	movs	r3, #16
 8004636:	e00c      	b.n	8004652 <UART_SetConfig+0x322>
 8004638:	230c      	movs	r3, #12
 800463a:	e00a      	b.n	8004652 <UART_SetConfig+0x322>
 800463c:	230a      	movs	r3, #10
 800463e:	e008      	b.n	8004652 <UART_SetConfig+0x322>
 8004640:	2308      	movs	r3, #8
 8004642:	e006      	b.n	8004652 <UART_SetConfig+0x322>
 8004644:	2306      	movs	r3, #6
 8004646:	e004      	b.n	8004652 <UART_SetConfig+0x322>
 8004648:	2304      	movs	r3, #4
 800464a:	e002      	b.n	8004652 <UART_SetConfig+0x322>
 800464c:	2302      	movs	r3, #2
 800464e:	e000      	b.n	8004652 <UART_SetConfig+0x322>
 8004650:	2301      	movs	r3, #1
 8004652:	0019      	movs	r1, r3
 8004654:	0010      	movs	r0, r2
 8004656:	f7fb fd55 	bl	8000104 <__udivsi3>
 800465a:	0003      	movs	r3, r0
 800465c:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 800465e:	e10b      	b.n	8004878 <UART_SetConfig+0x548>
 8004660:	cfff69f3 	.word	0xcfff69f3
 8004664:	ffffcfff 	.word	0xffffcfff
 8004668:	40008000 	.word	0x40008000
 800466c:	11fff4ff 	.word	0x11fff4ff
 8004670:	40013800 	.word	0x40013800
 8004674:	40021000 	.word	0x40021000
 8004678:	40004400 	.word	0x40004400
 800467c:	40004800 	.word	0x40004800
 8004680:	40004c00 	.word	0x40004c00
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004684:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	2b00      	cmp	r3, #0
 800468a:	d043      	beq.n	8004714 <UART_SetConfig+0x3e4>
 800468c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	2b01      	cmp	r3, #1
 8004692:	d03d      	beq.n	8004710 <UART_SetConfig+0x3e0>
 8004694:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	2b02      	cmp	r3, #2
 800469a:	d037      	beq.n	800470c <UART_SetConfig+0x3dc>
 800469c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	2b03      	cmp	r3, #3
 80046a2:	d031      	beq.n	8004708 <UART_SetConfig+0x3d8>
 80046a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d02b      	beq.n	8004704 <UART_SetConfig+0x3d4>
 80046ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	2b05      	cmp	r3, #5
 80046b2:	d025      	beq.n	8004700 <UART_SetConfig+0x3d0>
 80046b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	2b06      	cmp	r3, #6
 80046ba:	d01f      	beq.n	80046fc <UART_SetConfig+0x3cc>
 80046bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	2b07      	cmp	r3, #7
 80046c2:	d019      	beq.n	80046f8 <UART_SetConfig+0x3c8>
 80046c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d013      	beq.n	80046f4 <UART_SetConfig+0x3c4>
 80046cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	2b09      	cmp	r3, #9
 80046d2:	d00d      	beq.n	80046f0 <UART_SetConfig+0x3c0>
 80046d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	2b0a      	cmp	r3, #10
 80046da:	d007      	beq.n	80046ec <UART_SetConfig+0x3bc>
 80046dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	2b0b      	cmp	r3, #11
 80046e2:	d101      	bne.n	80046e8 <UART_SetConfig+0x3b8>
 80046e4:	4bab      	ldr	r3, [pc, #684]	; (8004994 <UART_SetConfig+0x664>)
 80046e6:	e016      	b.n	8004716 <UART_SetConfig+0x3e6>
 80046e8:	4bab      	ldr	r3, [pc, #684]	; (8004998 <UART_SetConfig+0x668>)
 80046ea:	e014      	b.n	8004716 <UART_SetConfig+0x3e6>
 80046ec:	4bab      	ldr	r3, [pc, #684]	; (800499c <UART_SetConfig+0x66c>)
 80046ee:	e012      	b.n	8004716 <UART_SetConfig+0x3e6>
 80046f0:	4bab      	ldr	r3, [pc, #684]	; (80049a0 <UART_SetConfig+0x670>)
 80046f2:	e010      	b.n	8004716 <UART_SetConfig+0x3e6>
 80046f4:	4bab      	ldr	r3, [pc, #684]	; (80049a4 <UART_SetConfig+0x674>)
 80046f6:	e00e      	b.n	8004716 <UART_SetConfig+0x3e6>
 80046f8:	4bab      	ldr	r3, [pc, #684]	; (80049a8 <UART_SetConfig+0x678>)
 80046fa:	e00c      	b.n	8004716 <UART_SetConfig+0x3e6>
 80046fc:	4bab      	ldr	r3, [pc, #684]	; (80049ac <UART_SetConfig+0x67c>)
 80046fe:	e00a      	b.n	8004716 <UART_SetConfig+0x3e6>
 8004700:	4bab      	ldr	r3, [pc, #684]	; (80049b0 <UART_SetConfig+0x680>)
 8004702:	e008      	b.n	8004716 <UART_SetConfig+0x3e6>
 8004704:	4bab      	ldr	r3, [pc, #684]	; (80049b4 <UART_SetConfig+0x684>)
 8004706:	e006      	b.n	8004716 <UART_SetConfig+0x3e6>
 8004708:	4bab      	ldr	r3, [pc, #684]	; (80049b8 <UART_SetConfig+0x688>)
 800470a:	e004      	b.n	8004716 <UART_SetConfig+0x3e6>
 800470c:	4bab      	ldr	r3, [pc, #684]	; (80049bc <UART_SetConfig+0x68c>)
 800470e:	e002      	b.n	8004716 <UART_SetConfig+0x3e6>
 8004710:	4bab      	ldr	r3, [pc, #684]	; (80049c0 <UART_SetConfig+0x690>)
 8004712:	e000      	b.n	8004716 <UART_SetConfig+0x3e6>
 8004714:	4ba0      	ldr	r3, [pc, #640]	; (8004998 <UART_SetConfig+0x668>)
 8004716:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8004718:	e0ae      	b.n	8004878 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800471a:	f7ff f82b 	bl	8003774 <HAL_RCC_GetSysClockFreq>
 800471e:	0002      	movs	r2, r0
 8004720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	2b00      	cmp	r3, #0
 8004726:	d044      	beq.n	80047b2 <UART_SetConfig+0x482>
 8004728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	2b01      	cmp	r3, #1
 800472e:	d03e      	beq.n	80047ae <UART_SetConfig+0x47e>
 8004730:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	2b02      	cmp	r3, #2
 8004736:	d038      	beq.n	80047aa <UART_SetConfig+0x47a>
 8004738:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	2b03      	cmp	r3, #3
 800473e:	d032      	beq.n	80047a6 <UART_SetConfig+0x476>
 8004740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	2b04      	cmp	r3, #4
 8004746:	d02c      	beq.n	80047a2 <UART_SetConfig+0x472>
 8004748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	2b05      	cmp	r3, #5
 800474e:	d026      	beq.n	800479e <UART_SetConfig+0x46e>
 8004750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	2b06      	cmp	r3, #6
 8004756:	d020      	beq.n	800479a <UART_SetConfig+0x46a>
 8004758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	2b07      	cmp	r3, #7
 800475e:	d01a      	beq.n	8004796 <UART_SetConfig+0x466>
 8004760:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	2b08      	cmp	r3, #8
 8004766:	d014      	beq.n	8004792 <UART_SetConfig+0x462>
 8004768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	2b09      	cmp	r3, #9
 800476e:	d00e      	beq.n	800478e <UART_SetConfig+0x45e>
 8004770:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	2b0a      	cmp	r3, #10
 8004776:	d008      	beq.n	800478a <UART_SetConfig+0x45a>
 8004778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	2b0b      	cmp	r3, #11
 800477e:	d102      	bne.n	8004786 <UART_SetConfig+0x456>
 8004780:	2380      	movs	r3, #128	; 0x80
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	e016      	b.n	80047b4 <UART_SetConfig+0x484>
 8004786:	2301      	movs	r3, #1
 8004788:	e014      	b.n	80047b4 <UART_SetConfig+0x484>
 800478a:	2380      	movs	r3, #128	; 0x80
 800478c:	e012      	b.n	80047b4 <UART_SetConfig+0x484>
 800478e:	2340      	movs	r3, #64	; 0x40
 8004790:	e010      	b.n	80047b4 <UART_SetConfig+0x484>
 8004792:	2320      	movs	r3, #32
 8004794:	e00e      	b.n	80047b4 <UART_SetConfig+0x484>
 8004796:	2310      	movs	r3, #16
 8004798:	e00c      	b.n	80047b4 <UART_SetConfig+0x484>
 800479a:	230c      	movs	r3, #12
 800479c:	e00a      	b.n	80047b4 <UART_SetConfig+0x484>
 800479e:	230a      	movs	r3, #10
 80047a0:	e008      	b.n	80047b4 <UART_SetConfig+0x484>
 80047a2:	2308      	movs	r3, #8
 80047a4:	e006      	b.n	80047b4 <UART_SetConfig+0x484>
 80047a6:	2306      	movs	r3, #6
 80047a8:	e004      	b.n	80047b4 <UART_SetConfig+0x484>
 80047aa:	2304      	movs	r3, #4
 80047ac:	e002      	b.n	80047b4 <UART_SetConfig+0x484>
 80047ae:	2302      	movs	r3, #2
 80047b0:	e000      	b.n	80047b4 <UART_SetConfig+0x484>
 80047b2:	2301      	movs	r3, #1
 80047b4:	0019      	movs	r1, r3
 80047b6:	0010      	movs	r0, r2
 80047b8:	f7fb fca4 	bl	8000104 <__udivsi3>
 80047bc:	0003      	movs	r3, r0
 80047be:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80047c0:	e05a      	b.n	8004878 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80047c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d04b      	beq.n	8004862 <UART_SetConfig+0x532>
 80047ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d044      	beq.n	800485c <UART_SetConfig+0x52c>
 80047d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d03d      	beq.n	8004856 <UART_SetConfig+0x526>
 80047da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	2b03      	cmp	r3, #3
 80047e0:	d037      	beq.n	8004852 <UART_SetConfig+0x522>
 80047e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d030      	beq.n	800484c <UART_SetConfig+0x51c>
 80047ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	2b05      	cmp	r3, #5
 80047f0:	d02a      	beq.n	8004848 <UART_SetConfig+0x518>
 80047f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	2b06      	cmp	r3, #6
 80047f8:	d024      	beq.n	8004844 <UART_SetConfig+0x514>
 80047fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	2b07      	cmp	r3, #7
 8004800:	d01d      	beq.n	800483e <UART_SetConfig+0x50e>
 8004802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	2b08      	cmp	r3, #8
 8004808:	d016      	beq.n	8004838 <UART_SetConfig+0x508>
 800480a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	2b09      	cmp	r3, #9
 8004810:	d00f      	beq.n	8004832 <UART_SetConfig+0x502>
 8004812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	2b0a      	cmp	r3, #10
 8004818:	d008      	beq.n	800482c <UART_SetConfig+0x4fc>
 800481a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	2b0b      	cmp	r3, #11
 8004820:	d101      	bne.n	8004826 <UART_SetConfig+0x4f6>
 8004822:	2380      	movs	r3, #128	; 0x80
 8004824:	e01f      	b.n	8004866 <UART_SetConfig+0x536>
 8004826:	2380      	movs	r3, #128	; 0x80
 8004828:	021b      	lsls	r3, r3, #8
 800482a:	e01c      	b.n	8004866 <UART_SetConfig+0x536>
 800482c:	2380      	movs	r3, #128	; 0x80
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	e019      	b.n	8004866 <UART_SetConfig+0x536>
 8004832:	2380      	movs	r3, #128	; 0x80
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	e016      	b.n	8004866 <UART_SetConfig+0x536>
 8004838:	2380      	movs	r3, #128	; 0x80
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	e013      	b.n	8004866 <UART_SetConfig+0x536>
 800483e:	2380      	movs	r3, #128	; 0x80
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	e010      	b.n	8004866 <UART_SetConfig+0x536>
 8004844:	4b5f      	ldr	r3, [pc, #380]	; (80049c4 <UART_SetConfig+0x694>)
 8004846:	e00e      	b.n	8004866 <UART_SetConfig+0x536>
 8004848:	4b5f      	ldr	r3, [pc, #380]	; (80049c8 <UART_SetConfig+0x698>)
 800484a:	e00c      	b.n	8004866 <UART_SetConfig+0x536>
 800484c:	2380      	movs	r3, #128	; 0x80
 800484e:	015b      	lsls	r3, r3, #5
 8004850:	e009      	b.n	8004866 <UART_SetConfig+0x536>
 8004852:	4b5e      	ldr	r3, [pc, #376]	; (80049cc <UART_SetConfig+0x69c>)
 8004854:	e007      	b.n	8004866 <UART_SetConfig+0x536>
 8004856:	2380      	movs	r3, #128	; 0x80
 8004858:	019b      	lsls	r3, r3, #6
 800485a:	e004      	b.n	8004866 <UART_SetConfig+0x536>
 800485c:	2380      	movs	r3, #128	; 0x80
 800485e:	01db      	lsls	r3, r3, #7
 8004860:	e001      	b.n	8004866 <UART_SetConfig+0x536>
 8004862:	2380      	movs	r3, #128	; 0x80
 8004864:	021b      	lsls	r3, r3, #8
 8004866:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8004868:	e006      	b.n	8004878 <UART_SetConfig+0x548>
      default:
        ret = HAL_ERROR;
 800486a:	231b      	movs	r3, #27
 800486c:	2258      	movs	r2, #88	; 0x58
 800486e:	18ba      	adds	r2, r7, r2
 8004870:	18d2      	adds	r2, r2, r3
 8004872:	2301      	movs	r3, #1
 8004874:	7013      	strb	r3, [r2, #0]
        break;
 8004876:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <UART_SetConfig+0x552>
 800487e:	f000 fe12 	bl	80054a6 <UART_SetConfig+0x1176>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	0013      	movs	r3, r2
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	189a      	adds	r2, r3, r2
 800488c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800488e:	4293      	cmp	r3, r2
 8004890:	d305      	bcc.n	800489e <UART_SetConfig+0x56e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800489a:	4293      	cmp	r3, r2
 800489c:	d908      	bls.n	80048b0 <UART_SetConfig+0x580>
      {
        ret = HAL_ERROR;
 800489e:	231b      	movs	r3, #27
 80048a0:	2258      	movs	r2, #88	; 0x58
 80048a2:	4694      	mov	ip, r2
 80048a4:	44bc      	add	ip, r7
 80048a6:	4463      	add	r3, ip
 80048a8:	2201      	movs	r2, #1
 80048aa:	701a      	strb	r2, [r3, #0]
 80048ac:	f000 fdfb 	bl	80054a6 <UART_SetConfig+0x1176>
      }
      else
      {
        switch (clocksource)
 80048b0:	2323      	movs	r3, #35	; 0x23
 80048b2:	2258      	movs	r2, #88	; 0x58
 80048b4:	4694      	mov	ip, r2
 80048b6:	44bc      	add	ip, r7
 80048b8:	4463      	add	r3, ip
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d100      	bne.n	80048c2 <UART_SetConfig+0x592>
 80048c0:	e0ab      	b.n	8004a1a <UART_SetConfig+0x6ea>
 80048c2:	dc02      	bgt.n	80048ca <UART_SetConfig+0x59a>
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d007      	beq.n	80048d8 <UART_SetConfig+0x5a8>
 80048c8:	e213      	b.n	8004cf2 <UART_SetConfig+0x9c2>
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d100      	bne.n	80048d0 <UART_SetConfig+0x5a0>
 80048ce:	e111      	b.n	8004af4 <UART_SetConfig+0x7c4>
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d100      	bne.n	80048d6 <UART_SetConfig+0x5a6>
 80048d4:	e196      	b.n	8004c04 <UART_SetConfig+0x8d4>
 80048d6:	e20c      	b.n	8004cf2 <UART_SetConfig+0x9c2>
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80048d8:	f7fe ffd8 	bl	800388c <HAL_RCC_GetPCLK1Freq>
 80048dc:	0003      	movs	r3, r0
 80048de:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80048e4:	2300      	movs	r3, #0
 80048e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d100      	bne.n	80048f2 <UART_SetConfig+0x5c2>
 80048f0:	e06e      	b.n	80049d0 <UART_SetConfig+0x6a0>
 80048f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d049      	beq.n	800498e <UART_SetConfig+0x65e>
 80048fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d042      	beq.n	8004988 <UART_SetConfig+0x658>
 8004902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	2b03      	cmp	r3, #3
 8004908:	d03b      	beq.n	8004982 <UART_SetConfig+0x652>
 800490a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	2b04      	cmp	r3, #4
 8004910:	d034      	beq.n	800497c <UART_SetConfig+0x64c>
 8004912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	2b05      	cmp	r3, #5
 8004918:	d02d      	beq.n	8004976 <UART_SetConfig+0x646>
 800491a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	2b06      	cmp	r3, #6
 8004920:	d026      	beq.n	8004970 <UART_SetConfig+0x640>
 8004922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	2b07      	cmp	r3, #7
 8004928:	d01f      	beq.n	800496a <UART_SetConfig+0x63a>
 800492a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	2b08      	cmp	r3, #8
 8004930:	d018      	beq.n	8004964 <UART_SetConfig+0x634>
 8004932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	2b09      	cmp	r3, #9
 8004938:	d011      	beq.n	800495e <UART_SetConfig+0x62e>
 800493a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	2b0a      	cmp	r3, #10
 8004940:	d00a      	beq.n	8004958 <UART_SetConfig+0x628>
 8004942:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	2b0b      	cmp	r3, #11
 8004948:	d103      	bne.n	8004952 <UART_SetConfig+0x622>
 800494a:	2380      	movs	r3, #128	; 0x80
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	2400      	movs	r4, #0
 8004950:	e040      	b.n	80049d4 <UART_SetConfig+0x6a4>
 8004952:	2301      	movs	r3, #1
 8004954:	2400      	movs	r4, #0
 8004956:	e03d      	b.n	80049d4 <UART_SetConfig+0x6a4>
 8004958:	2380      	movs	r3, #128	; 0x80
 800495a:	2400      	movs	r4, #0
 800495c:	e03a      	b.n	80049d4 <UART_SetConfig+0x6a4>
 800495e:	2340      	movs	r3, #64	; 0x40
 8004960:	2400      	movs	r4, #0
 8004962:	e037      	b.n	80049d4 <UART_SetConfig+0x6a4>
 8004964:	2320      	movs	r3, #32
 8004966:	2400      	movs	r4, #0
 8004968:	e034      	b.n	80049d4 <UART_SetConfig+0x6a4>
 800496a:	2310      	movs	r3, #16
 800496c:	2400      	movs	r4, #0
 800496e:	e031      	b.n	80049d4 <UART_SetConfig+0x6a4>
 8004970:	230c      	movs	r3, #12
 8004972:	2400      	movs	r4, #0
 8004974:	e02e      	b.n	80049d4 <UART_SetConfig+0x6a4>
 8004976:	230a      	movs	r3, #10
 8004978:	2400      	movs	r4, #0
 800497a:	e02b      	b.n	80049d4 <UART_SetConfig+0x6a4>
 800497c:	2308      	movs	r3, #8
 800497e:	2400      	movs	r4, #0
 8004980:	e028      	b.n	80049d4 <UART_SetConfig+0x6a4>
 8004982:	2306      	movs	r3, #6
 8004984:	2400      	movs	r4, #0
 8004986:	e025      	b.n	80049d4 <UART_SetConfig+0x6a4>
 8004988:	2304      	movs	r3, #4
 800498a:	2400      	movs	r4, #0
 800498c:	e022      	b.n	80049d4 <UART_SetConfig+0x6a4>
 800498e:	2302      	movs	r3, #2
 8004990:	2400      	movs	r4, #0
 8004992:	e01f      	b.n	80049d4 <UART_SetConfig+0x6a4>
 8004994:	0000f424 	.word	0x0000f424
 8004998:	00f42400 	.word	0x00f42400
 800499c:	0001e848 	.word	0x0001e848
 80049a0:	0003d090 	.word	0x0003d090
 80049a4:	0007a120 	.word	0x0007a120
 80049a8:	000f4240 	.word	0x000f4240
 80049ac:	00145855 	.word	0x00145855
 80049b0:	00186a00 	.word	0x00186a00
 80049b4:	001e8480 	.word	0x001e8480
 80049b8:	0028b0aa 	.word	0x0028b0aa
 80049bc:	003d0900 	.word	0x003d0900
 80049c0:	007a1200 	.word	0x007a1200
 80049c4:	00000aaa 	.word	0x00000aaa
 80049c8:	00000ccc 	.word	0x00000ccc
 80049cc:	00001555 	.word	0x00001555
 80049d0:	2301      	movs	r3, #1
 80049d2:	2400      	movs	r4, #0
 80049d4:	001a      	movs	r2, r3
 80049d6:	0023      	movs	r3, r4
 80049d8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80049da:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80049dc:	f7fb fd08 	bl	80003f0 <__aeabi_uldivmod>
 80049e0:	0003      	movs	r3, r0
 80049e2:	000c      	movs	r4, r1
 80049e4:	0e1a      	lsrs	r2, r3, #24
 80049e6:	0226      	lsls	r6, r4, #8
 80049e8:	4316      	orrs	r6, r2
 80049ea:	021d      	lsls	r5, r3, #8
 80049ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	085b      	lsrs	r3, r3, #1
 80049f2:	643b      	str	r3, [r7, #64]	; 0x40
 80049f4:	2300      	movs	r3, #0
 80049f6:	647b      	str	r3, [r7, #68]	; 0x44
 80049f8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80049fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049fc:	1940      	adds	r0, r0, r5
 80049fe:	4171      	adcs	r1, r6
 8004a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a06:	2300      	movs	r3, #0
 8004a08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a0e:	f7fb fcef 	bl	80003f0 <__aeabi_uldivmod>
 8004a12:	0003      	movs	r3, r0
 8004a14:	000c      	movs	r4, r1
 8004a16:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8004a18:	e173      	b.n	8004d02 <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d04f      	beq.n	8004ac2 <UART_SetConfig+0x792>
 8004a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d048      	beq.n	8004abc <UART_SetConfig+0x78c>
 8004a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d041      	beq.n	8004ab6 <UART_SetConfig+0x786>
 8004a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d03a      	beq.n	8004ab0 <UART_SetConfig+0x780>
 8004a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d033      	beq.n	8004aaa <UART_SetConfig+0x77a>
 8004a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	2b05      	cmp	r3, #5
 8004a48:	d02c      	beq.n	8004aa4 <UART_SetConfig+0x774>
 8004a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	2b06      	cmp	r3, #6
 8004a50:	d025      	beq.n	8004a9e <UART_SetConfig+0x76e>
 8004a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	2b07      	cmp	r3, #7
 8004a58:	d01e      	beq.n	8004a98 <UART_SetConfig+0x768>
 8004a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	2b08      	cmp	r3, #8
 8004a60:	d017      	beq.n	8004a92 <UART_SetConfig+0x762>
 8004a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	2b09      	cmp	r3, #9
 8004a68:	d010      	beq.n	8004a8c <UART_SetConfig+0x75c>
 8004a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	2b0a      	cmp	r3, #10
 8004a70:	d009      	beq.n	8004a86 <UART_SetConfig+0x756>
 8004a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	2b0b      	cmp	r3, #11
 8004a78:	d102      	bne.n	8004a80 <UART_SetConfig+0x750>
 8004a7a:	4bbb      	ldr	r3, [pc, #748]	; (8004d68 <UART_SetConfig+0xa38>)
 8004a7c:	2400      	movs	r4, #0
 8004a7e:	e022      	b.n	8004ac6 <UART_SetConfig+0x796>
 8004a80:	4bba      	ldr	r3, [pc, #744]	; (8004d6c <UART_SetConfig+0xa3c>)
 8004a82:	2400      	movs	r4, #0
 8004a84:	e01f      	b.n	8004ac6 <UART_SetConfig+0x796>
 8004a86:	4bba      	ldr	r3, [pc, #744]	; (8004d70 <UART_SetConfig+0xa40>)
 8004a88:	2400      	movs	r4, #0
 8004a8a:	e01c      	b.n	8004ac6 <UART_SetConfig+0x796>
 8004a8c:	4bb9      	ldr	r3, [pc, #740]	; (8004d74 <UART_SetConfig+0xa44>)
 8004a8e:	2400      	movs	r4, #0
 8004a90:	e019      	b.n	8004ac6 <UART_SetConfig+0x796>
 8004a92:	4bb9      	ldr	r3, [pc, #740]	; (8004d78 <UART_SetConfig+0xa48>)
 8004a94:	2400      	movs	r4, #0
 8004a96:	e016      	b.n	8004ac6 <UART_SetConfig+0x796>
 8004a98:	4bb8      	ldr	r3, [pc, #736]	; (8004d7c <UART_SetConfig+0xa4c>)
 8004a9a:	2400      	movs	r4, #0
 8004a9c:	e013      	b.n	8004ac6 <UART_SetConfig+0x796>
 8004a9e:	4bb8      	ldr	r3, [pc, #736]	; (8004d80 <UART_SetConfig+0xa50>)
 8004aa0:	2400      	movs	r4, #0
 8004aa2:	e010      	b.n	8004ac6 <UART_SetConfig+0x796>
 8004aa4:	4bb7      	ldr	r3, [pc, #732]	; (8004d84 <UART_SetConfig+0xa54>)
 8004aa6:	2400      	movs	r4, #0
 8004aa8:	e00d      	b.n	8004ac6 <UART_SetConfig+0x796>
 8004aaa:	4bb7      	ldr	r3, [pc, #732]	; (8004d88 <UART_SetConfig+0xa58>)
 8004aac:	2400      	movs	r4, #0
 8004aae:	e00a      	b.n	8004ac6 <UART_SetConfig+0x796>
 8004ab0:	4bb6      	ldr	r3, [pc, #728]	; (8004d8c <UART_SetConfig+0xa5c>)
 8004ab2:	2400      	movs	r4, #0
 8004ab4:	e007      	b.n	8004ac6 <UART_SetConfig+0x796>
 8004ab6:	4bb6      	ldr	r3, [pc, #728]	; (8004d90 <UART_SetConfig+0xa60>)
 8004ab8:	2400      	movs	r4, #0
 8004aba:	e004      	b.n	8004ac6 <UART_SetConfig+0x796>
 8004abc:	4bb5      	ldr	r3, [pc, #724]	; (8004d94 <UART_SetConfig+0xa64>)
 8004abe:	2400      	movs	r4, #0
 8004ac0:	e001      	b.n	8004ac6 <UART_SetConfig+0x796>
 8004ac2:	4baa      	ldr	r3, [pc, #680]	; (8004d6c <UART_SetConfig+0xa3c>)
 8004ac4:	2400      	movs	r4, #0
 8004ac6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ac8:	6852      	ldr	r2, [r2, #4]
 8004aca:	0852      	lsrs	r2, r2, #1
 8004acc:	633a      	str	r2, [r7, #48]	; 0x30
 8004ace:	2200      	movs	r2, #0
 8004ad0:	637a      	str	r2, [r7, #52]	; 0x34
 8004ad2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ad4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004ad6:	18c0      	adds	r0, r0, r3
 8004ad8:	4161      	adcs	r1, r4
 8004ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae8:	f7fb fc82 	bl	80003f0 <__aeabi_uldivmod>
 8004aec:	0003      	movs	r3, r0
 8004aee:	000c      	movs	r4, r1
 8004af0:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8004af2:	e106      	b.n	8004d02 <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004af4:	f7fe fe3e 	bl	8003774 <HAL_RCC_GetSysClockFreq>
 8004af8:	0003      	movs	r3, r0
 8004afa:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004afc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004afe:	623b      	str	r3, [r7, #32]
 8004b00:	2300      	movs	r3, #0
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
 8004b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d050      	beq.n	8004bae <UART_SetConfig+0x87e>
 8004b0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d049      	beq.n	8004ba8 <UART_SetConfig+0x878>
 8004b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d042      	beq.n	8004ba2 <UART_SetConfig+0x872>
 8004b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	2b03      	cmp	r3, #3
 8004b22:	d03b      	beq.n	8004b9c <UART_SetConfig+0x86c>
 8004b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	2b04      	cmp	r3, #4
 8004b2a:	d034      	beq.n	8004b96 <UART_SetConfig+0x866>
 8004b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	2b05      	cmp	r3, #5
 8004b32:	d02d      	beq.n	8004b90 <UART_SetConfig+0x860>
 8004b34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	2b06      	cmp	r3, #6
 8004b3a:	d026      	beq.n	8004b8a <UART_SetConfig+0x85a>
 8004b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	2b07      	cmp	r3, #7
 8004b42:	d01f      	beq.n	8004b84 <UART_SetConfig+0x854>
 8004b44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d018      	beq.n	8004b7e <UART_SetConfig+0x84e>
 8004b4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	2b09      	cmp	r3, #9
 8004b52:	d011      	beq.n	8004b78 <UART_SetConfig+0x848>
 8004b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	2b0a      	cmp	r3, #10
 8004b5a:	d00a      	beq.n	8004b72 <UART_SetConfig+0x842>
 8004b5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	2b0b      	cmp	r3, #11
 8004b62:	d103      	bne.n	8004b6c <UART_SetConfig+0x83c>
 8004b64:	2380      	movs	r3, #128	; 0x80
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	2400      	movs	r4, #0
 8004b6a:	e022      	b.n	8004bb2 <UART_SetConfig+0x882>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	2400      	movs	r4, #0
 8004b70:	e01f      	b.n	8004bb2 <UART_SetConfig+0x882>
 8004b72:	2380      	movs	r3, #128	; 0x80
 8004b74:	2400      	movs	r4, #0
 8004b76:	e01c      	b.n	8004bb2 <UART_SetConfig+0x882>
 8004b78:	2340      	movs	r3, #64	; 0x40
 8004b7a:	2400      	movs	r4, #0
 8004b7c:	e019      	b.n	8004bb2 <UART_SetConfig+0x882>
 8004b7e:	2320      	movs	r3, #32
 8004b80:	2400      	movs	r4, #0
 8004b82:	e016      	b.n	8004bb2 <UART_SetConfig+0x882>
 8004b84:	2310      	movs	r3, #16
 8004b86:	2400      	movs	r4, #0
 8004b88:	e013      	b.n	8004bb2 <UART_SetConfig+0x882>
 8004b8a:	230c      	movs	r3, #12
 8004b8c:	2400      	movs	r4, #0
 8004b8e:	e010      	b.n	8004bb2 <UART_SetConfig+0x882>
 8004b90:	230a      	movs	r3, #10
 8004b92:	2400      	movs	r4, #0
 8004b94:	e00d      	b.n	8004bb2 <UART_SetConfig+0x882>
 8004b96:	2308      	movs	r3, #8
 8004b98:	2400      	movs	r4, #0
 8004b9a:	e00a      	b.n	8004bb2 <UART_SetConfig+0x882>
 8004b9c:	2306      	movs	r3, #6
 8004b9e:	2400      	movs	r4, #0
 8004ba0:	e007      	b.n	8004bb2 <UART_SetConfig+0x882>
 8004ba2:	2304      	movs	r3, #4
 8004ba4:	2400      	movs	r4, #0
 8004ba6:	e004      	b.n	8004bb2 <UART_SetConfig+0x882>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	2400      	movs	r4, #0
 8004bac:	e001      	b.n	8004bb2 <UART_SetConfig+0x882>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	2400      	movs	r4, #0
 8004bb2:	001a      	movs	r2, r3
 8004bb4:	0023      	movs	r3, r4
 8004bb6:	6a38      	ldr	r0, [r7, #32]
 8004bb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bba:	f7fb fc19 	bl	80003f0 <__aeabi_uldivmod>
 8004bbe:	0003      	movs	r3, r0
 8004bc0:	000c      	movs	r4, r1
 8004bc2:	0e1a      	lsrs	r2, r3, #24
 8004bc4:	0221      	lsls	r1, r4, #8
 8004bc6:	6579      	str	r1, [r7, #84]	; 0x54
 8004bc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bca:	4311      	orrs	r1, r2
 8004bcc:	6579      	str	r1, [r7, #84]	; 0x54
 8004bce:	021b      	lsls	r3, r3, #8
 8004bd0:	653b      	str	r3, [r7, #80]	; 0x50
 8004bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	085b      	lsrs	r3, r3, #1
 8004bd8:	61bb      	str	r3, [r7, #24]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	61fb      	str	r3, [r7, #28]
 8004bde:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004be0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	69fc      	ldr	r4, [r7, #28]
 8004be6:	18c0      	adds	r0, r0, r3
 8004be8:	4161      	adcs	r1, r4
 8004bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	613b      	str	r3, [r7, #16]
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f7fb fbfa 	bl	80003f0 <__aeabi_uldivmod>
 8004bfc:	0003      	movs	r3, r0
 8004bfe:	000c      	movs	r4, r1
 8004c00:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8004c02:	e07e      	b.n	8004d02 <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d058      	beq.n	8004cbe <UART_SetConfig+0x98e>
 8004c0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d050      	beq.n	8004cb6 <UART_SetConfig+0x986>
 8004c14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d048      	beq.n	8004cae <UART_SetConfig+0x97e>
 8004c1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	2b03      	cmp	r3, #3
 8004c22:	d041      	beq.n	8004ca8 <UART_SetConfig+0x978>
 8004c24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d039      	beq.n	8004ca0 <UART_SetConfig+0x970>
 8004c2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	2b05      	cmp	r3, #5
 8004c32:	d032      	beq.n	8004c9a <UART_SetConfig+0x96a>
 8004c34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	2b06      	cmp	r3, #6
 8004c3a:	d02b      	beq.n	8004c94 <UART_SetConfig+0x964>
 8004c3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	2b07      	cmp	r3, #7
 8004c42:	d023      	beq.n	8004c8c <UART_SetConfig+0x95c>
 8004c44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d01b      	beq.n	8004c84 <UART_SetConfig+0x954>
 8004c4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	2b09      	cmp	r3, #9
 8004c52:	d013      	beq.n	8004c7c <UART_SetConfig+0x94c>
 8004c54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	2b0a      	cmp	r3, #10
 8004c5a:	d00b      	beq.n	8004c74 <UART_SetConfig+0x944>
 8004c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c60:	2b0b      	cmp	r3, #11
 8004c62:	d103      	bne.n	8004c6c <UART_SetConfig+0x93c>
 8004c64:	2380      	movs	r3, #128	; 0x80
 8004c66:	021b      	lsls	r3, r3, #8
 8004c68:	2400      	movs	r4, #0
 8004c6a:	e02b      	b.n	8004cc4 <UART_SetConfig+0x994>
 8004c6c:	2380      	movs	r3, #128	; 0x80
 8004c6e:	041b      	lsls	r3, r3, #16
 8004c70:	2400      	movs	r4, #0
 8004c72:	e027      	b.n	8004cc4 <UART_SetConfig+0x994>
 8004c74:	2380      	movs	r3, #128	; 0x80
 8004c76:	025b      	lsls	r3, r3, #9
 8004c78:	2400      	movs	r4, #0
 8004c7a:	e023      	b.n	8004cc4 <UART_SetConfig+0x994>
 8004c7c:	2380      	movs	r3, #128	; 0x80
 8004c7e:	029b      	lsls	r3, r3, #10
 8004c80:	2400      	movs	r4, #0
 8004c82:	e01f      	b.n	8004cc4 <UART_SetConfig+0x994>
 8004c84:	2380      	movs	r3, #128	; 0x80
 8004c86:	02db      	lsls	r3, r3, #11
 8004c88:	2400      	movs	r4, #0
 8004c8a:	e01b      	b.n	8004cc4 <UART_SetConfig+0x994>
 8004c8c:	2380      	movs	r3, #128	; 0x80
 8004c8e:	031b      	lsls	r3, r3, #12
 8004c90:	2400      	movs	r4, #0
 8004c92:	e017      	b.n	8004cc4 <UART_SetConfig+0x994>
 8004c94:	4b40      	ldr	r3, [pc, #256]	; (8004d98 <UART_SetConfig+0xa68>)
 8004c96:	2400      	movs	r4, #0
 8004c98:	e014      	b.n	8004cc4 <UART_SetConfig+0x994>
 8004c9a:	4b40      	ldr	r3, [pc, #256]	; (8004d9c <UART_SetConfig+0xa6c>)
 8004c9c:	2400      	movs	r4, #0
 8004c9e:	e011      	b.n	8004cc4 <UART_SetConfig+0x994>
 8004ca0:	2380      	movs	r3, #128	; 0x80
 8004ca2:	035b      	lsls	r3, r3, #13
 8004ca4:	2400      	movs	r4, #0
 8004ca6:	e00d      	b.n	8004cc4 <UART_SetConfig+0x994>
 8004ca8:	4b3d      	ldr	r3, [pc, #244]	; (8004da0 <UART_SetConfig+0xa70>)
 8004caa:	2400      	movs	r4, #0
 8004cac:	e00a      	b.n	8004cc4 <UART_SetConfig+0x994>
 8004cae:	2380      	movs	r3, #128	; 0x80
 8004cb0:	039b      	lsls	r3, r3, #14
 8004cb2:	2400      	movs	r4, #0
 8004cb4:	e006      	b.n	8004cc4 <UART_SetConfig+0x994>
 8004cb6:	2380      	movs	r3, #128	; 0x80
 8004cb8:	03db      	lsls	r3, r3, #15
 8004cba:	2400      	movs	r4, #0
 8004cbc:	e002      	b.n	8004cc4 <UART_SetConfig+0x994>
 8004cbe:	2380      	movs	r3, #128	; 0x80
 8004cc0:	041b      	lsls	r3, r3, #16
 8004cc2:	2400      	movs	r4, #0
 8004cc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cc6:	6852      	ldr	r2, [r2, #4]
 8004cc8:	0852      	lsrs	r2, r2, #1
 8004cca:	60ba      	str	r2, [r7, #8]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	60fa      	str	r2, [r7, #12]
 8004cd0:	68b8      	ldr	r0, [r7, #8]
 8004cd2:	68f9      	ldr	r1, [r7, #12]
 8004cd4:	18c0      	adds	r0, r0, r3
 8004cd6:	4161      	adcs	r1, r4
 8004cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	603b      	str	r3, [r7, #0]
 8004cde:	2300      	movs	r3, #0
 8004ce0:	607b      	str	r3, [r7, #4]
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f7fb fb83 	bl	80003f0 <__aeabi_uldivmod>
 8004cea:	0003      	movs	r3, r0
 8004cec:	000c      	movs	r4, r1
 8004cee:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8004cf0:	e007      	b.n	8004d02 <UART_SetConfig+0x9d2>
          default:
            ret = HAL_ERROR;
 8004cf2:	231b      	movs	r3, #27
 8004cf4:	2258      	movs	r2, #88	; 0x58
 8004cf6:	4694      	mov	ip, r2
 8004cf8:	44bc      	add	ip, r7
 8004cfa:	4463      	add	r3, ip
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	701a      	strb	r2, [r3, #0]
            break;
 8004d00:	46c0      	nop			; (mov r8, r8)
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d04:	4a27      	ldr	r2, [pc, #156]	; (8004da4 <UART_SetConfig+0xa74>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d909      	bls.n	8004d1e <UART_SetConfig+0x9ee>
 8004d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d0c:	4a26      	ldr	r2, [pc, #152]	; (8004da8 <UART_SetConfig+0xa78>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d805      	bhi.n	8004d1e <UART_SetConfig+0x9ee>
        {
          huart->Instance->BRR = usartdiv;
 8004d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004d18:	60da      	str	r2, [r3, #12]
 8004d1a:	f000 fbc4 	bl	80054a6 <UART_SetConfig+0x1176>
        }
        else
        {
          ret = HAL_ERROR;
 8004d1e:	231b      	movs	r3, #27
 8004d20:	2258      	movs	r2, #88	; 0x58
 8004d22:	4694      	mov	ip, r2
 8004d24:	44bc      	add	ip, r7
 8004d26:	4463      	add	r3, ip
 8004d28:	2201      	movs	r2, #1
 8004d2a:	701a      	strb	r2, [r3, #0]
 8004d2c:	f000 fbbb 	bl	80054a6 <UART_SetConfig+0x1176>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d32:	69da      	ldr	r2, [r3, #28]
 8004d34:	2380      	movs	r3, #128	; 0x80
 8004d36:	021b      	lsls	r3, r3, #8
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d000      	beq.n	8004d3e <UART_SetConfig+0xa0e>
 8004d3c:	e1e6      	b.n	800510c <UART_SetConfig+0xddc>
  {
    switch (clocksource)
 8004d3e:	2323      	movs	r3, #35	; 0x23
 8004d40:	2258      	movs	r2, #88	; 0x58
 8004d42:	4694      	mov	ip, r2
 8004d44:	44bc      	add	ip, r7
 8004d46:	4463      	add	r3, ip
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d100      	bne.n	8004d50 <UART_SetConfig+0xa20>
 8004d4e:	e08f      	b.n	8004e70 <UART_SetConfig+0xb40>
 8004d50:	dc02      	bgt.n	8004d58 <UART_SetConfig+0xa28>
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d02a      	beq.n	8004dac <UART_SetConfig+0xa7c>
 8004d56:	e1a5      	b.n	80050a4 <UART_SetConfig+0xd74>
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	d100      	bne.n	8004d5e <UART_SetConfig+0xa2e>
 8004d5c:	e0df      	b.n	8004f1e <UART_SetConfig+0xbee>
 8004d5e:	2b08      	cmp	r3, #8
 8004d60:	d100      	bne.n	8004d64 <UART_SetConfig+0xa34>
 8004d62:	e13e      	b.n	8004fe2 <UART_SetConfig+0xcb2>
 8004d64:	e19e      	b.n	80050a4 <UART_SetConfig+0xd74>
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	00f42400 	.word	0x00f42400
 8004d6c:	f4240000 	.word	0xf4240000
 8004d70:	01e84800 	.word	0x01e84800
 8004d74:	03d09000 	.word	0x03d09000
 8004d78:	07a12000 	.word	0x07a12000
 8004d7c:	0f424000 	.word	0x0f424000
 8004d80:	14585500 	.word	0x14585500
 8004d84:	186a0000 	.word	0x186a0000
 8004d88:	1e848000 	.word	0x1e848000
 8004d8c:	28b0aa00 	.word	0x28b0aa00
 8004d90:	3d090000 	.word	0x3d090000
 8004d94:	7a120000 	.word	0x7a120000
 8004d98:	000aaa00 	.word	0x000aaa00
 8004d9c:	000ccc00 	.word	0x000ccc00
 8004da0:	00155500 	.word	0x00155500
 8004da4:	000002ff 	.word	0x000002ff
 8004da8:	000fffff 	.word	0x000fffff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dac:	f7fe fd6e 	bl	800388c <HAL_RCC_GetPCLK1Freq>
 8004db0:	0003      	movs	r3, r0
 8004db2:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004db4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d044      	beq.n	8004e46 <UART_SetConfig+0xb16>
 8004dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d03e      	beq.n	8004e42 <UART_SetConfig+0xb12>
 8004dc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d038      	beq.n	8004e3e <UART_SetConfig+0xb0e>
 8004dcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	2b03      	cmp	r3, #3
 8004dd2:	d032      	beq.n	8004e3a <UART_SetConfig+0xb0a>
 8004dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	2b04      	cmp	r3, #4
 8004dda:	d02c      	beq.n	8004e36 <UART_SetConfig+0xb06>
 8004ddc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	2b05      	cmp	r3, #5
 8004de2:	d026      	beq.n	8004e32 <UART_SetConfig+0xb02>
 8004de4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	2b06      	cmp	r3, #6
 8004dea:	d020      	beq.n	8004e2e <UART_SetConfig+0xafe>
 8004dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	2b07      	cmp	r3, #7
 8004df2:	d01a      	beq.n	8004e2a <UART_SetConfig+0xafa>
 8004df4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d014      	beq.n	8004e26 <UART_SetConfig+0xaf6>
 8004dfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	2b09      	cmp	r3, #9
 8004e02:	d00e      	beq.n	8004e22 <UART_SetConfig+0xaf2>
 8004e04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	2b0a      	cmp	r3, #10
 8004e0a:	d008      	beq.n	8004e1e <UART_SetConfig+0xaee>
 8004e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	2b0b      	cmp	r3, #11
 8004e12:	d102      	bne.n	8004e1a <UART_SetConfig+0xaea>
 8004e14:	2380      	movs	r3, #128	; 0x80
 8004e16:	005b      	lsls	r3, r3, #1
 8004e18:	e016      	b.n	8004e48 <UART_SetConfig+0xb18>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e014      	b.n	8004e48 <UART_SetConfig+0xb18>
 8004e1e:	2380      	movs	r3, #128	; 0x80
 8004e20:	e012      	b.n	8004e48 <UART_SetConfig+0xb18>
 8004e22:	2340      	movs	r3, #64	; 0x40
 8004e24:	e010      	b.n	8004e48 <UART_SetConfig+0xb18>
 8004e26:	2320      	movs	r3, #32
 8004e28:	e00e      	b.n	8004e48 <UART_SetConfig+0xb18>
 8004e2a:	2310      	movs	r3, #16
 8004e2c:	e00c      	b.n	8004e48 <UART_SetConfig+0xb18>
 8004e2e:	230c      	movs	r3, #12
 8004e30:	e00a      	b.n	8004e48 <UART_SetConfig+0xb18>
 8004e32:	230a      	movs	r3, #10
 8004e34:	e008      	b.n	8004e48 <UART_SetConfig+0xb18>
 8004e36:	2308      	movs	r3, #8
 8004e38:	e006      	b.n	8004e48 <UART_SetConfig+0xb18>
 8004e3a:	2306      	movs	r3, #6
 8004e3c:	e004      	b.n	8004e48 <UART_SetConfig+0xb18>
 8004e3e:	2304      	movs	r3, #4
 8004e40:	e002      	b.n	8004e48 <UART_SetConfig+0xb18>
 8004e42:	2302      	movs	r3, #2
 8004e44:	e000      	b.n	8004e48 <UART_SetConfig+0xb18>
 8004e46:	2301      	movs	r3, #1
 8004e48:	0019      	movs	r1, r3
 8004e4a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004e4c:	f7fb f95a 	bl	8000104 <__udivsi3>
 8004e50:	0003      	movs	r3, r0
 8004e52:	005a      	lsls	r2, r3, #1
 8004e54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	085b      	lsrs	r3, r3, #1
 8004e5a:	18d2      	adds	r2, r2, r3
 8004e5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	0019      	movs	r1, r3
 8004e62:	0010      	movs	r0, r2
 8004e64:	f7fb f94e 	bl	8000104 <__udivsi3>
 8004e68:	0003      	movs	r3, r0
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004e6e:	e121      	b.n	80050b4 <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d043      	beq.n	8004f00 <UART_SetConfig+0xbd0>
 8004e78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d03d      	beq.n	8004efc <UART_SetConfig+0xbcc>
 8004e80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d037      	beq.n	8004ef8 <UART_SetConfig+0xbc8>
 8004e88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	2b03      	cmp	r3, #3
 8004e8e:	d031      	beq.n	8004ef4 <UART_SetConfig+0xbc4>
 8004e90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	2b04      	cmp	r3, #4
 8004e96:	d02b      	beq.n	8004ef0 <UART_SetConfig+0xbc0>
 8004e98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	2b05      	cmp	r3, #5
 8004e9e:	d025      	beq.n	8004eec <UART_SetConfig+0xbbc>
 8004ea0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	2b06      	cmp	r3, #6
 8004ea6:	d01f      	beq.n	8004ee8 <UART_SetConfig+0xbb8>
 8004ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	2b07      	cmp	r3, #7
 8004eae:	d019      	beq.n	8004ee4 <UART_SetConfig+0xbb4>
 8004eb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	2b08      	cmp	r3, #8
 8004eb6:	d013      	beq.n	8004ee0 <UART_SetConfig+0xbb0>
 8004eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	2b09      	cmp	r3, #9
 8004ebe:	d00d      	beq.n	8004edc <UART_SetConfig+0xbac>
 8004ec0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	2b0a      	cmp	r3, #10
 8004ec6:	d007      	beq.n	8004ed8 <UART_SetConfig+0xba8>
 8004ec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	2b0b      	cmp	r3, #11
 8004ece:	d101      	bne.n	8004ed4 <UART_SetConfig+0xba4>
 8004ed0:	4bba      	ldr	r3, [pc, #744]	; (80051bc <UART_SetConfig+0xe8c>)
 8004ed2:	e016      	b.n	8004f02 <UART_SetConfig+0xbd2>
 8004ed4:	4bba      	ldr	r3, [pc, #744]	; (80051c0 <UART_SetConfig+0xe90>)
 8004ed6:	e014      	b.n	8004f02 <UART_SetConfig+0xbd2>
 8004ed8:	4bba      	ldr	r3, [pc, #744]	; (80051c4 <UART_SetConfig+0xe94>)
 8004eda:	e012      	b.n	8004f02 <UART_SetConfig+0xbd2>
 8004edc:	4bba      	ldr	r3, [pc, #744]	; (80051c8 <UART_SetConfig+0xe98>)
 8004ede:	e010      	b.n	8004f02 <UART_SetConfig+0xbd2>
 8004ee0:	4bba      	ldr	r3, [pc, #744]	; (80051cc <UART_SetConfig+0xe9c>)
 8004ee2:	e00e      	b.n	8004f02 <UART_SetConfig+0xbd2>
 8004ee4:	4bba      	ldr	r3, [pc, #744]	; (80051d0 <UART_SetConfig+0xea0>)
 8004ee6:	e00c      	b.n	8004f02 <UART_SetConfig+0xbd2>
 8004ee8:	4bba      	ldr	r3, [pc, #744]	; (80051d4 <UART_SetConfig+0xea4>)
 8004eea:	e00a      	b.n	8004f02 <UART_SetConfig+0xbd2>
 8004eec:	4bba      	ldr	r3, [pc, #744]	; (80051d8 <UART_SetConfig+0xea8>)
 8004eee:	e008      	b.n	8004f02 <UART_SetConfig+0xbd2>
 8004ef0:	4bba      	ldr	r3, [pc, #744]	; (80051dc <UART_SetConfig+0xeac>)
 8004ef2:	e006      	b.n	8004f02 <UART_SetConfig+0xbd2>
 8004ef4:	4bba      	ldr	r3, [pc, #744]	; (80051e0 <UART_SetConfig+0xeb0>)
 8004ef6:	e004      	b.n	8004f02 <UART_SetConfig+0xbd2>
 8004ef8:	4bba      	ldr	r3, [pc, #744]	; (80051e4 <UART_SetConfig+0xeb4>)
 8004efa:	e002      	b.n	8004f02 <UART_SetConfig+0xbd2>
 8004efc:	4bba      	ldr	r3, [pc, #744]	; (80051e8 <UART_SetConfig+0xeb8>)
 8004efe:	e000      	b.n	8004f02 <UART_SetConfig+0xbd2>
 8004f00:	4baf      	ldr	r3, [pc, #700]	; (80051c0 <UART_SetConfig+0xe90>)
 8004f02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f04:	6852      	ldr	r2, [r2, #4]
 8004f06:	0852      	lsrs	r2, r2, #1
 8004f08:	189a      	adds	r2, r3, r2
 8004f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	0019      	movs	r1, r3
 8004f10:	0010      	movs	r0, r2
 8004f12:	f7fb f8f7 	bl	8000104 <__udivsi3>
 8004f16:	0003      	movs	r3, r0
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004f1c:	e0ca      	b.n	80050b4 <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f1e:	f7fe fc29 	bl	8003774 <HAL_RCC_GetSysClockFreq>
 8004f22:	0003      	movs	r3, r0
 8004f24:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d044      	beq.n	8004fb8 <UART_SetConfig+0xc88>
 8004f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d03e      	beq.n	8004fb4 <UART_SetConfig+0xc84>
 8004f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d038      	beq.n	8004fb0 <UART_SetConfig+0xc80>
 8004f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	2b03      	cmp	r3, #3
 8004f44:	d032      	beq.n	8004fac <UART_SetConfig+0xc7c>
 8004f46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d02c      	beq.n	8004fa8 <UART_SetConfig+0xc78>
 8004f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	2b05      	cmp	r3, #5
 8004f54:	d026      	beq.n	8004fa4 <UART_SetConfig+0xc74>
 8004f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	2b06      	cmp	r3, #6
 8004f5c:	d020      	beq.n	8004fa0 <UART_SetConfig+0xc70>
 8004f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	2b07      	cmp	r3, #7
 8004f64:	d01a      	beq.n	8004f9c <UART_SetConfig+0xc6c>
 8004f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d014      	beq.n	8004f98 <UART_SetConfig+0xc68>
 8004f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	2b09      	cmp	r3, #9
 8004f74:	d00e      	beq.n	8004f94 <UART_SetConfig+0xc64>
 8004f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	2b0a      	cmp	r3, #10
 8004f7c:	d008      	beq.n	8004f90 <UART_SetConfig+0xc60>
 8004f7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f82:	2b0b      	cmp	r3, #11
 8004f84:	d102      	bne.n	8004f8c <UART_SetConfig+0xc5c>
 8004f86:	2380      	movs	r3, #128	; 0x80
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	e016      	b.n	8004fba <UART_SetConfig+0xc8a>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e014      	b.n	8004fba <UART_SetConfig+0xc8a>
 8004f90:	2380      	movs	r3, #128	; 0x80
 8004f92:	e012      	b.n	8004fba <UART_SetConfig+0xc8a>
 8004f94:	2340      	movs	r3, #64	; 0x40
 8004f96:	e010      	b.n	8004fba <UART_SetConfig+0xc8a>
 8004f98:	2320      	movs	r3, #32
 8004f9a:	e00e      	b.n	8004fba <UART_SetConfig+0xc8a>
 8004f9c:	2310      	movs	r3, #16
 8004f9e:	e00c      	b.n	8004fba <UART_SetConfig+0xc8a>
 8004fa0:	230c      	movs	r3, #12
 8004fa2:	e00a      	b.n	8004fba <UART_SetConfig+0xc8a>
 8004fa4:	230a      	movs	r3, #10
 8004fa6:	e008      	b.n	8004fba <UART_SetConfig+0xc8a>
 8004fa8:	2308      	movs	r3, #8
 8004faa:	e006      	b.n	8004fba <UART_SetConfig+0xc8a>
 8004fac:	2306      	movs	r3, #6
 8004fae:	e004      	b.n	8004fba <UART_SetConfig+0xc8a>
 8004fb0:	2304      	movs	r3, #4
 8004fb2:	e002      	b.n	8004fba <UART_SetConfig+0xc8a>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e000      	b.n	8004fba <UART_SetConfig+0xc8a>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	0019      	movs	r1, r3
 8004fbc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004fbe:	f7fb f8a1 	bl	8000104 <__udivsi3>
 8004fc2:	0003      	movs	r3, r0
 8004fc4:	005a      	lsls	r2, r3, #1
 8004fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	085b      	lsrs	r3, r3, #1
 8004fcc:	18d2      	adds	r2, r2, r3
 8004fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	0019      	movs	r1, r3
 8004fd4:	0010      	movs	r0, r2
 8004fd6:	f7fb f895 	bl	8000104 <__udivsi3>
 8004fda:	0003      	movs	r3, r0
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004fe0:	e068      	b.n	80050b4 <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d04c      	beq.n	8005084 <UART_SetConfig+0xd54>
 8004fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d045      	beq.n	800507e <UART_SetConfig+0xd4e>
 8004ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d03e      	beq.n	8005078 <UART_SetConfig+0xd48>
 8004ffa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	2b03      	cmp	r3, #3
 8005000:	d038      	beq.n	8005074 <UART_SetConfig+0xd44>
 8005002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	2b04      	cmp	r3, #4
 8005008:	d031      	beq.n	800506e <UART_SetConfig+0xd3e>
 800500a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	2b05      	cmp	r3, #5
 8005010:	d02b      	beq.n	800506a <UART_SetConfig+0xd3a>
 8005012:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	2b06      	cmp	r3, #6
 8005018:	d025      	beq.n	8005066 <UART_SetConfig+0xd36>
 800501a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	2b07      	cmp	r3, #7
 8005020:	d01e      	beq.n	8005060 <UART_SetConfig+0xd30>
 8005022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	2b08      	cmp	r3, #8
 8005028:	d017      	beq.n	800505a <UART_SetConfig+0xd2a>
 800502a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	2b09      	cmp	r3, #9
 8005030:	d010      	beq.n	8005054 <UART_SetConfig+0xd24>
 8005032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	2b0a      	cmp	r3, #10
 8005038:	d009      	beq.n	800504e <UART_SetConfig+0xd1e>
 800503a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	2b0b      	cmp	r3, #11
 8005040:	d102      	bne.n	8005048 <UART_SetConfig+0xd18>
 8005042:	2380      	movs	r3, #128	; 0x80
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	e01f      	b.n	8005088 <UART_SetConfig+0xd58>
 8005048:	2380      	movs	r3, #128	; 0x80
 800504a:	025b      	lsls	r3, r3, #9
 800504c:	e01c      	b.n	8005088 <UART_SetConfig+0xd58>
 800504e:	2380      	movs	r3, #128	; 0x80
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	e019      	b.n	8005088 <UART_SetConfig+0xd58>
 8005054:	2380      	movs	r3, #128	; 0x80
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	e016      	b.n	8005088 <UART_SetConfig+0xd58>
 800505a:	2380      	movs	r3, #128	; 0x80
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	e013      	b.n	8005088 <UART_SetConfig+0xd58>
 8005060:	2380      	movs	r3, #128	; 0x80
 8005062:	015b      	lsls	r3, r3, #5
 8005064:	e010      	b.n	8005088 <UART_SetConfig+0xd58>
 8005066:	4b61      	ldr	r3, [pc, #388]	; (80051ec <UART_SetConfig+0xebc>)
 8005068:	e00e      	b.n	8005088 <UART_SetConfig+0xd58>
 800506a:	4b61      	ldr	r3, [pc, #388]	; (80051f0 <UART_SetConfig+0xec0>)
 800506c:	e00c      	b.n	8005088 <UART_SetConfig+0xd58>
 800506e:	2380      	movs	r3, #128	; 0x80
 8005070:	019b      	lsls	r3, r3, #6
 8005072:	e009      	b.n	8005088 <UART_SetConfig+0xd58>
 8005074:	4b5f      	ldr	r3, [pc, #380]	; (80051f4 <UART_SetConfig+0xec4>)
 8005076:	e007      	b.n	8005088 <UART_SetConfig+0xd58>
 8005078:	2380      	movs	r3, #128	; 0x80
 800507a:	01db      	lsls	r3, r3, #7
 800507c:	e004      	b.n	8005088 <UART_SetConfig+0xd58>
 800507e:	2380      	movs	r3, #128	; 0x80
 8005080:	021b      	lsls	r3, r3, #8
 8005082:	e001      	b.n	8005088 <UART_SetConfig+0xd58>
 8005084:	2380      	movs	r3, #128	; 0x80
 8005086:	025b      	lsls	r3, r3, #9
 8005088:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800508a:	6852      	ldr	r2, [r2, #4]
 800508c:	0852      	lsrs	r2, r2, #1
 800508e:	189a      	adds	r2, r3, r2
 8005090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	0019      	movs	r1, r3
 8005096:	0010      	movs	r0, r2
 8005098:	f7fb f834 	bl	8000104 <__udivsi3>
 800509c:	0003      	movs	r3, r0
 800509e:	b29b      	uxth	r3, r3
 80050a0:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 80050a2:	e007      	b.n	80050b4 <UART_SetConfig+0xd84>
      default:
        ret = HAL_ERROR;
 80050a4:	231b      	movs	r3, #27
 80050a6:	2258      	movs	r2, #88	; 0x58
 80050a8:	4694      	mov	ip, r2
 80050aa:	44bc      	add	ip, r7
 80050ac:	4463      	add	r3, ip
 80050ae:	2201      	movs	r2, #1
 80050b0:	701a      	strb	r2, [r3, #0]
        break;
 80050b2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050b6:	2b0f      	cmp	r3, #15
 80050b8:	d920      	bls.n	80050fc <UART_SetConfig+0xdcc>
 80050ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050bc:	4a4e      	ldr	r2, [pc, #312]	; (80051f8 <UART_SetConfig+0xec8>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d81c      	bhi.n	80050fc <UART_SetConfig+0xdcc>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	200e      	movs	r0, #14
 80050c8:	2458      	movs	r4, #88	; 0x58
 80050ca:	193b      	adds	r3, r7, r4
 80050cc:	181b      	adds	r3, r3, r0
 80050ce:	210f      	movs	r1, #15
 80050d0:	438a      	bics	r2, r1
 80050d2:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050d6:	085b      	lsrs	r3, r3, #1
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2207      	movs	r2, #7
 80050dc:	4013      	ands	r3, r2
 80050de:	b299      	uxth	r1, r3
 80050e0:	193b      	adds	r3, r7, r4
 80050e2:	181b      	adds	r3, r3, r0
 80050e4:	193a      	adds	r2, r7, r4
 80050e6:	1812      	adds	r2, r2, r0
 80050e8:	8812      	ldrh	r2, [r2, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80050ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	193a      	adds	r2, r7, r4
 80050f4:	1812      	adds	r2, r2, r0
 80050f6:	8812      	ldrh	r2, [r2, #0]
 80050f8:	60da      	str	r2, [r3, #12]
 80050fa:	e1d4      	b.n	80054a6 <UART_SetConfig+0x1176>
    }
    else
    {
      ret = HAL_ERROR;
 80050fc:	231b      	movs	r3, #27
 80050fe:	2258      	movs	r2, #88	; 0x58
 8005100:	4694      	mov	ip, r2
 8005102:	44bc      	add	ip, r7
 8005104:	4463      	add	r3, ip
 8005106:	2201      	movs	r2, #1
 8005108:	701a      	strb	r2, [r3, #0]
 800510a:	e1cc      	b.n	80054a6 <UART_SetConfig+0x1176>
    }
  }
  else
  {
    switch (clocksource)
 800510c:	2323      	movs	r3, #35	; 0x23
 800510e:	2258      	movs	r2, #88	; 0x58
 8005110:	4694      	mov	ip, r2
 8005112:	44bc      	add	ip, r7
 8005114:	4463      	add	r3, ip
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	2b02      	cmp	r3, #2
 800511a:	d100      	bne.n	800511e <UART_SetConfig+0xdee>
 800511c:	e08f      	b.n	800523e <UART_SetConfig+0xf0e>
 800511e:	dc02      	bgt.n	8005126 <UART_SetConfig+0xdf6>
 8005120:	2b00      	cmp	r3, #0
 8005122:	d007      	beq.n	8005134 <UART_SetConfig+0xe04>
 8005124:	e1a4      	b.n	8005470 <UART_SetConfig+0x1140>
 8005126:	2b04      	cmp	r3, #4
 8005128:	d100      	bne.n	800512c <UART_SetConfig+0xdfc>
 800512a:	e0df      	b.n	80052ec <UART_SetConfig+0xfbc>
 800512c:	2b08      	cmp	r3, #8
 800512e:	d100      	bne.n	8005132 <UART_SetConfig+0xe02>
 8005130:	e13e      	b.n	80053b0 <UART_SetConfig+0x1080>
 8005132:	e19d      	b.n	8005470 <UART_SetConfig+0x1140>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005134:	f7fe fbaa 	bl	800388c <HAL_RCC_GetPCLK1Freq>
 8005138:	0003      	movs	r3, r0
 800513a:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800513c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	2b00      	cmp	r3, #0
 8005142:	d100      	bne.n	8005146 <UART_SetConfig+0xe16>
 8005144:	e066      	b.n	8005214 <UART_SetConfig+0xee4>
 8005146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	2b01      	cmp	r3, #1
 800514c:	d100      	bne.n	8005150 <UART_SetConfig+0xe20>
 800514e:	e05f      	b.n	8005210 <UART_SetConfig+0xee0>
 8005150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	2b02      	cmp	r3, #2
 8005156:	d059      	beq.n	800520c <UART_SetConfig+0xedc>
 8005158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	2b03      	cmp	r3, #3
 800515e:	d053      	beq.n	8005208 <UART_SetConfig+0xed8>
 8005160:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	2b04      	cmp	r3, #4
 8005166:	d04d      	beq.n	8005204 <UART_SetConfig+0xed4>
 8005168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	2b05      	cmp	r3, #5
 800516e:	d047      	beq.n	8005200 <UART_SetConfig+0xed0>
 8005170:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	2b06      	cmp	r3, #6
 8005176:	d041      	beq.n	80051fc <UART_SetConfig+0xecc>
 8005178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	2b07      	cmp	r3, #7
 800517e:	d01a      	beq.n	80051b6 <UART_SetConfig+0xe86>
 8005180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	2b08      	cmp	r3, #8
 8005186:	d014      	beq.n	80051b2 <UART_SetConfig+0xe82>
 8005188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	2b09      	cmp	r3, #9
 800518e:	d00e      	beq.n	80051ae <UART_SetConfig+0xe7e>
 8005190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	2b0a      	cmp	r3, #10
 8005196:	d008      	beq.n	80051aa <UART_SetConfig+0xe7a>
 8005198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	2b0b      	cmp	r3, #11
 800519e:	d102      	bne.n	80051a6 <UART_SetConfig+0xe76>
 80051a0:	2380      	movs	r3, #128	; 0x80
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	e037      	b.n	8005216 <UART_SetConfig+0xee6>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e035      	b.n	8005216 <UART_SetConfig+0xee6>
 80051aa:	2380      	movs	r3, #128	; 0x80
 80051ac:	e033      	b.n	8005216 <UART_SetConfig+0xee6>
 80051ae:	2340      	movs	r3, #64	; 0x40
 80051b0:	e031      	b.n	8005216 <UART_SetConfig+0xee6>
 80051b2:	2320      	movs	r3, #32
 80051b4:	e02f      	b.n	8005216 <UART_SetConfig+0xee6>
 80051b6:	2310      	movs	r3, #16
 80051b8:	e02d      	b.n	8005216 <UART_SetConfig+0xee6>
 80051ba:	46c0      	nop			; (mov r8, r8)
 80051bc:	0001e848 	.word	0x0001e848
 80051c0:	01e84800 	.word	0x01e84800
 80051c4:	0003d090 	.word	0x0003d090
 80051c8:	0007a120 	.word	0x0007a120
 80051cc:	000f4240 	.word	0x000f4240
 80051d0:	001e8480 	.word	0x001e8480
 80051d4:	0028b0aa 	.word	0x0028b0aa
 80051d8:	0030d400 	.word	0x0030d400
 80051dc:	003d0900 	.word	0x003d0900
 80051e0:	00516154 	.word	0x00516154
 80051e4:	007a1200 	.word	0x007a1200
 80051e8:	00f42400 	.word	0x00f42400
 80051ec:	00001554 	.word	0x00001554
 80051f0:	00001998 	.word	0x00001998
 80051f4:	00002aaa 	.word	0x00002aaa
 80051f8:	0000ffff 	.word	0x0000ffff
 80051fc:	230c      	movs	r3, #12
 80051fe:	e00a      	b.n	8005216 <UART_SetConfig+0xee6>
 8005200:	230a      	movs	r3, #10
 8005202:	e008      	b.n	8005216 <UART_SetConfig+0xee6>
 8005204:	2308      	movs	r3, #8
 8005206:	e006      	b.n	8005216 <UART_SetConfig+0xee6>
 8005208:	2306      	movs	r3, #6
 800520a:	e004      	b.n	8005216 <UART_SetConfig+0xee6>
 800520c:	2304      	movs	r3, #4
 800520e:	e002      	b.n	8005216 <UART_SetConfig+0xee6>
 8005210:	2302      	movs	r3, #2
 8005212:	e000      	b.n	8005216 <UART_SetConfig+0xee6>
 8005214:	2301      	movs	r3, #1
 8005216:	0019      	movs	r1, r3
 8005218:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800521a:	f7fa ff73 	bl	8000104 <__udivsi3>
 800521e:	0003      	movs	r3, r0
 8005220:	001a      	movs	r2, r3
 8005222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	085b      	lsrs	r3, r3, #1
 8005228:	18d2      	adds	r2, r2, r3
 800522a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	0019      	movs	r1, r3
 8005230:	0010      	movs	r0, r2
 8005232:	f7fa ff67 	bl	8000104 <__udivsi3>
 8005236:	0003      	movs	r3, r0
 8005238:	b29b      	uxth	r3, r3
 800523a:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800523c:	e120      	b.n	8005480 <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800523e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	2b00      	cmp	r3, #0
 8005244:	d043      	beq.n	80052ce <UART_SetConfig+0xf9e>
 8005246:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	2b01      	cmp	r3, #1
 800524c:	d03d      	beq.n	80052ca <UART_SetConfig+0xf9a>
 800524e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	2b02      	cmp	r3, #2
 8005254:	d037      	beq.n	80052c6 <UART_SetConfig+0xf96>
 8005256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	2b03      	cmp	r3, #3
 800525c:	d031      	beq.n	80052c2 <UART_SetConfig+0xf92>
 800525e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	2b04      	cmp	r3, #4
 8005264:	d02b      	beq.n	80052be <UART_SetConfig+0xf8e>
 8005266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	2b05      	cmp	r3, #5
 800526c:	d025      	beq.n	80052ba <UART_SetConfig+0xf8a>
 800526e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	2b06      	cmp	r3, #6
 8005274:	d01f      	beq.n	80052b6 <UART_SetConfig+0xf86>
 8005276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	2b07      	cmp	r3, #7
 800527c:	d019      	beq.n	80052b2 <UART_SetConfig+0xf82>
 800527e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	2b08      	cmp	r3, #8
 8005284:	d013      	beq.n	80052ae <UART_SetConfig+0xf7e>
 8005286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	2b09      	cmp	r3, #9
 800528c:	d00d      	beq.n	80052aa <UART_SetConfig+0xf7a>
 800528e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	2b0a      	cmp	r3, #10
 8005294:	d007      	beq.n	80052a6 <UART_SetConfig+0xf76>
 8005296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	2b0b      	cmp	r3, #11
 800529c:	d101      	bne.n	80052a2 <UART_SetConfig+0xf72>
 800529e:	4b8e      	ldr	r3, [pc, #568]	; (80054d8 <UART_SetConfig+0x11a8>)
 80052a0:	e016      	b.n	80052d0 <UART_SetConfig+0xfa0>
 80052a2:	4b8e      	ldr	r3, [pc, #568]	; (80054dc <UART_SetConfig+0x11ac>)
 80052a4:	e014      	b.n	80052d0 <UART_SetConfig+0xfa0>
 80052a6:	4b8e      	ldr	r3, [pc, #568]	; (80054e0 <UART_SetConfig+0x11b0>)
 80052a8:	e012      	b.n	80052d0 <UART_SetConfig+0xfa0>
 80052aa:	4b8e      	ldr	r3, [pc, #568]	; (80054e4 <UART_SetConfig+0x11b4>)
 80052ac:	e010      	b.n	80052d0 <UART_SetConfig+0xfa0>
 80052ae:	4b8e      	ldr	r3, [pc, #568]	; (80054e8 <UART_SetConfig+0x11b8>)
 80052b0:	e00e      	b.n	80052d0 <UART_SetConfig+0xfa0>
 80052b2:	4b8e      	ldr	r3, [pc, #568]	; (80054ec <UART_SetConfig+0x11bc>)
 80052b4:	e00c      	b.n	80052d0 <UART_SetConfig+0xfa0>
 80052b6:	4b8e      	ldr	r3, [pc, #568]	; (80054f0 <UART_SetConfig+0x11c0>)
 80052b8:	e00a      	b.n	80052d0 <UART_SetConfig+0xfa0>
 80052ba:	4b8e      	ldr	r3, [pc, #568]	; (80054f4 <UART_SetConfig+0x11c4>)
 80052bc:	e008      	b.n	80052d0 <UART_SetConfig+0xfa0>
 80052be:	4b8e      	ldr	r3, [pc, #568]	; (80054f8 <UART_SetConfig+0x11c8>)
 80052c0:	e006      	b.n	80052d0 <UART_SetConfig+0xfa0>
 80052c2:	4b8e      	ldr	r3, [pc, #568]	; (80054fc <UART_SetConfig+0x11cc>)
 80052c4:	e004      	b.n	80052d0 <UART_SetConfig+0xfa0>
 80052c6:	4b8e      	ldr	r3, [pc, #568]	; (8005500 <UART_SetConfig+0x11d0>)
 80052c8:	e002      	b.n	80052d0 <UART_SetConfig+0xfa0>
 80052ca:	4b8e      	ldr	r3, [pc, #568]	; (8005504 <UART_SetConfig+0x11d4>)
 80052cc:	e000      	b.n	80052d0 <UART_SetConfig+0xfa0>
 80052ce:	4b83      	ldr	r3, [pc, #524]	; (80054dc <UART_SetConfig+0x11ac>)
 80052d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052d2:	6852      	ldr	r2, [r2, #4]
 80052d4:	0852      	lsrs	r2, r2, #1
 80052d6:	189a      	adds	r2, r3, r2
 80052d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	0019      	movs	r1, r3
 80052de:	0010      	movs	r0, r2
 80052e0:	f7fa ff10 	bl	8000104 <__udivsi3>
 80052e4:	0003      	movs	r3, r0
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 80052ea:	e0c9      	b.n	8005480 <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ec:	f7fe fa42 	bl	8003774 <HAL_RCC_GetSysClockFreq>
 80052f0:	0003      	movs	r3, r0
 80052f2:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d044      	beq.n	8005386 <UART_SetConfig+0x1056>
 80052fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	2b01      	cmp	r3, #1
 8005302:	d03e      	beq.n	8005382 <UART_SetConfig+0x1052>
 8005304:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	2b02      	cmp	r3, #2
 800530a:	d038      	beq.n	800537e <UART_SetConfig+0x104e>
 800530c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	2b03      	cmp	r3, #3
 8005312:	d032      	beq.n	800537a <UART_SetConfig+0x104a>
 8005314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	2b04      	cmp	r3, #4
 800531a:	d02c      	beq.n	8005376 <UART_SetConfig+0x1046>
 800531c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	2b05      	cmp	r3, #5
 8005322:	d026      	beq.n	8005372 <UART_SetConfig+0x1042>
 8005324:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	2b06      	cmp	r3, #6
 800532a:	d020      	beq.n	800536e <UART_SetConfig+0x103e>
 800532c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	2b07      	cmp	r3, #7
 8005332:	d01a      	beq.n	800536a <UART_SetConfig+0x103a>
 8005334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	2b08      	cmp	r3, #8
 800533a:	d014      	beq.n	8005366 <UART_SetConfig+0x1036>
 800533c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	2b09      	cmp	r3, #9
 8005342:	d00e      	beq.n	8005362 <UART_SetConfig+0x1032>
 8005344:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	2b0a      	cmp	r3, #10
 800534a:	d008      	beq.n	800535e <UART_SetConfig+0x102e>
 800534c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	2b0b      	cmp	r3, #11
 8005352:	d102      	bne.n	800535a <UART_SetConfig+0x102a>
 8005354:	2380      	movs	r3, #128	; 0x80
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	e016      	b.n	8005388 <UART_SetConfig+0x1058>
 800535a:	2301      	movs	r3, #1
 800535c:	e014      	b.n	8005388 <UART_SetConfig+0x1058>
 800535e:	2380      	movs	r3, #128	; 0x80
 8005360:	e012      	b.n	8005388 <UART_SetConfig+0x1058>
 8005362:	2340      	movs	r3, #64	; 0x40
 8005364:	e010      	b.n	8005388 <UART_SetConfig+0x1058>
 8005366:	2320      	movs	r3, #32
 8005368:	e00e      	b.n	8005388 <UART_SetConfig+0x1058>
 800536a:	2310      	movs	r3, #16
 800536c:	e00c      	b.n	8005388 <UART_SetConfig+0x1058>
 800536e:	230c      	movs	r3, #12
 8005370:	e00a      	b.n	8005388 <UART_SetConfig+0x1058>
 8005372:	230a      	movs	r3, #10
 8005374:	e008      	b.n	8005388 <UART_SetConfig+0x1058>
 8005376:	2308      	movs	r3, #8
 8005378:	e006      	b.n	8005388 <UART_SetConfig+0x1058>
 800537a:	2306      	movs	r3, #6
 800537c:	e004      	b.n	8005388 <UART_SetConfig+0x1058>
 800537e:	2304      	movs	r3, #4
 8005380:	e002      	b.n	8005388 <UART_SetConfig+0x1058>
 8005382:	2302      	movs	r3, #2
 8005384:	e000      	b.n	8005388 <UART_SetConfig+0x1058>
 8005386:	2301      	movs	r3, #1
 8005388:	0019      	movs	r1, r3
 800538a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800538c:	f7fa feba 	bl	8000104 <__udivsi3>
 8005390:	0003      	movs	r3, r0
 8005392:	001a      	movs	r2, r3
 8005394:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	085b      	lsrs	r3, r3, #1
 800539a:	18d2      	adds	r2, r2, r3
 800539c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	0019      	movs	r1, r3
 80053a2:	0010      	movs	r0, r2
 80053a4:	f7fa feae 	bl	8000104 <__udivsi3>
 80053a8:	0003      	movs	r3, r0
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 80053ae:	e067      	b.n	8005480 <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d04b      	beq.n	8005450 <UART_SetConfig+0x1120>
 80053b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d044      	beq.n	800544a <UART_SetConfig+0x111a>
 80053c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d03d      	beq.n	8005444 <UART_SetConfig+0x1114>
 80053c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	2b03      	cmp	r3, #3
 80053ce:	d037      	beq.n	8005440 <UART_SetConfig+0x1110>
 80053d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	2b04      	cmp	r3, #4
 80053d6:	d030      	beq.n	800543a <UART_SetConfig+0x110a>
 80053d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	2b05      	cmp	r3, #5
 80053de:	d02a      	beq.n	8005436 <UART_SetConfig+0x1106>
 80053e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	2b06      	cmp	r3, #6
 80053e6:	d024      	beq.n	8005432 <UART_SetConfig+0x1102>
 80053e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	2b07      	cmp	r3, #7
 80053ee:	d01d      	beq.n	800542c <UART_SetConfig+0x10fc>
 80053f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	d016      	beq.n	8005426 <UART_SetConfig+0x10f6>
 80053f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fc:	2b09      	cmp	r3, #9
 80053fe:	d00f      	beq.n	8005420 <UART_SetConfig+0x10f0>
 8005400:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	2b0a      	cmp	r3, #10
 8005406:	d008      	beq.n	800541a <UART_SetConfig+0x10ea>
 8005408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	2b0b      	cmp	r3, #11
 800540e:	d101      	bne.n	8005414 <UART_SetConfig+0x10e4>
 8005410:	2380      	movs	r3, #128	; 0x80
 8005412:	e01f      	b.n	8005454 <UART_SetConfig+0x1124>
 8005414:	2380      	movs	r3, #128	; 0x80
 8005416:	021b      	lsls	r3, r3, #8
 8005418:	e01c      	b.n	8005454 <UART_SetConfig+0x1124>
 800541a:	2380      	movs	r3, #128	; 0x80
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	e019      	b.n	8005454 <UART_SetConfig+0x1124>
 8005420:	2380      	movs	r3, #128	; 0x80
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	e016      	b.n	8005454 <UART_SetConfig+0x1124>
 8005426:	2380      	movs	r3, #128	; 0x80
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	e013      	b.n	8005454 <UART_SetConfig+0x1124>
 800542c:	2380      	movs	r3, #128	; 0x80
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	e010      	b.n	8005454 <UART_SetConfig+0x1124>
 8005432:	4b35      	ldr	r3, [pc, #212]	; (8005508 <UART_SetConfig+0x11d8>)
 8005434:	e00e      	b.n	8005454 <UART_SetConfig+0x1124>
 8005436:	4b35      	ldr	r3, [pc, #212]	; (800550c <UART_SetConfig+0x11dc>)
 8005438:	e00c      	b.n	8005454 <UART_SetConfig+0x1124>
 800543a:	2380      	movs	r3, #128	; 0x80
 800543c:	015b      	lsls	r3, r3, #5
 800543e:	e009      	b.n	8005454 <UART_SetConfig+0x1124>
 8005440:	4b33      	ldr	r3, [pc, #204]	; (8005510 <UART_SetConfig+0x11e0>)
 8005442:	e007      	b.n	8005454 <UART_SetConfig+0x1124>
 8005444:	2380      	movs	r3, #128	; 0x80
 8005446:	019b      	lsls	r3, r3, #6
 8005448:	e004      	b.n	8005454 <UART_SetConfig+0x1124>
 800544a:	2380      	movs	r3, #128	; 0x80
 800544c:	01db      	lsls	r3, r3, #7
 800544e:	e001      	b.n	8005454 <UART_SetConfig+0x1124>
 8005450:	2380      	movs	r3, #128	; 0x80
 8005452:	021b      	lsls	r3, r3, #8
 8005454:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005456:	6852      	ldr	r2, [r2, #4]
 8005458:	0852      	lsrs	r2, r2, #1
 800545a:	189a      	adds	r2, r3, r2
 800545c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	0019      	movs	r1, r3
 8005462:	0010      	movs	r0, r2
 8005464:	f7fa fe4e 	bl	8000104 <__udivsi3>
 8005468:	0003      	movs	r3, r0
 800546a:	b29b      	uxth	r3, r3
 800546c:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800546e:	e007      	b.n	8005480 <UART_SetConfig+0x1150>
      default:
        ret = HAL_ERROR;
 8005470:	231b      	movs	r3, #27
 8005472:	2258      	movs	r2, #88	; 0x58
 8005474:	4694      	mov	ip, r2
 8005476:	44bc      	add	ip, r7
 8005478:	4463      	add	r3, ip
 800547a:	2201      	movs	r2, #1
 800547c:	701a      	strb	r2, [r3, #0]
        break;
 800547e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005480:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005482:	2b0f      	cmp	r3, #15
 8005484:	d908      	bls.n	8005498 <UART_SetConfig+0x1168>
 8005486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005488:	4a22      	ldr	r2, [pc, #136]	; (8005514 <UART_SetConfig+0x11e4>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d804      	bhi.n	8005498 <UART_SetConfig+0x1168>
    {
      huart->Instance->BRR = usartdiv;
 800548e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005494:	60da      	str	r2, [r3, #12]
 8005496:	e006      	b.n	80054a6 <UART_SetConfig+0x1176>
    }
    else
    {
      ret = HAL_ERROR;
 8005498:	231b      	movs	r3, #27
 800549a:	2258      	movs	r2, #88	; 0x58
 800549c:	4694      	mov	ip, r2
 800549e:	44bc      	add	ip, r7
 80054a0:	4463      	add	r3, ip
 80054a2:	2201      	movs	r2, #1
 80054a4:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80054a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054a8:	226a      	movs	r2, #106	; 0x6a
 80054aa:	2101      	movs	r1, #1
 80054ac:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80054ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054b0:	2268      	movs	r2, #104	; 0x68
 80054b2:	2101      	movs	r1, #1
 80054b4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054b8:	2200      	movs	r2, #0
 80054ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80054bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054be:	2200      	movs	r2, #0
 80054c0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80054c2:	231b      	movs	r3, #27
 80054c4:	2258      	movs	r2, #88	; 0x58
 80054c6:	4694      	mov	ip, r2
 80054c8:	44bc      	add	ip, r7
 80054ca:	4463      	add	r3, ip
 80054cc:	781b      	ldrb	r3, [r3, #0]
}
 80054ce:	0018      	movs	r0, r3
 80054d0:	46bd      	mov	sp, r7
 80054d2:	b021      	add	sp, #132	; 0x84
 80054d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054d6:	46c0      	nop			; (mov r8, r8)
 80054d8:	0000f424 	.word	0x0000f424
 80054dc:	00f42400 	.word	0x00f42400
 80054e0:	0001e848 	.word	0x0001e848
 80054e4:	0003d090 	.word	0x0003d090
 80054e8:	0007a120 	.word	0x0007a120
 80054ec:	000f4240 	.word	0x000f4240
 80054f0:	00145855 	.word	0x00145855
 80054f4:	00186a00 	.word	0x00186a00
 80054f8:	001e8480 	.word	0x001e8480
 80054fc:	0028b0aa 	.word	0x0028b0aa
 8005500:	003d0900 	.word	0x003d0900
 8005504:	007a1200 	.word	0x007a1200
 8005508:	00000aaa 	.word	0x00000aaa
 800550c:	00000ccc 	.word	0x00000ccc
 8005510:	00001555 	.word	0x00001555
 8005514:	0000ffff 	.word	0x0000ffff

08005518 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005524:	2201      	movs	r2, #1
 8005526:	4013      	ands	r3, r2
 8005528:	d00b      	beq.n	8005542 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	4a4a      	ldr	r2, [pc, #296]	; (800565c <UART_AdvFeatureConfig+0x144>)
 8005532:	4013      	ands	r3, r2
 8005534:	0019      	movs	r1, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005546:	2202      	movs	r2, #2
 8005548:	4013      	ands	r3, r2
 800554a:	d00b      	beq.n	8005564 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	4a43      	ldr	r2, [pc, #268]	; (8005660 <UART_AdvFeatureConfig+0x148>)
 8005554:	4013      	ands	r3, r2
 8005556:	0019      	movs	r1, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005568:	2204      	movs	r2, #4
 800556a:	4013      	ands	r3, r2
 800556c:	d00b      	beq.n	8005586 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	4a3b      	ldr	r2, [pc, #236]	; (8005664 <UART_AdvFeatureConfig+0x14c>)
 8005576:	4013      	ands	r3, r2
 8005578:	0019      	movs	r1, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558a:	2208      	movs	r2, #8
 800558c:	4013      	ands	r3, r2
 800558e:	d00b      	beq.n	80055a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	4a34      	ldr	r2, [pc, #208]	; (8005668 <UART_AdvFeatureConfig+0x150>)
 8005598:	4013      	ands	r3, r2
 800559a:	0019      	movs	r1, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ac:	2210      	movs	r2, #16
 80055ae:	4013      	ands	r3, r2
 80055b0:	d00b      	beq.n	80055ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	4a2c      	ldr	r2, [pc, #176]	; (800566c <UART_AdvFeatureConfig+0x154>)
 80055ba:	4013      	ands	r3, r2
 80055bc:	0019      	movs	r1, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ce:	2220      	movs	r2, #32
 80055d0:	4013      	ands	r3, r2
 80055d2:	d00b      	beq.n	80055ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	4a25      	ldr	r2, [pc, #148]	; (8005670 <UART_AdvFeatureConfig+0x158>)
 80055dc:	4013      	ands	r3, r2
 80055de:	0019      	movs	r1, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f0:	2240      	movs	r2, #64	; 0x40
 80055f2:	4013      	ands	r3, r2
 80055f4:	d01d      	beq.n	8005632 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	4a1d      	ldr	r2, [pc, #116]	; (8005674 <UART_AdvFeatureConfig+0x15c>)
 80055fe:	4013      	ands	r3, r2
 8005600:	0019      	movs	r1, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005612:	2380      	movs	r3, #128	; 0x80
 8005614:	035b      	lsls	r3, r3, #13
 8005616:	429a      	cmp	r2, r3
 8005618:	d10b      	bne.n	8005632 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	4a15      	ldr	r2, [pc, #84]	; (8005678 <UART_AdvFeatureConfig+0x160>)
 8005622:	4013      	ands	r3, r2
 8005624:	0019      	movs	r1, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005636:	2280      	movs	r2, #128	; 0x80
 8005638:	4013      	ands	r3, r2
 800563a:	d00b      	beq.n	8005654 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	4a0e      	ldr	r2, [pc, #56]	; (800567c <UART_AdvFeatureConfig+0x164>)
 8005644:	4013      	ands	r3, r2
 8005646:	0019      	movs	r1, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	605a      	str	r2, [r3, #4]
  }
}
 8005654:	46c0      	nop			; (mov r8, r8)
 8005656:	46bd      	mov	sp, r7
 8005658:	b002      	add	sp, #8
 800565a:	bd80      	pop	{r7, pc}
 800565c:	fffdffff 	.word	0xfffdffff
 8005660:	fffeffff 	.word	0xfffeffff
 8005664:	fffbffff 	.word	0xfffbffff
 8005668:	ffff7fff 	.word	0xffff7fff
 800566c:	ffffefff 	.word	0xffffefff
 8005670:	ffffdfff 	.word	0xffffdfff
 8005674:	ffefffff 	.word	0xffefffff
 8005678:	ff9fffff 	.word	0xff9fffff
 800567c:	fff7ffff 	.word	0xfff7ffff

08005680 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af02      	add	r7, sp, #8
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2288      	movs	r2, #136	; 0x88
 800568c:	2100      	movs	r1, #0
 800568e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005690:	f7fd f99a 	bl	80029c8 <HAL_GetTick>
 8005694:	0003      	movs	r3, r0
 8005696:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2208      	movs	r2, #8
 80056a0:	4013      	ands	r3, r2
 80056a2:	2b08      	cmp	r3, #8
 80056a4:	d10d      	bne.n	80056c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	2380      	movs	r3, #128	; 0x80
 80056aa:	0399      	lsls	r1, r3, #14
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	4b18      	ldr	r3, [pc, #96]	; (8005710 <UART_CheckIdleState+0x90>)
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	0013      	movs	r3, r2
 80056b4:	2200      	movs	r2, #0
 80056b6:	f000 f82d 	bl	8005714 <UART_WaitOnFlagUntilTimeout>
 80056ba:	1e03      	subs	r3, r0, #0
 80056bc:	d001      	beq.n	80056c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e021      	b.n	8005706 <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2204      	movs	r2, #4
 80056ca:	4013      	ands	r3, r2
 80056cc:	2b04      	cmp	r3, #4
 80056ce:	d10d      	bne.n	80056ec <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	2380      	movs	r3, #128	; 0x80
 80056d4:	03d9      	lsls	r1, r3, #15
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	4b0d      	ldr	r3, [pc, #52]	; (8005710 <UART_CheckIdleState+0x90>)
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	0013      	movs	r3, r2
 80056de:	2200      	movs	r2, #0
 80056e0:	f000 f818 	bl	8005714 <UART_WaitOnFlagUntilTimeout>
 80056e4:	1e03      	subs	r3, r0, #0
 80056e6:	d001      	beq.n	80056ec <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e00c      	b.n	8005706 <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2280      	movs	r2, #128	; 0x80
 80056f0:	2120      	movs	r1, #32
 80056f2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2284      	movs	r2, #132	; 0x84
 80056f8:	2120      	movs	r1, #32
 80056fa:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	227c      	movs	r2, #124	; 0x7c
 8005700:	2100      	movs	r1, #0
 8005702:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	0018      	movs	r0, r3
 8005708:	46bd      	mov	sp, r7
 800570a:	b004      	add	sp, #16
 800570c:	bd80      	pop	{r7, pc}
 800570e:	46c0      	nop			; (mov r8, r8)
 8005710:	01ffffff 	.word	0x01ffffff

08005714 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	603b      	str	r3, [r7, #0]
 8005720:	1dfb      	adds	r3, r7, #7
 8005722:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005724:	e02b      	b.n	800577e <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	3301      	adds	r3, #1
 800572a:	d028      	beq.n	800577e <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800572c:	f7fd f94c 	bl	80029c8 <HAL_GetTick>
 8005730:	0002      	movs	r2, r0
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	429a      	cmp	r2, r3
 800573a:	d302      	bcc.n	8005742 <UART_WaitOnFlagUntilTimeout+0x2e>
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d11d      	bne.n	800577e <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4916      	ldr	r1, [pc, #88]	; (80057a8 <UART_WaitOnFlagUntilTimeout+0x94>)
 800574e:	400a      	ands	r2, r1
 8005750:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2101      	movs	r1, #1
 800575e:	438a      	bics	r2, r1
 8005760:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2280      	movs	r2, #128	; 0x80
 8005766:	2120      	movs	r1, #32
 8005768:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2284      	movs	r2, #132	; 0x84
 800576e:	2120      	movs	r1, #32
 8005770:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	227c      	movs	r2, #124	; 0x7c
 8005776:	2100      	movs	r1, #0
 8005778:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e00f      	b.n	800579e <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69db      	ldr	r3, [r3, #28]
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	4013      	ands	r3, r2
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	425a      	negs	r2, r3
 800578e:	4153      	adcs	r3, r2
 8005790:	b2db      	uxtb	r3, r3
 8005792:	001a      	movs	r2, r3
 8005794:	1dfb      	adds	r3, r7, #7
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	429a      	cmp	r2, r3
 800579a:	d0c4      	beq.n	8005726 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	0018      	movs	r0, r3
 80057a0:	46bd      	mov	sp, r7
 80057a2:	b004      	add	sp, #16
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	46c0      	nop			; (mov r8, r8)
 80057a8:	fffffe5f 	.word	0xfffffe5f

080057ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	227c      	movs	r2, #124	; 0x7c
 80057b8:	5c9b      	ldrb	r3, [r3, r2]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d101      	bne.n	80057c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80057be:	2302      	movs	r3, #2
 80057c0:	e027      	b.n	8005812 <HAL_UARTEx_DisableFifoMode+0x66>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	227c      	movs	r2, #124	; 0x7c
 80057c6:	2101      	movs	r1, #1
 80057c8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2280      	movs	r2, #128	; 0x80
 80057ce:	2124      	movs	r1, #36	; 0x24
 80057d0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2101      	movs	r1, #1
 80057e6:	438a      	bics	r2, r1
 80057e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	4a0b      	ldr	r2, [pc, #44]	; (800581c <HAL_UARTEx_DisableFifoMode+0x70>)
 80057ee:	4013      	ands	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2280      	movs	r2, #128	; 0x80
 8005804:	2120      	movs	r1, #32
 8005806:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	227c      	movs	r2, #124	; 0x7c
 800580c:	2100      	movs	r1, #0
 800580e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	0018      	movs	r0, r3
 8005814:	46bd      	mov	sp, r7
 8005816:	b004      	add	sp, #16
 8005818:	bd80      	pop	{r7, pc}
 800581a:	46c0      	nop			; (mov r8, r8)
 800581c:	dfffffff 	.word	0xdfffffff

08005820 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	227c      	movs	r2, #124	; 0x7c
 800582e:	5c9b      	ldrb	r3, [r3, r2]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d101      	bne.n	8005838 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005834:	2302      	movs	r3, #2
 8005836:	e02e      	b.n	8005896 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	227c      	movs	r2, #124	; 0x7c
 800583c:	2101      	movs	r1, #1
 800583e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2280      	movs	r2, #128	; 0x80
 8005844:	2124      	movs	r1, #36	; 0x24
 8005846:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2101      	movs	r1, #1
 800585c:	438a      	bics	r2, r1
 800585e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	08d9      	lsrs	r1, r3, #3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	0018      	movs	r0, r3
 8005878:	f000 f854 	bl	8005924 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2280      	movs	r2, #128	; 0x80
 8005888:	2120      	movs	r1, #32
 800588a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	227c      	movs	r2, #124	; 0x7c
 8005890:	2100      	movs	r1, #0
 8005892:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	0018      	movs	r0, r3
 8005898:	46bd      	mov	sp, r7
 800589a:	b004      	add	sp, #16
 800589c:	bd80      	pop	{r7, pc}
	...

080058a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	227c      	movs	r2, #124	; 0x7c
 80058ae:	5c9b      	ldrb	r3, [r3, r2]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d101      	bne.n	80058b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80058b4:	2302      	movs	r3, #2
 80058b6:	e02f      	b.n	8005918 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	227c      	movs	r2, #124	; 0x7c
 80058bc:	2101      	movs	r1, #1
 80058be:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2280      	movs	r2, #128	; 0x80
 80058c4:	2124      	movs	r1, #36	; 0x24
 80058c6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2101      	movs	r1, #1
 80058dc:	438a      	bics	r2, r1
 80058de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	4a0e      	ldr	r2, [pc, #56]	; (8005920 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80058e8:	4013      	ands	r3, r2
 80058ea:	0019      	movs	r1, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	0018      	movs	r0, r3
 80058fa:	f000 f813 	bl	8005924 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2280      	movs	r2, #128	; 0x80
 800590a:	2120      	movs	r1, #32
 800590c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	227c      	movs	r2, #124	; 0x7c
 8005912:	2100      	movs	r1, #0
 8005914:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	0018      	movs	r0, r3
 800591a:	46bd      	mov	sp, r7
 800591c:	b004      	add	sp, #16
 800591e:	bd80      	pop	{r7, pc}
 8005920:	f1ffffff 	.word	0xf1ffffff

08005924 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005926:	b089      	sub	sp, #36	; 0x24
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800592c:	2314      	movs	r3, #20
 800592e:	18fb      	adds	r3, r7, r3
 8005930:	4a2f      	ldr	r2, [pc, #188]	; (80059f0 <UARTEx_SetNbDataToProcess+0xcc>)
 8005932:	ca03      	ldmia	r2!, {r0, r1}
 8005934:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005936:	230c      	movs	r3, #12
 8005938:	18fb      	adds	r3, r7, r3
 800593a:	4a2e      	ldr	r2, [pc, #184]	; (80059f4 <UARTEx_SetNbDataToProcess+0xd0>)
 800593c:	ca03      	ldmia	r2!, {r0, r1}
 800593e:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005944:	2b00      	cmp	r3, #0
 8005946:	d108      	bne.n	800595a <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	226a      	movs	r2, #106	; 0x6a
 800594c:	2101      	movs	r1, #1
 800594e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2268      	movs	r2, #104	; 0x68
 8005954:	2101      	movs	r1, #1
 8005956:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005958:	e046      	b.n	80059e8 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800595a:	261f      	movs	r6, #31
 800595c:	19bb      	adds	r3, r7, r6
 800595e:	2208      	movs	r2, #8
 8005960:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005962:	201e      	movs	r0, #30
 8005964:	183b      	adds	r3, r7, r0
 8005966:	2208      	movs	r2, #8
 8005968:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	0e5b      	lsrs	r3, r3, #25
 8005972:	b2da      	uxtb	r2, r3
 8005974:	241d      	movs	r4, #29
 8005976:	193b      	adds	r3, r7, r4
 8005978:	2107      	movs	r1, #7
 800597a:	400a      	ands	r2, r1
 800597c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	0f5b      	lsrs	r3, r3, #29
 8005986:	b2da      	uxtb	r2, r3
 8005988:	251c      	movs	r5, #28
 800598a:	197b      	adds	r3, r7, r5
 800598c:	2107      	movs	r1, #7
 800598e:	400a      	ands	r2, r1
 8005990:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005992:	183b      	adds	r3, r7, r0
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	197a      	adds	r2, r7, r5
 8005998:	7812      	ldrb	r2, [r2, #0]
 800599a:	2114      	movs	r1, #20
 800599c:	1879      	adds	r1, r7, r1
 800599e:	5c8a      	ldrb	r2, [r1, r2]
 80059a0:	435a      	muls	r2, r3
 80059a2:	0010      	movs	r0, r2
 80059a4:	197b      	adds	r3, r7, r5
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	250c      	movs	r5, #12
 80059aa:	197a      	adds	r2, r7, r5
 80059ac:	5cd3      	ldrb	r3, [r2, r3]
 80059ae:	0019      	movs	r1, r3
 80059b0:	f7fa fc32 	bl	8000218 <__divsi3>
 80059b4:	0003      	movs	r3, r0
 80059b6:	b299      	uxth	r1, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	226a      	movs	r2, #106	; 0x6a
 80059bc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80059be:	19bb      	adds	r3, r7, r6
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	193a      	adds	r2, r7, r4
 80059c4:	7812      	ldrb	r2, [r2, #0]
 80059c6:	2114      	movs	r1, #20
 80059c8:	1879      	adds	r1, r7, r1
 80059ca:	5c8a      	ldrb	r2, [r1, r2]
 80059cc:	435a      	muls	r2, r3
 80059ce:	0010      	movs	r0, r2
 80059d0:	193b      	adds	r3, r7, r4
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	197a      	adds	r2, r7, r5
 80059d6:	5cd3      	ldrb	r3, [r2, r3]
 80059d8:	0019      	movs	r1, r3
 80059da:	f7fa fc1d 	bl	8000218 <__divsi3>
 80059de:	0003      	movs	r3, r0
 80059e0:	b299      	uxth	r1, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2268      	movs	r2, #104	; 0x68
 80059e6:	5299      	strh	r1, [r3, r2]
}
 80059e8:	46c0      	nop			; (mov r8, r8)
 80059ea:	46bd      	mov	sp, r7
 80059ec:	b009      	add	sp, #36	; 0x24
 80059ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059f0:	08006294 	.word	0x08006294
 80059f4:	0800629c 	.word	0x0800629c

080059f8 <__errno>:
 80059f8:	4b01      	ldr	r3, [pc, #4]	; (8005a00 <__errno+0x8>)
 80059fa:	6818      	ldr	r0, [r3, #0]
 80059fc:	4770      	bx	lr
 80059fe:	46c0      	nop			; (mov r8, r8)
 8005a00:	20000014 	.word	0x20000014

08005a04 <__libc_init_array>:
 8005a04:	b570      	push	{r4, r5, r6, lr}
 8005a06:	2600      	movs	r6, #0
 8005a08:	4d0c      	ldr	r5, [pc, #48]	; (8005a3c <__libc_init_array+0x38>)
 8005a0a:	4c0d      	ldr	r4, [pc, #52]	; (8005a40 <__libc_init_array+0x3c>)
 8005a0c:	1b64      	subs	r4, r4, r5
 8005a0e:	10a4      	asrs	r4, r4, #2
 8005a10:	42a6      	cmp	r6, r4
 8005a12:	d109      	bne.n	8005a28 <__libc_init_array+0x24>
 8005a14:	2600      	movs	r6, #0
 8005a16:	f000 fc29 	bl	800626c <_init>
 8005a1a:	4d0a      	ldr	r5, [pc, #40]	; (8005a44 <__libc_init_array+0x40>)
 8005a1c:	4c0a      	ldr	r4, [pc, #40]	; (8005a48 <__libc_init_array+0x44>)
 8005a1e:	1b64      	subs	r4, r4, r5
 8005a20:	10a4      	asrs	r4, r4, #2
 8005a22:	42a6      	cmp	r6, r4
 8005a24:	d105      	bne.n	8005a32 <__libc_init_array+0x2e>
 8005a26:	bd70      	pop	{r4, r5, r6, pc}
 8005a28:	00b3      	lsls	r3, r6, #2
 8005a2a:	58eb      	ldr	r3, [r5, r3]
 8005a2c:	4798      	blx	r3
 8005a2e:	3601      	adds	r6, #1
 8005a30:	e7ee      	b.n	8005a10 <__libc_init_array+0xc>
 8005a32:	00b3      	lsls	r3, r6, #2
 8005a34:	58eb      	ldr	r3, [r5, r3]
 8005a36:	4798      	blx	r3
 8005a38:	3601      	adds	r6, #1
 8005a3a:	e7f2      	b.n	8005a22 <__libc_init_array+0x1e>
 8005a3c:	080063c0 	.word	0x080063c0
 8005a40:	080063c0 	.word	0x080063c0
 8005a44:	080063c0 	.word	0x080063c0
 8005a48:	080063c4 	.word	0x080063c4

08005a4c <memset>:
 8005a4c:	0003      	movs	r3, r0
 8005a4e:	1812      	adds	r2, r2, r0
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d100      	bne.n	8005a56 <memset+0xa>
 8005a54:	4770      	bx	lr
 8005a56:	7019      	strb	r1, [r3, #0]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	e7f9      	b.n	8005a50 <memset+0x4>

08005a5c <siprintf>:
 8005a5c:	b40e      	push	{r1, r2, r3}
 8005a5e:	b500      	push	{lr}
 8005a60:	490b      	ldr	r1, [pc, #44]	; (8005a90 <siprintf+0x34>)
 8005a62:	b09c      	sub	sp, #112	; 0x70
 8005a64:	ab1d      	add	r3, sp, #116	; 0x74
 8005a66:	9002      	str	r0, [sp, #8]
 8005a68:	9006      	str	r0, [sp, #24]
 8005a6a:	9107      	str	r1, [sp, #28]
 8005a6c:	9104      	str	r1, [sp, #16]
 8005a6e:	4809      	ldr	r0, [pc, #36]	; (8005a94 <siprintf+0x38>)
 8005a70:	4909      	ldr	r1, [pc, #36]	; (8005a98 <siprintf+0x3c>)
 8005a72:	cb04      	ldmia	r3!, {r2}
 8005a74:	9105      	str	r1, [sp, #20]
 8005a76:	6800      	ldr	r0, [r0, #0]
 8005a78:	a902      	add	r1, sp, #8
 8005a7a:	9301      	str	r3, [sp, #4]
 8005a7c:	f000 f870 	bl	8005b60 <_svfiprintf_r>
 8005a80:	2300      	movs	r3, #0
 8005a82:	9a02      	ldr	r2, [sp, #8]
 8005a84:	7013      	strb	r3, [r2, #0]
 8005a86:	b01c      	add	sp, #112	; 0x70
 8005a88:	bc08      	pop	{r3}
 8005a8a:	b003      	add	sp, #12
 8005a8c:	4718      	bx	r3
 8005a8e:	46c0      	nop			; (mov r8, r8)
 8005a90:	7fffffff 	.word	0x7fffffff
 8005a94:	20000014 	.word	0x20000014
 8005a98:	ffff0208 	.word	0xffff0208

08005a9c <__ssputs_r>:
 8005a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a9e:	688e      	ldr	r6, [r1, #8]
 8005aa0:	b085      	sub	sp, #20
 8005aa2:	0007      	movs	r7, r0
 8005aa4:	000c      	movs	r4, r1
 8005aa6:	9203      	str	r2, [sp, #12]
 8005aa8:	9301      	str	r3, [sp, #4]
 8005aaa:	429e      	cmp	r6, r3
 8005aac:	d83c      	bhi.n	8005b28 <__ssputs_r+0x8c>
 8005aae:	2390      	movs	r3, #144	; 0x90
 8005ab0:	898a      	ldrh	r2, [r1, #12]
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	421a      	tst	r2, r3
 8005ab6:	d034      	beq.n	8005b22 <__ssputs_r+0x86>
 8005ab8:	2503      	movs	r5, #3
 8005aba:	6909      	ldr	r1, [r1, #16]
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	1a5b      	subs	r3, r3, r1
 8005ac0:	9302      	str	r3, [sp, #8]
 8005ac2:	6963      	ldr	r3, [r4, #20]
 8005ac4:	9802      	ldr	r0, [sp, #8]
 8005ac6:	435d      	muls	r5, r3
 8005ac8:	0feb      	lsrs	r3, r5, #31
 8005aca:	195d      	adds	r5, r3, r5
 8005acc:	9b01      	ldr	r3, [sp, #4]
 8005ace:	106d      	asrs	r5, r5, #1
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	181b      	adds	r3, r3, r0
 8005ad4:	42ab      	cmp	r3, r5
 8005ad6:	d900      	bls.n	8005ada <__ssputs_r+0x3e>
 8005ad8:	001d      	movs	r5, r3
 8005ada:	0553      	lsls	r3, r2, #21
 8005adc:	d532      	bpl.n	8005b44 <__ssputs_r+0xa8>
 8005ade:	0029      	movs	r1, r5
 8005ae0:	0038      	movs	r0, r7
 8005ae2:	f000 fb23 	bl	800612c <_malloc_r>
 8005ae6:	1e06      	subs	r6, r0, #0
 8005ae8:	d109      	bne.n	8005afe <__ssputs_r+0x62>
 8005aea:	230c      	movs	r3, #12
 8005aec:	603b      	str	r3, [r7, #0]
 8005aee:	2340      	movs	r3, #64	; 0x40
 8005af0:	2001      	movs	r0, #1
 8005af2:	89a2      	ldrh	r2, [r4, #12]
 8005af4:	4240      	negs	r0, r0
 8005af6:	4313      	orrs	r3, r2
 8005af8:	81a3      	strh	r3, [r4, #12]
 8005afa:	b005      	add	sp, #20
 8005afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005afe:	9a02      	ldr	r2, [sp, #8]
 8005b00:	6921      	ldr	r1, [r4, #16]
 8005b02:	f000 faac 	bl	800605e <memcpy>
 8005b06:	89a3      	ldrh	r3, [r4, #12]
 8005b08:	4a14      	ldr	r2, [pc, #80]	; (8005b5c <__ssputs_r+0xc0>)
 8005b0a:	401a      	ands	r2, r3
 8005b0c:	2380      	movs	r3, #128	; 0x80
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	81a3      	strh	r3, [r4, #12]
 8005b12:	9b02      	ldr	r3, [sp, #8]
 8005b14:	6126      	str	r6, [r4, #16]
 8005b16:	18f6      	adds	r6, r6, r3
 8005b18:	6026      	str	r6, [r4, #0]
 8005b1a:	6165      	str	r5, [r4, #20]
 8005b1c:	9e01      	ldr	r6, [sp, #4]
 8005b1e:	1aed      	subs	r5, r5, r3
 8005b20:	60a5      	str	r5, [r4, #8]
 8005b22:	9b01      	ldr	r3, [sp, #4]
 8005b24:	429e      	cmp	r6, r3
 8005b26:	d900      	bls.n	8005b2a <__ssputs_r+0x8e>
 8005b28:	9e01      	ldr	r6, [sp, #4]
 8005b2a:	0032      	movs	r2, r6
 8005b2c:	9903      	ldr	r1, [sp, #12]
 8005b2e:	6820      	ldr	r0, [r4, #0]
 8005b30:	f000 fa9e 	bl	8006070 <memmove>
 8005b34:	68a3      	ldr	r3, [r4, #8]
 8005b36:	2000      	movs	r0, #0
 8005b38:	1b9b      	subs	r3, r3, r6
 8005b3a:	60a3      	str	r3, [r4, #8]
 8005b3c:	6823      	ldr	r3, [r4, #0]
 8005b3e:	199e      	adds	r6, r3, r6
 8005b40:	6026      	str	r6, [r4, #0]
 8005b42:	e7da      	b.n	8005afa <__ssputs_r+0x5e>
 8005b44:	002a      	movs	r2, r5
 8005b46:	0038      	movs	r0, r7
 8005b48:	f000 fb4e 	bl	80061e8 <_realloc_r>
 8005b4c:	1e06      	subs	r6, r0, #0
 8005b4e:	d1e0      	bne.n	8005b12 <__ssputs_r+0x76>
 8005b50:	6921      	ldr	r1, [r4, #16]
 8005b52:	0038      	movs	r0, r7
 8005b54:	f000 faa0 	bl	8006098 <_free_r>
 8005b58:	e7c7      	b.n	8005aea <__ssputs_r+0x4e>
 8005b5a:	46c0      	nop			; (mov r8, r8)
 8005b5c:	fffffb7f 	.word	0xfffffb7f

08005b60 <_svfiprintf_r>:
 8005b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b62:	b0a1      	sub	sp, #132	; 0x84
 8005b64:	9003      	str	r0, [sp, #12]
 8005b66:	001d      	movs	r5, r3
 8005b68:	898b      	ldrh	r3, [r1, #12]
 8005b6a:	000f      	movs	r7, r1
 8005b6c:	0016      	movs	r6, r2
 8005b6e:	061b      	lsls	r3, r3, #24
 8005b70:	d511      	bpl.n	8005b96 <_svfiprintf_r+0x36>
 8005b72:	690b      	ldr	r3, [r1, #16]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10e      	bne.n	8005b96 <_svfiprintf_r+0x36>
 8005b78:	2140      	movs	r1, #64	; 0x40
 8005b7a:	f000 fad7 	bl	800612c <_malloc_r>
 8005b7e:	6038      	str	r0, [r7, #0]
 8005b80:	6138      	str	r0, [r7, #16]
 8005b82:	2800      	cmp	r0, #0
 8005b84:	d105      	bne.n	8005b92 <_svfiprintf_r+0x32>
 8005b86:	230c      	movs	r3, #12
 8005b88:	9a03      	ldr	r2, [sp, #12]
 8005b8a:	3801      	subs	r0, #1
 8005b8c:	6013      	str	r3, [r2, #0]
 8005b8e:	b021      	add	sp, #132	; 0x84
 8005b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b92:	2340      	movs	r3, #64	; 0x40
 8005b94:	617b      	str	r3, [r7, #20]
 8005b96:	2300      	movs	r3, #0
 8005b98:	ac08      	add	r4, sp, #32
 8005b9a:	6163      	str	r3, [r4, #20]
 8005b9c:	3320      	adds	r3, #32
 8005b9e:	7663      	strb	r3, [r4, #25]
 8005ba0:	3310      	adds	r3, #16
 8005ba2:	76a3      	strb	r3, [r4, #26]
 8005ba4:	9507      	str	r5, [sp, #28]
 8005ba6:	0035      	movs	r5, r6
 8005ba8:	782b      	ldrb	r3, [r5, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <_svfiprintf_r+0x52>
 8005bae:	2b25      	cmp	r3, #37	; 0x25
 8005bb0:	d146      	bne.n	8005c40 <_svfiprintf_r+0xe0>
 8005bb2:	1bab      	subs	r3, r5, r6
 8005bb4:	9305      	str	r3, [sp, #20]
 8005bb6:	d00c      	beq.n	8005bd2 <_svfiprintf_r+0x72>
 8005bb8:	0032      	movs	r2, r6
 8005bba:	0039      	movs	r1, r7
 8005bbc:	9803      	ldr	r0, [sp, #12]
 8005bbe:	f7ff ff6d 	bl	8005a9c <__ssputs_r>
 8005bc2:	1c43      	adds	r3, r0, #1
 8005bc4:	d100      	bne.n	8005bc8 <_svfiprintf_r+0x68>
 8005bc6:	e0ae      	b.n	8005d26 <_svfiprintf_r+0x1c6>
 8005bc8:	6962      	ldr	r2, [r4, #20]
 8005bca:	9b05      	ldr	r3, [sp, #20]
 8005bcc:	4694      	mov	ip, r2
 8005bce:	4463      	add	r3, ip
 8005bd0:	6163      	str	r3, [r4, #20]
 8005bd2:	782b      	ldrb	r3, [r5, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d100      	bne.n	8005bda <_svfiprintf_r+0x7a>
 8005bd8:	e0a5      	b.n	8005d26 <_svfiprintf_r+0x1c6>
 8005bda:	2201      	movs	r2, #1
 8005bdc:	2300      	movs	r3, #0
 8005bde:	4252      	negs	r2, r2
 8005be0:	6062      	str	r2, [r4, #4]
 8005be2:	a904      	add	r1, sp, #16
 8005be4:	3254      	adds	r2, #84	; 0x54
 8005be6:	1852      	adds	r2, r2, r1
 8005be8:	1c6e      	adds	r6, r5, #1
 8005bea:	6023      	str	r3, [r4, #0]
 8005bec:	60e3      	str	r3, [r4, #12]
 8005bee:	60a3      	str	r3, [r4, #8]
 8005bf0:	7013      	strb	r3, [r2, #0]
 8005bf2:	65a3      	str	r3, [r4, #88]	; 0x58
 8005bf4:	7831      	ldrb	r1, [r6, #0]
 8005bf6:	2205      	movs	r2, #5
 8005bf8:	4853      	ldr	r0, [pc, #332]	; (8005d48 <_svfiprintf_r+0x1e8>)
 8005bfa:	f000 fa25 	bl	8006048 <memchr>
 8005bfe:	1c75      	adds	r5, r6, #1
 8005c00:	2800      	cmp	r0, #0
 8005c02:	d11f      	bne.n	8005c44 <_svfiprintf_r+0xe4>
 8005c04:	6822      	ldr	r2, [r4, #0]
 8005c06:	06d3      	lsls	r3, r2, #27
 8005c08:	d504      	bpl.n	8005c14 <_svfiprintf_r+0xb4>
 8005c0a:	2353      	movs	r3, #83	; 0x53
 8005c0c:	a904      	add	r1, sp, #16
 8005c0e:	185b      	adds	r3, r3, r1
 8005c10:	2120      	movs	r1, #32
 8005c12:	7019      	strb	r1, [r3, #0]
 8005c14:	0713      	lsls	r3, r2, #28
 8005c16:	d504      	bpl.n	8005c22 <_svfiprintf_r+0xc2>
 8005c18:	2353      	movs	r3, #83	; 0x53
 8005c1a:	a904      	add	r1, sp, #16
 8005c1c:	185b      	adds	r3, r3, r1
 8005c1e:	212b      	movs	r1, #43	; 0x2b
 8005c20:	7019      	strb	r1, [r3, #0]
 8005c22:	7833      	ldrb	r3, [r6, #0]
 8005c24:	2b2a      	cmp	r3, #42	; 0x2a
 8005c26:	d016      	beq.n	8005c56 <_svfiprintf_r+0xf6>
 8005c28:	0035      	movs	r5, r6
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	200a      	movs	r0, #10
 8005c2e:	68e3      	ldr	r3, [r4, #12]
 8005c30:	782a      	ldrb	r2, [r5, #0]
 8005c32:	1c6e      	adds	r6, r5, #1
 8005c34:	3a30      	subs	r2, #48	; 0x30
 8005c36:	2a09      	cmp	r2, #9
 8005c38:	d94e      	bls.n	8005cd8 <_svfiprintf_r+0x178>
 8005c3a:	2900      	cmp	r1, #0
 8005c3c:	d018      	beq.n	8005c70 <_svfiprintf_r+0x110>
 8005c3e:	e010      	b.n	8005c62 <_svfiprintf_r+0x102>
 8005c40:	3501      	adds	r5, #1
 8005c42:	e7b1      	b.n	8005ba8 <_svfiprintf_r+0x48>
 8005c44:	4b40      	ldr	r3, [pc, #256]	; (8005d48 <_svfiprintf_r+0x1e8>)
 8005c46:	6822      	ldr	r2, [r4, #0]
 8005c48:	1ac0      	subs	r0, r0, r3
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	4083      	lsls	r3, r0
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	6023      	str	r3, [r4, #0]
 8005c52:	002e      	movs	r6, r5
 8005c54:	e7ce      	b.n	8005bf4 <_svfiprintf_r+0x94>
 8005c56:	9b07      	ldr	r3, [sp, #28]
 8005c58:	1d19      	adds	r1, r3, #4
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	9107      	str	r1, [sp, #28]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	db01      	blt.n	8005c66 <_svfiprintf_r+0x106>
 8005c62:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c64:	e004      	b.n	8005c70 <_svfiprintf_r+0x110>
 8005c66:	425b      	negs	r3, r3
 8005c68:	60e3      	str	r3, [r4, #12]
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	6023      	str	r3, [r4, #0]
 8005c70:	782b      	ldrb	r3, [r5, #0]
 8005c72:	2b2e      	cmp	r3, #46	; 0x2e
 8005c74:	d10a      	bne.n	8005c8c <_svfiprintf_r+0x12c>
 8005c76:	786b      	ldrb	r3, [r5, #1]
 8005c78:	2b2a      	cmp	r3, #42	; 0x2a
 8005c7a:	d135      	bne.n	8005ce8 <_svfiprintf_r+0x188>
 8005c7c:	9b07      	ldr	r3, [sp, #28]
 8005c7e:	3502      	adds	r5, #2
 8005c80:	1d1a      	adds	r2, r3, #4
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	9207      	str	r2, [sp, #28]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	db2b      	blt.n	8005ce2 <_svfiprintf_r+0x182>
 8005c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c8c:	4e2f      	ldr	r6, [pc, #188]	; (8005d4c <_svfiprintf_r+0x1ec>)
 8005c8e:	7829      	ldrb	r1, [r5, #0]
 8005c90:	2203      	movs	r2, #3
 8005c92:	0030      	movs	r0, r6
 8005c94:	f000 f9d8 	bl	8006048 <memchr>
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	d006      	beq.n	8005caa <_svfiprintf_r+0x14a>
 8005c9c:	2340      	movs	r3, #64	; 0x40
 8005c9e:	1b80      	subs	r0, r0, r6
 8005ca0:	4083      	lsls	r3, r0
 8005ca2:	6822      	ldr	r2, [r4, #0]
 8005ca4:	3501      	adds	r5, #1
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	6023      	str	r3, [r4, #0]
 8005caa:	7829      	ldrb	r1, [r5, #0]
 8005cac:	2206      	movs	r2, #6
 8005cae:	4828      	ldr	r0, [pc, #160]	; (8005d50 <_svfiprintf_r+0x1f0>)
 8005cb0:	1c6e      	adds	r6, r5, #1
 8005cb2:	7621      	strb	r1, [r4, #24]
 8005cb4:	f000 f9c8 	bl	8006048 <memchr>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	d03c      	beq.n	8005d36 <_svfiprintf_r+0x1d6>
 8005cbc:	4b25      	ldr	r3, [pc, #148]	; (8005d54 <_svfiprintf_r+0x1f4>)
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d125      	bne.n	8005d0e <_svfiprintf_r+0x1ae>
 8005cc2:	2207      	movs	r2, #7
 8005cc4:	9b07      	ldr	r3, [sp, #28]
 8005cc6:	3307      	adds	r3, #7
 8005cc8:	4393      	bics	r3, r2
 8005cca:	3308      	adds	r3, #8
 8005ccc:	9307      	str	r3, [sp, #28]
 8005cce:	6963      	ldr	r3, [r4, #20]
 8005cd0:	9a04      	ldr	r2, [sp, #16]
 8005cd2:	189b      	adds	r3, r3, r2
 8005cd4:	6163      	str	r3, [r4, #20]
 8005cd6:	e766      	b.n	8005ba6 <_svfiprintf_r+0x46>
 8005cd8:	4343      	muls	r3, r0
 8005cda:	2101      	movs	r1, #1
 8005cdc:	189b      	adds	r3, r3, r2
 8005cde:	0035      	movs	r5, r6
 8005ce0:	e7a6      	b.n	8005c30 <_svfiprintf_r+0xd0>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	425b      	negs	r3, r3
 8005ce6:	e7d0      	b.n	8005c8a <_svfiprintf_r+0x12a>
 8005ce8:	2300      	movs	r3, #0
 8005cea:	200a      	movs	r0, #10
 8005cec:	001a      	movs	r2, r3
 8005cee:	3501      	adds	r5, #1
 8005cf0:	6063      	str	r3, [r4, #4]
 8005cf2:	7829      	ldrb	r1, [r5, #0]
 8005cf4:	1c6e      	adds	r6, r5, #1
 8005cf6:	3930      	subs	r1, #48	; 0x30
 8005cf8:	2909      	cmp	r1, #9
 8005cfa:	d903      	bls.n	8005d04 <_svfiprintf_r+0x1a4>
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d0c5      	beq.n	8005c8c <_svfiprintf_r+0x12c>
 8005d00:	9209      	str	r2, [sp, #36]	; 0x24
 8005d02:	e7c3      	b.n	8005c8c <_svfiprintf_r+0x12c>
 8005d04:	4342      	muls	r2, r0
 8005d06:	2301      	movs	r3, #1
 8005d08:	1852      	adds	r2, r2, r1
 8005d0a:	0035      	movs	r5, r6
 8005d0c:	e7f1      	b.n	8005cf2 <_svfiprintf_r+0x192>
 8005d0e:	ab07      	add	r3, sp, #28
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	003a      	movs	r2, r7
 8005d14:	4b10      	ldr	r3, [pc, #64]	; (8005d58 <_svfiprintf_r+0x1f8>)
 8005d16:	0021      	movs	r1, r4
 8005d18:	9803      	ldr	r0, [sp, #12]
 8005d1a:	e000      	b.n	8005d1e <_svfiprintf_r+0x1be>
 8005d1c:	bf00      	nop
 8005d1e:	9004      	str	r0, [sp, #16]
 8005d20:	9b04      	ldr	r3, [sp, #16]
 8005d22:	3301      	adds	r3, #1
 8005d24:	d1d3      	bne.n	8005cce <_svfiprintf_r+0x16e>
 8005d26:	89bb      	ldrh	r3, [r7, #12]
 8005d28:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005d2a:	065b      	lsls	r3, r3, #25
 8005d2c:	d400      	bmi.n	8005d30 <_svfiprintf_r+0x1d0>
 8005d2e:	e72e      	b.n	8005b8e <_svfiprintf_r+0x2e>
 8005d30:	2001      	movs	r0, #1
 8005d32:	4240      	negs	r0, r0
 8005d34:	e72b      	b.n	8005b8e <_svfiprintf_r+0x2e>
 8005d36:	ab07      	add	r3, sp, #28
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	003a      	movs	r2, r7
 8005d3c:	4b06      	ldr	r3, [pc, #24]	; (8005d58 <_svfiprintf_r+0x1f8>)
 8005d3e:	0021      	movs	r1, r4
 8005d40:	9803      	ldr	r0, [sp, #12]
 8005d42:	f000 f879 	bl	8005e38 <_printf_i>
 8005d46:	e7ea      	b.n	8005d1e <_svfiprintf_r+0x1be>
 8005d48:	08006384 	.word	0x08006384
 8005d4c:	0800638a 	.word	0x0800638a
 8005d50:	0800638e 	.word	0x0800638e
 8005d54:	00000000 	.word	0x00000000
 8005d58:	08005a9d 	.word	0x08005a9d

08005d5c <_printf_common>:
 8005d5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d5e:	0015      	movs	r5, r2
 8005d60:	9301      	str	r3, [sp, #4]
 8005d62:	688a      	ldr	r2, [r1, #8]
 8005d64:	690b      	ldr	r3, [r1, #16]
 8005d66:	9000      	str	r0, [sp, #0]
 8005d68:	000c      	movs	r4, r1
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	da00      	bge.n	8005d70 <_printf_common+0x14>
 8005d6e:	0013      	movs	r3, r2
 8005d70:	0022      	movs	r2, r4
 8005d72:	602b      	str	r3, [r5, #0]
 8005d74:	3243      	adds	r2, #67	; 0x43
 8005d76:	7812      	ldrb	r2, [r2, #0]
 8005d78:	2a00      	cmp	r2, #0
 8005d7a:	d001      	beq.n	8005d80 <_printf_common+0x24>
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	602b      	str	r3, [r5, #0]
 8005d80:	6823      	ldr	r3, [r4, #0]
 8005d82:	069b      	lsls	r3, r3, #26
 8005d84:	d502      	bpl.n	8005d8c <_printf_common+0x30>
 8005d86:	682b      	ldr	r3, [r5, #0]
 8005d88:	3302      	adds	r3, #2
 8005d8a:	602b      	str	r3, [r5, #0]
 8005d8c:	2706      	movs	r7, #6
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	401f      	ands	r7, r3
 8005d92:	d027      	beq.n	8005de4 <_printf_common+0x88>
 8005d94:	0023      	movs	r3, r4
 8005d96:	3343      	adds	r3, #67	; 0x43
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	1e5a      	subs	r2, r3, #1
 8005d9c:	4193      	sbcs	r3, r2
 8005d9e:	6822      	ldr	r2, [r4, #0]
 8005da0:	0692      	lsls	r2, r2, #26
 8005da2:	d430      	bmi.n	8005e06 <_printf_common+0xaa>
 8005da4:	0022      	movs	r2, r4
 8005da6:	9901      	ldr	r1, [sp, #4]
 8005da8:	3243      	adds	r2, #67	; 0x43
 8005daa:	9800      	ldr	r0, [sp, #0]
 8005dac:	9e08      	ldr	r6, [sp, #32]
 8005dae:	47b0      	blx	r6
 8005db0:	1c43      	adds	r3, r0, #1
 8005db2:	d025      	beq.n	8005e00 <_printf_common+0xa4>
 8005db4:	2306      	movs	r3, #6
 8005db6:	6820      	ldr	r0, [r4, #0]
 8005db8:	682a      	ldr	r2, [r5, #0]
 8005dba:	68e1      	ldr	r1, [r4, #12]
 8005dbc:	4003      	ands	r3, r0
 8005dbe:	2500      	movs	r5, #0
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d103      	bne.n	8005dcc <_printf_common+0x70>
 8005dc4:	1a8d      	subs	r5, r1, r2
 8005dc6:	43eb      	mvns	r3, r5
 8005dc8:	17db      	asrs	r3, r3, #31
 8005dca:	401d      	ands	r5, r3
 8005dcc:	68a3      	ldr	r3, [r4, #8]
 8005dce:	6922      	ldr	r2, [r4, #16]
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	dd01      	ble.n	8005dd8 <_printf_common+0x7c>
 8005dd4:	1a9b      	subs	r3, r3, r2
 8005dd6:	18ed      	adds	r5, r5, r3
 8005dd8:	2700      	movs	r7, #0
 8005dda:	42bd      	cmp	r5, r7
 8005ddc:	d120      	bne.n	8005e20 <_printf_common+0xc4>
 8005dde:	2000      	movs	r0, #0
 8005de0:	e010      	b.n	8005e04 <_printf_common+0xa8>
 8005de2:	3701      	adds	r7, #1
 8005de4:	68e3      	ldr	r3, [r4, #12]
 8005de6:	682a      	ldr	r2, [r5, #0]
 8005de8:	1a9b      	subs	r3, r3, r2
 8005dea:	42bb      	cmp	r3, r7
 8005dec:	ddd2      	ble.n	8005d94 <_printf_common+0x38>
 8005dee:	0022      	movs	r2, r4
 8005df0:	2301      	movs	r3, #1
 8005df2:	3219      	adds	r2, #25
 8005df4:	9901      	ldr	r1, [sp, #4]
 8005df6:	9800      	ldr	r0, [sp, #0]
 8005df8:	9e08      	ldr	r6, [sp, #32]
 8005dfa:	47b0      	blx	r6
 8005dfc:	1c43      	adds	r3, r0, #1
 8005dfe:	d1f0      	bne.n	8005de2 <_printf_common+0x86>
 8005e00:	2001      	movs	r0, #1
 8005e02:	4240      	negs	r0, r0
 8005e04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e06:	2030      	movs	r0, #48	; 0x30
 8005e08:	18e1      	adds	r1, r4, r3
 8005e0a:	3143      	adds	r1, #67	; 0x43
 8005e0c:	7008      	strb	r0, [r1, #0]
 8005e0e:	0021      	movs	r1, r4
 8005e10:	1c5a      	adds	r2, r3, #1
 8005e12:	3145      	adds	r1, #69	; 0x45
 8005e14:	7809      	ldrb	r1, [r1, #0]
 8005e16:	18a2      	adds	r2, r4, r2
 8005e18:	3243      	adds	r2, #67	; 0x43
 8005e1a:	3302      	adds	r3, #2
 8005e1c:	7011      	strb	r1, [r2, #0]
 8005e1e:	e7c1      	b.n	8005da4 <_printf_common+0x48>
 8005e20:	0022      	movs	r2, r4
 8005e22:	2301      	movs	r3, #1
 8005e24:	321a      	adds	r2, #26
 8005e26:	9901      	ldr	r1, [sp, #4]
 8005e28:	9800      	ldr	r0, [sp, #0]
 8005e2a:	9e08      	ldr	r6, [sp, #32]
 8005e2c:	47b0      	blx	r6
 8005e2e:	1c43      	adds	r3, r0, #1
 8005e30:	d0e6      	beq.n	8005e00 <_printf_common+0xa4>
 8005e32:	3701      	adds	r7, #1
 8005e34:	e7d1      	b.n	8005dda <_printf_common+0x7e>
	...

08005e38 <_printf_i>:
 8005e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e3a:	b089      	sub	sp, #36	; 0x24
 8005e3c:	9204      	str	r2, [sp, #16]
 8005e3e:	000a      	movs	r2, r1
 8005e40:	3243      	adds	r2, #67	; 0x43
 8005e42:	9305      	str	r3, [sp, #20]
 8005e44:	9003      	str	r0, [sp, #12]
 8005e46:	9202      	str	r2, [sp, #8]
 8005e48:	7e0a      	ldrb	r2, [r1, #24]
 8005e4a:	000c      	movs	r4, r1
 8005e4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e4e:	2a6e      	cmp	r2, #110	; 0x6e
 8005e50:	d100      	bne.n	8005e54 <_printf_i+0x1c>
 8005e52:	e086      	b.n	8005f62 <_printf_i+0x12a>
 8005e54:	d81f      	bhi.n	8005e96 <_printf_i+0x5e>
 8005e56:	2a63      	cmp	r2, #99	; 0x63
 8005e58:	d033      	beq.n	8005ec2 <_printf_i+0x8a>
 8005e5a:	d808      	bhi.n	8005e6e <_printf_i+0x36>
 8005e5c:	2a00      	cmp	r2, #0
 8005e5e:	d100      	bne.n	8005e62 <_printf_i+0x2a>
 8005e60:	e08c      	b.n	8005f7c <_printf_i+0x144>
 8005e62:	2a58      	cmp	r2, #88	; 0x58
 8005e64:	d04d      	beq.n	8005f02 <_printf_i+0xca>
 8005e66:	0025      	movs	r5, r4
 8005e68:	3542      	adds	r5, #66	; 0x42
 8005e6a:	702a      	strb	r2, [r5, #0]
 8005e6c:	e030      	b.n	8005ed0 <_printf_i+0x98>
 8005e6e:	2a64      	cmp	r2, #100	; 0x64
 8005e70:	d001      	beq.n	8005e76 <_printf_i+0x3e>
 8005e72:	2a69      	cmp	r2, #105	; 0x69
 8005e74:	d1f7      	bne.n	8005e66 <_printf_i+0x2e>
 8005e76:	6819      	ldr	r1, [r3, #0]
 8005e78:	6825      	ldr	r5, [r4, #0]
 8005e7a:	1d0a      	adds	r2, r1, #4
 8005e7c:	0628      	lsls	r0, r5, #24
 8005e7e:	d529      	bpl.n	8005ed4 <_printf_i+0x9c>
 8005e80:	6808      	ldr	r0, [r1, #0]
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	2800      	cmp	r0, #0
 8005e86:	da03      	bge.n	8005e90 <_printf_i+0x58>
 8005e88:	232d      	movs	r3, #45	; 0x2d
 8005e8a:	9a02      	ldr	r2, [sp, #8]
 8005e8c:	4240      	negs	r0, r0
 8005e8e:	7013      	strb	r3, [r2, #0]
 8005e90:	4e6b      	ldr	r6, [pc, #428]	; (8006040 <_printf_i+0x208>)
 8005e92:	270a      	movs	r7, #10
 8005e94:	e04f      	b.n	8005f36 <_printf_i+0xfe>
 8005e96:	2a73      	cmp	r2, #115	; 0x73
 8005e98:	d074      	beq.n	8005f84 <_printf_i+0x14c>
 8005e9a:	d808      	bhi.n	8005eae <_printf_i+0x76>
 8005e9c:	2a6f      	cmp	r2, #111	; 0x6f
 8005e9e:	d01f      	beq.n	8005ee0 <_printf_i+0xa8>
 8005ea0:	2a70      	cmp	r2, #112	; 0x70
 8005ea2:	d1e0      	bne.n	8005e66 <_printf_i+0x2e>
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	6809      	ldr	r1, [r1, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	6022      	str	r2, [r4, #0]
 8005eac:	e003      	b.n	8005eb6 <_printf_i+0x7e>
 8005eae:	2a75      	cmp	r2, #117	; 0x75
 8005eb0:	d016      	beq.n	8005ee0 <_printf_i+0xa8>
 8005eb2:	2a78      	cmp	r2, #120	; 0x78
 8005eb4:	d1d7      	bne.n	8005e66 <_printf_i+0x2e>
 8005eb6:	0022      	movs	r2, r4
 8005eb8:	2178      	movs	r1, #120	; 0x78
 8005eba:	3245      	adds	r2, #69	; 0x45
 8005ebc:	7011      	strb	r1, [r2, #0]
 8005ebe:	4e61      	ldr	r6, [pc, #388]	; (8006044 <_printf_i+0x20c>)
 8005ec0:	e022      	b.n	8005f08 <_printf_i+0xd0>
 8005ec2:	0025      	movs	r5, r4
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	3542      	adds	r5, #66	; 0x42
 8005ec8:	1d11      	adds	r1, r2, #4
 8005eca:	6019      	str	r1, [r3, #0]
 8005ecc:	6813      	ldr	r3, [r2, #0]
 8005ece:	702b      	strb	r3, [r5, #0]
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e065      	b.n	8005fa0 <_printf_i+0x168>
 8005ed4:	6808      	ldr	r0, [r1, #0]
 8005ed6:	601a      	str	r2, [r3, #0]
 8005ed8:	0669      	lsls	r1, r5, #25
 8005eda:	d5d3      	bpl.n	8005e84 <_printf_i+0x4c>
 8005edc:	b200      	sxth	r0, r0
 8005ede:	e7d1      	b.n	8005e84 <_printf_i+0x4c>
 8005ee0:	6819      	ldr	r1, [r3, #0]
 8005ee2:	6825      	ldr	r5, [r4, #0]
 8005ee4:	1d08      	adds	r0, r1, #4
 8005ee6:	6018      	str	r0, [r3, #0]
 8005ee8:	6808      	ldr	r0, [r1, #0]
 8005eea:	062e      	lsls	r6, r5, #24
 8005eec:	d505      	bpl.n	8005efa <_printf_i+0xc2>
 8005eee:	4e54      	ldr	r6, [pc, #336]	; (8006040 <_printf_i+0x208>)
 8005ef0:	2708      	movs	r7, #8
 8005ef2:	2a6f      	cmp	r2, #111	; 0x6f
 8005ef4:	d01b      	beq.n	8005f2e <_printf_i+0xf6>
 8005ef6:	270a      	movs	r7, #10
 8005ef8:	e019      	b.n	8005f2e <_printf_i+0xf6>
 8005efa:	066d      	lsls	r5, r5, #25
 8005efc:	d5f7      	bpl.n	8005eee <_printf_i+0xb6>
 8005efe:	b280      	uxth	r0, r0
 8005f00:	e7f5      	b.n	8005eee <_printf_i+0xb6>
 8005f02:	3145      	adds	r1, #69	; 0x45
 8005f04:	4e4e      	ldr	r6, [pc, #312]	; (8006040 <_printf_i+0x208>)
 8005f06:	700a      	strb	r2, [r1, #0]
 8005f08:	6818      	ldr	r0, [r3, #0]
 8005f0a:	6822      	ldr	r2, [r4, #0]
 8005f0c:	1d01      	adds	r1, r0, #4
 8005f0e:	6800      	ldr	r0, [r0, #0]
 8005f10:	6019      	str	r1, [r3, #0]
 8005f12:	0615      	lsls	r5, r2, #24
 8005f14:	d521      	bpl.n	8005f5a <_printf_i+0x122>
 8005f16:	07d3      	lsls	r3, r2, #31
 8005f18:	d502      	bpl.n	8005f20 <_printf_i+0xe8>
 8005f1a:	2320      	movs	r3, #32
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	6022      	str	r2, [r4, #0]
 8005f20:	2710      	movs	r7, #16
 8005f22:	2800      	cmp	r0, #0
 8005f24:	d103      	bne.n	8005f2e <_printf_i+0xf6>
 8005f26:	2320      	movs	r3, #32
 8005f28:	6822      	ldr	r2, [r4, #0]
 8005f2a:	439a      	bics	r2, r3
 8005f2c:	6022      	str	r2, [r4, #0]
 8005f2e:	0023      	movs	r3, r4
 8005f30:	2200      	movs	r2, #0
 8005f32:	3343      	adds	r3, #67	; 0x43
 8005f34:	701a      	strb	r2, [r3, #0]
 8005f36:	6863      	ldr	r3, [r4, #4]
 8005f38:	60a3      	str	r3, [r4, #8]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	db58      	blt.n	8005ff0 <_printf_i+0x1b8>
 8005f3e:	2204      	movs	r2, #4
 8005f40:	6821      	ldr	r1, [r4, #0]
 8005f42:	4391      	bics	r1, r2
 8005f44:	6021      	str	r1, [r4, #0]
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d154      	bne.n	8005ff4 <_printf_i+0x1bc>
 8005f4a:	9d02      	ldr	r5, [sp, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d05a      	beq.n	8006006 <_printf_i+0x1ce>
 8005f50:	0025      	movs	r5, r4
 8005f52:	7833      	ldrb	r3, [r6, #0]
 8005f54:	3542      	adds	r5, #66	; 0x42
 8005f56:	702b      	strb	r3, [r5, #0]
 8005f58:	e055      	b.n	8006006 <_printf_i+0x1ce>
 8005f5a:	0655      	lsls	r5, r2, #25
 8005f5c:	d5db      	bpl.n	8005f16 <_printf_i+0xde>
 8005f5e:	b280      	uxth	r0, r0
 8005f60:	e7d9      	b.n	8005f16 <_printf_i+0xde>
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	680d      	ldr	r5, [r1, #0]
 8005f66:	1d10      	adds	r0, r2, #4
 8005f68:	6949      	ldr	r1, [r1, #20]
 8005f6a:	6018      	str	r0, [r3, #0]
 8005f6c:	6813      	ldr	r3, [r2, #0]
 8005f6e:	062e      	lsls	r6, r5, #24
 8005f70:	d501      	bpl.n	8005f76 <_printf_i+0x13e>
 8005f72:	6019      	str	r1, [r3, #0]
 8005f74:	e002      	b.n	8005f7c <_printf_i+0x144>
 8005f76:	066d      	lsls	r5, r5, #25
 8005f78:	d5fb      	bpl.n	8005f72 <_printf_i+0x13a>
 8005f7a:	8019      	strh	r1, [r3, #0]
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	9d02      	ldr	r5, [sp, #8]
 8005f80:	6123      	str	r3, [r4, #16]
 8005f82:	e04f      	b.n	8006024 <_printf_i+0x1ec>
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	1d11      	adds	r1, r2, #4
 8005f88:	6019      	str	r1, [r3, #0]
 8005f8a:	6815      	ldr	r5, [r2, #0]
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	6862      	ldr	r2, [r4, #4]
 8005f90:	0028      	movs	r0, r5
 8005f92:	f000 f859 	bl	8006048 <memchr>
 8005f96:	2800      	cmp	r0, #0
 8005f98:	d001      	beq.n	8005f9e <_printf_i+0x166>
 8005f9a:	1b40      	subs	r0, r0, r5
 8005f9c:	6060      	str	r0, [r4, #4]
 8005f9e:	6863      	ldr	r3, [r4, #4]
 8005fa0:	6123      	str	r3, [r4, #16]
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	9a02      	ldr	r2, [sp, #8]
 8005fa6:	7013      	strb	r3, [r2, #0]
 8005fa8:	e03c      	b.n	8006024 <_printf_i+0x1ec>
 8005faa:	6923      	ldr	r3, [r4, #16]
 8005fac:	002a      	movs	r2, r5
 8005fae:	9904      	ldr	r1, [sp, #16]
 8005fb0:	9803      	ldr	r0, [sp, #12]
 8005fb2:	9d05      	ldr	r5, [sp, #20]
 8005fb4:	47a8      	blx	r5
 8005fb6:	1c43      	adds	r3, r0, #1
 8005fb8:	d03e      	beq.n	8006038 <_printf_i+0x200>
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	079b      	lsls	r3, r3, #30
 8005fbe:	d415      	bmi.n	8005fec <_printf_i+0x1b4>
 8005fc0:	9b07      	ldr	r3, [sp, #28]
 8005fc2:	68e0      	ldr	r0, [r4, #12]
 8005fc4:	4298      	cmp	r0, r3
 8005fc6:	da39      	bge.n	800603c <_printf_i+0x204>
 8005fc8:	0018      	movs	r0, r3
 8005fca:	e037      	b.n	800603c <_printf_i+0x204>
 8005fcc:	0022      	movs	r2, r4
 8005fce:	2301      	movs	r3, #1
 8005fd0:	3219      	adds	r2, #25
 8005fd2:	9904      	ldr	r1, [sp, #16]
 8005fd4:	9803      	ldr	r0, [sp, #12]
 8005fd6:	9e05      	ldr	r6, [sp, #20]
 8005fd8:	47b0      	blx	r6
 8005fda:	1c43      	adds	r3, r0, #1
 8005fdc:	d02c      	beq.n	8006038 <_printf_i+0x200>
 8005fde:	3501      	adds	r5, #1
 8005fe0:	68e3      	ldr	r3, [r4, #12]
 8005fe2:	9a07      	ldr	r2, [sp, #28]
 8005fe4:	1a9b      	subs	r3, r3, r2
 8005fe6:	42ab      	cmp	r3, r5
 8005fe8:	dcf0      	bgt.n	8005fcc <_printf_i+0x194>
 8005fea:	e7e9      	b.n	8005fc0 <_printf_i+0x188>
 8005fec:	2500      	movs	r5, #0
 8005fee:	e7f7      	b.n	8005fe0 <_printf_i+0x1a8>
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	d0ad      	beq.n	8005f50 <_printf_i+0x118>
 8005ff4:	9d02      	ldr	r5, [sp, #8]
 8005ff6:	0039      	movs	r1, r7
 8005ff8:	f7fa f90a 	bl	8000210 <__aeabi_uidivmod>
 8005ffc:	5c73      	ldrb	r3, [r6, r1]
 8005ffe:	3d01      	subs	r5, #1
 8006000:	702b      	strb	r3, [r5, #0]
 8006002:	2800      	cmp	r0, #0
 8006004:	d1f7      	bne.n	8005ff6 <_printf_i+0x1be>
 8006006:	2f08      	cmp	r7, #8
 8006008:	d109      	bne.n	800601e <_printf_i+0x1e6>
 800600a:	6823      	ldr	r3, [r4, #0]
 800600c:	07db      	lsls	r3, r3, #31
 800600e:	d506      	bpl.n	800601e <_printf_i+0x1e6>
 8006010:	6863      	ldr	r3, [r4, #4]
 8006012:	6922      	ldr	r2, [r4, #16]
 8006014:	4293      	cmp	r3, r2
 8006016:	dc02      	bgt.n	800601e <_printf_i+0x1e6>
 8006018:	2330      	movs	r3, #48	; 0x30
 800601a:	3d01      	subs	r5, #1
 800601c:	702b      	strb	r3, [r5, #0]
 800601e:	9b02      	ldr	r3, [sp, #8]
 8006020:	1b5b      	subs	r3, r3, r5
 8006022:	6123      	str	r3, [r4, #16]
 8006024:	9b05      	ldr	r3, [sp, #20]
 8006026:	aa07      	add	r2, sp, #28
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	0021      	movs	r1, r4
 800602c:	9b04      	ldr	r3, [sp, #16]
 800602e:	9803      	ldr	r0, [sp, #12]
 8006030:	f7ff fe94 	bl	8005d5c <_printf_common>
 8006034:	1c43      	adds	r3, r0, #1
 8006036:	d1b8      	bne.n	8005faa <_printf_i+0x172>
 8006038:	2001      	movs	r0, #1
 800603a:	4240      	negs	r0, r0
 800603c:	b009      	add	sp, #36	; 0x24
 800603e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006040:	08006395 	.word	0x08006395
 8006044:	080063a6 	.word	0x080063a6

08006048 <memchr>:
 8006048:	b2c9      	uxtb	r1, r1
 800604a:	1882      	adds	r2, r0, r2
 800604c:	4290      	cmp	r0, r2
 800604e:	d101      	bne.n	8006054 <memchr+0xc>
 8006050:	2000      	movs	r0, #0
 8006052:	4770      	bx	lr
 8006054:	7803      	ldrb	r3, [r0, #0]
 8006056:	428b      	cmp	r3, r1
 8006058:	d0fb      	beq.n	8006052 <memchr+0xa>
 800605a:	3001      	adds	r0, #1
 800605c:	e7f6      	b.n	800604c <memchr+0x4>

0800605e <memcpy>:
 800605e:	2300      	movs	r3, #0
 8006060:	b510      	push	{r4, lr}
 8006062:	429a      	cmp	r2, r3
 8006064:	d100      	bne.n	8006068 <memcpy+0xa>
 8006066:	bd10      	pop	{r4, pc}
 8006068:	5ccc      	ldrb	r4, [r1, r3]
 800606a:	54c4      	strb	r4, [r0, r3]
 800606c:	3301      	adds	r3, #1
 800606e:	e7f8      	b.n	8006062 <memcpy+0x4>

08006070 <memmove>:
 8006070:	b510      	push	{r4, lr}
 8006072:	4288      	cmp	r0, r1
 8006074:	d902      	bls.n	800607c <memmove+0xc>
 8006076:	188b      	adds	r3, r1, r2
 8006078:	4298      	cmp	r0, r3
 800607a:	d303      	bcc.n	8006084 <memmove+0x14>
 800607c:	2300      	movs	r3, #0
 800607e:	e007      	b.n	8006090 <memmove+0x20>
 8006080:	5c8b      	ldrb	r3, [r1, r2]
 8006082:	5483      	strb	r3, [r0, r2]
 8006084:	3a01      	subs	r2, #1
 8006086:	d2fb      	bcs.n	8006080 <memmove+0x10>
 8006088:	bd10      	pop	{r4, pc}
 800608a:	5ccc      	ldrb	r4, [r1, r3]
 800608c:	54c4      	strb	r4, [r0, r3]
 800608e:	3301      	adds	r3, #1
 8006090:	429a      	cmp	r2, r3
 8006092:	d1fa      	bne.n	800608a <memmove+0x1a>
 8006094:	e7f8      	b.n	8006088 <memmove+0x18>
	...

08006098 <_free_r>:
 8006098:	b570      	push	{r4, r5, r6, lr}
 800609a:	0005      	movs	r5, r0
 800609c:	2900      	cmp	r1, #0
 800609e:	d010      	beq.n	80060c2 <_free_r+0x2a>
 80060a0:	1f0c      	subs	r4, r1, #4
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	da00      	bge.n	80060aa <_free_r+0x12>
 80060a8:	18e4      	adds	r4, r4, r3
 80060aa:	0028      	movs	r0, r5
 80060ac:	f000 f8d4 	bl	8006258 <__malloc_lock>
 80060b0:	4a1d      	ldr	r2, [pc, #116]	; (8006128 <_free_r+0x90>)
 80060b2:	6813      	ldr	r3, [r2, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d105      	bne.n	80060c4 <_free_r+0x2c>
 80060b8:	6063      	str	r3, [r4, #4]
 80060ba:	6014      	str	r4, [r2, #0]
 80060bc:	0028      	movs	r0, r5
 80060be:	f000 f8cc 	bl	800625a <__malloc_unlock>
 80060c2:	bd70      	pop	{r4, r5, r6, pc}
 80060c4:	42a3      	cmp	r3, r4
 80060c6:	d909      	bls.n	80060dc <_free_r+0x44>
 80060c8:	6821      	ldr	r1, [r4, #0]
 80060ca:	1860      	adds	r0, r4, r1
 80060cc:	4283      	cmp	r3, r0
 80060ce:	d1f3      	bne.n	80060b8 <_free_r+0x20>
 80060d0:	6818      	ldr	r0, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	1841      	adds	r1, r0, r1
 80060d6:	6021      	str	r1, [r4, #0]
 80060d8:	e7ee      	b.n	80060b8 <_free_r+0x20>
 80060da:	0013      	movs	r3, r2
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	2a00      	cmp	r2, #0
 80060e0:	d001      	beq.n	80060e6 <_free_r+0x4e>
 80060e2:	42a2      	cmp	r2, r4
 80060e4:	d9f9      	bls.n	80060da <_free_r+0x42>
 80060e6:	6819      	ldr	r1, [r3, #0]
 80060e8:	1858      	adds	r0, r3, r1
 80060ea:	42a0      	cmp	r0, r4
 80060ec:	d10b      	bne.n	8006106 <_free_r+0x6e>
 80060ee:	6820      	ldr	r0, [r4, #0]
 80060f0:	1809      	adds	r1, r1, r0
 80060f2:	1858      	adds	r0, r3, r1
 80060f4:	6019      	str	r1, [r3, #0]
 80060f6:	4282      	cmp	r2, r0
 80060f8:	d1e0      	bne.n	80060bc <_free_r+0x24>
 80060fa:	6810      	ldr	r0, [r2, #0]
 80060fc:	6852      	ldr	r2, [r2, #4]
 80060fe:	1841      	adds	r1, r0, r1
 8006100:	6019      	str	r1, [r3, #0]
 8006102:	605a      	str	r2, [r3, #4]
 8006104:	e7da      	b.n	80060bc <_free_r+0x24>
 8006106:	42a0      	cmp	r0, r4
 8006108:	d902      	bls.n	8006110 <_free_r+0x78>
 800610a:	230c      	movs	r3, #12
 800610c:	602b      	str	r3, [r5, #0]
 800610e:	e7d5      	b.n	80060bc <_free_r+0x24>
 8006110:	6821      	ldr	r1, [r4, #0]
 8006112:	1860      	adds	r0, r4, r1
 8006114:	4282      	cmp	r2, r0
 8006116:	d103      	bne.n	8006120 <_free_r+0x88>
 8006118:	6810      	ldr	r0, [r2, #0]
 800611a:	6852      	ldr	r2, [r2, #4]
 800611c:	1841      	adds	r1, r0, r1
 800611e:	6021      	str	r1, [r4, #0]
 8006120:	6062      	str	r2, [r4, #4]
 8006122:	605c      	str	r4, [r3, #4]
 8006124:	e7ca      	b.n	80060bc <_free_r+0x24>
 8006126:	46c0      	nop			; (mov r8, r8)
 8006128:	2000009c 	.word	0x2000009c

0800612c <_malloc_r>:
 800612c:	2303      	movs	r3, #3
 800612e:	b570      	push	{r4, r5, r6, lr}
 8006130:	1ccd      	adds	r5, r1, #3
 8006132:	439d      	bics	r5, r3
 8006134:	3508      	adds	r5, #8
 8006136:	0006      	movs	r6, r0
 8006138:	2d0c      	cmp	r5, #12
 800613a:	d21e      	bcs.n	800617a <_malloc_r+0x4e>
 800613c:	250c      	movs	r5, #12
 800613e:	42a9      	cmp	r1, r5
 8006140:	d81d      	bhi.n	800617e <_malloc_r+0x52>
 8006142:	0030      	movs	r0, r6
 8006144:	f000 f888 	bl	8006258 <__malloc_lock>
 8006148:	4a25      	ldr	r2, [pc, #148]	; (80061e0 <_malloc_r+0xb4>)
 800614a:	6814      	ldr	r4, [r2, #0]
 800614c:	0021      	movs	r1, r4
 800614e:	2900      	cmp	r1, #0
 8006150:	d119      	bne.n	8006186 <_malloc_r+0x5a>
 8006152:	4c24      	ldr	r4, [pc, #144]	; (80061e4 <_malloc_r+0xb8>)
 8006154:	6823      	ldr	r3, [r4, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d103      	bne.n	8006162 <_malloc_r+0x36>
 800615a:	0030      	movs	r0, r6
 800615c:	f000 f86a 	bl	8006234 <_sbrk_r>
 8006160:	6020      	str	r0, [r4, #0]
 8006162:	0029      	movs	r1, r5
 8006164:	0030      	movs	r0, r6
 8006166:	f000 f865 	bl	8006234 <_sbrk_r>
 800616a:	1c43      	adds	r3, r0, #1
 800616c:	d12b      	bne.n	80061c6 <_malloc_r+0x9a>
 800616e:	230c      	movs	r3, #12
 8006170:	0030      	movs	r0, r6
 8006172:	6033      	str	r3, [r6, #0]
 8006174:	f000 f871 	bl	800625a <__malloc_unlock>
 8006178:	e003      	b.n	8006182 <_malloc_r+0x56>
 800617a:	2d00      	cmp	r5, #0
 800617c:	dadf      	bge.n	800613e <_malloc_r+0x12>
 800617e:	230c      	movs	r3, #12
 8006180:	6033      	str	r3, [r6, #0]
 8006182:	2000      	movs	r0, #0
 8006184:	bd70      	pop	{r4, r5, r6, pc}
 8006186:	680b      	ldr	r3, [r1, #0]
 8006188:	1b5b      	subs	r3, r3, r5
 800618a:	d419      	bmi.n	80061c0 <_malloc_r+0x94>
 800618c:	2b0b      	cmp	r3, #11
 800618e:	d903      	bls.n	8006198 <_malloc_r+0x6c>
 8006190:	600b      	str	r3, [r1, #0]
 8006192:	18cc      	adds	r4, r1, r3
 8006194:	6025      	str	r5, [r4, #0]
 8006196:	e003      	b.n	80061a0 <_malloc_r+0x74>
 8006198:	684b      	ldr	r3, [r1, #4]
 800619a:	428c      	cmp	r4, r1
 800619c:	d10d      	bne.n	80061ba <_malloc_r+0x8e>
 800619e:	6013      	str	r3, [r2, #0]
 80061a0:	0030      	movs	r0, r6
 80061a2:	f000 f85a 	bl	800625a <__malloc_unlock>
 80061a6:	0020      	movs	r0, r4
 80061a8:	2207      	movs	r2, #7
 80061aa:	300b      	adds	r0, #11
 80061ac:	1d23      	adds	r3, r4, #4
 80061ae:	4390      	bics	r0, r2
 80061b0:	1ac3      	subs	r3, r0, r3
 80061b2:	d0e7      	beq.n	8006184 <_malloc_r+0x58>
 80061b4:	425a      	negs	r2, r3
 80061b6:	50e2      	str	r2, [r4, r3]
 80061b8:	e7e4      	b.n	8006184 <_malloc_r+0x58>
 80061ba:	6063      	str	r3, [r4, #4]
 80061bc:	000c      	movs	r4, r1
 80061be:	e7ef      	b.n	80061a0 <_malloc_r+0x74>
 80061c0:	000c      	movs	r4, r1
 80061c2:	6849      	ldr	r1, [r1, #4]
 80061c4:	e7c3      	b.n	800614e <_malloc_r+0x22>
 80061c6:	2303      	movs	r3, #3
 80061c8:	1cc4      	adds	r4, r0, #3
 80061ca:	439c      	bics	r4, r3
 80061cc:	42a0      	cmp	r0, r4
 80061ce:	d0e1      	beq.n	8006194 <_malloc_r+0x68>
 80061d0:	1a21      	subs	r1, r4, r0
 80061d2:	0030      	movs	r0, r6
 80061d4:	f000 f82e 	bl	8006234 <_sbrk_r>
 80061d8:	1c43      	adds	r3, r0, #1
 80061da:	d1db      	bne.n	8006194 <_malloc_r+0x68>
 80061dc:	e7c7      	b.n	800616e <_malloc_r+0x42>
 80061de:	46c0      	nop			; (mov r8, r8)
 80061e0:	2000009c 	.word	0x2000009c
 80061e4:	200000a0 	.word	0x200000a0

080061e8 <_realloc_r>:
 80061e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ea:	0007      	movs	r7, r0
 80061ec:	000d      	movs	r5, r1
 80061ee:	0016      	movs	r6, r2
 80061f0:	2900      	cmp	r1, #0
 80061f2:	d105      	bne.n	8006200 <_realloc_r+0x18>
 80061f4:	0011      	movs	r1, r2
 80061f6:	f7ff ff99 	bl	800612c <_malloc_r>
 80061fa:	0004      	movs	r4, r0
 80061fc:	0020      	movs	r0, r4
 80061fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006200:	2a00      	cmp	r2, #0
 8006202:	d103      	bne.n	800620c <_realloc_r+0x24>
 8006204:	f7ff ff48 	bl	8006098 <_free_r>
 8006208:	0034      	movs	r4, r6
 800620a:	e7f7      	b.n	80061fc <_realloc_r+0x14>
 800620c:	f000 f826 	bl	800625c <_malloc_usable_size_r>
 8006210:	002c      	movs	r4, r5
 8006212:	42b0      	cmp	r0, r6
 8006214:	d2f2      	bcs.n	80061fc <_realloc_r+0x14>
 8006216:	0031      	movs	r1, r6
 8006218:	0038      	movs	r0, r7
 800621a:	f7ff ff87 	bl	800612c <_malloc_r>
 800621e:	1e04      	subs	r4, r0, #0
 8006220:	d0ec      	beq.n	80061fc <_realloc_r+0x14>
 8006222:	0029      	movs	r1, r5
 8006224:	0032      	movs	r2, r6
 8006226:	f7ff ff1a 	bl	800605e <memcpy>
 800622a:	0029      	movs	r1, r5
 800622c:	0038      	movs	r0, r7
 800622e:	f7ff ff33 	bl	8006098 <_free_r>
 8006232:	e7e3      	b.n	80061fc <_realloc_r+0x14>

08006234 <_sbrk_r>:
 8006234:	2300      	movs	r3, #0
 8006236:	b570      	push	{r4, r5, r6, lr}
 8006238:	4c06      	ldr	r4, [pc, #24]	; (8006254 <_sbrk_r+0x20>)
 800623a:	0005      	movs	r5, r0
 800623c:	0008      	movs	r0, r1
 800623e:	6023      	str	r3, [r4, #0]
 8006240:	f7fc fae6 	bl	8002810 <_sbrk>
 8006244:	1c43      	adds	r3, r0, #1
 8006246:	d103      	bne.n	8006250 <_sbrk_r+0x1c>
 8006248:	6823      	ldr	r3, [r4, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d000      	beq.n	8006250 <_sbrk_r+0x1c>
 800624e:	602b      	str	r3, [r5, #0]
 8006250:	bd70      	pop	{r4, r5, r6, pc}
 8006252:	46c0      	nop			; (mov r8, r8)
 8006254:	200001b4 	.word	0x200001b4

08006258 <__malloc_lock>:
 8006258:	4770      	bx	lr

0800625a <__malloc_unlock>:
 800625a:	4770      	bx	lr

0800625c <_malloc_usable_size_r>:
 800625c:	1f0b      	subs	r3, r1, #4
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	1f18      	subs	r0, r3, #4
 8006262:	2b00      	cmp	r3, #0
 8006264:	da01      	bge.n	800626a <_malloc_usable_size_r+0xe>
 8006266:	580b      	ldr	r3, [r1, r0]
 8006268:	18c0      	adds	r0, r0, r3
 800626a:	4770      	bx	lr

0800626c <_init>:
 800626c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800626e:	46c0      	nop			; (mov r8, r8)
 8006270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006272:	bc08      	pop	{r3}
 8006274:	469e      	mov	lr, r3
 8006276:	4770      	bx	lr

08006278 <_fini>:
 8006278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627a:	46c0      	nop			; (mov r8, r8)
 800627c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800627e:	bc08      	pop	{r3}
 8006280:	469e      	mov	lr, r3
 8006282:	4770      	bx	lr
